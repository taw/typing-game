let code = [{"title":"Compound data type","code":"typedef struct Point\n{\n  int x;\n  int y;\n} Point;","language":"c"},{"title":"Compound data type","code":"struct Point\n{\n  public int x, y;\n  public Point(int x, int y) {\n    this.x = x;\n    this.y = y;\n  }\n}","language":"csharp"},{"title":"Compound data type","code":"struct Point\n{\n  int x;\n  int y;\n};","language":"cpp"},{"title":"Compound data type","code":"struct Point\n{\n  int x;\n  int y;\n  Point(int ax, int ay): x(ax), y(ax) {}\n};","language":"cpp"},{"title":"Compound data type","code":"template<typename Coordinate> struct point\n{\n  Coordinate x, y;\n};\n\n// A point with integer coordinates\nPoint<int> point1 = { 3, 5 };\n\n// a point with floating point coordinates\nPoint<float> point2 = { 1.7, 3.6 };","language":"cpp"},{"title":"Compound data type","code":"a = {x = 1; y = 2}\nb = {x = 3; y = 4}\nc = {\n    x = a.x + b.x;\n    y = a.y + b.y\n}\nprint(a.x, a.y)  --> 1 2\nprint(c.x, c.y)  --> 4 6","language":"lua"},{"title":"Compound data type","code":"a = newPoint(1, 2)\nb = newPoint(3, 4)\nc = a + b             -- using __add behaviour\nprint(a:getXY())      --> 1 2\nprint(type(a))        --> point\nprint(c:getXY())      --> 4 6\nprint((a-b):getXY())  --> -2 -2  -- using __sub behaviour","language":"lua"},{"title":"Compound data type","code":"X, Y = 0, 1\np = (3, 4)\np = [3, 4]\n\nprint p[X]","language":"python"},{"title":"Compound data type","code":"class Point:\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n\np = Point()\nprint p.x","language":"python"},{"title":"Compound data type","code":"class MyObject(object): pass\npoint = MyObject()\npoint.x, point.y = 0, 1\n# objects directly instantiated from \"object()\"  cannot be \"monkey patched\"\n# however this can generally be done to it's subclasses","language":"python"},{"title":"Compound data type","code":"struct Point {x, y};\nvar point = Point(1, 2);\nsay point.y;                #=> 2","language":"ruby"},{"title":"Stack","code":"var stack = [];\nstack.push(1)\nstack.push(2,3);\nprint(stack.pop());   // 3\nprint(stack.length);   // 2, stack empty if 0","language":"javascript"},{"title":"Stack","code":"function Stack() {\n    this.data = new Array();\n\n    this.push  = function(element) {this.data.push(element)}\n    this.pop   = function() {return this.data.pop()}\n    this.empty = function() {return this.data.length == 0}\n    this.peek  = function() {return this.data[this.data.length - 1]}\n}","language":"javascript"},{"title":"Stack","code":"stack = {}\ntable.insert(stack,3)\nprint(table.remove(stack)) --> 3","language":"lua"},{"title":"Stack","code":"from collections import deque\nstack = deque()\nstack.append(value) # pushing\nvalue = stack.pop()\nnot stack # is empty?","language":"python"},{"title":"Stack","code":"from collections import deque\n\nclass Stack:\n    def __init__(self):\n        self._items = deque()\n    def append(self, item):\n        self._items.append(item)\n    def pop(self):\n        return self._items.pop()\n    def __nonzero__(self):\n        return bool(self._items)","language":"python"},{"title":"Stack","code":"class Stack:\n    def __init__(self):\n        self._first = None\n    def __nonzero__(self):\n        return self._first is not None \n    def append(self, value):\n        self._first = (value, self._first)\n    def pop(self):\n        if self._first is None:\n            raise IndexError, \"pop from empty stack\"\n        value, self._first = self._first\n        return value","language":"python"},{"title":"Stack","code":"stack = []\nstack.push(value) # pushing\nvalue = stack.pop # popping\nstack.empty? # is empty?","language":"ruby"},{"title":"Stack","code":"var stack = [];\nstack.push(42);         # pushing\nsay stack.pop;          # popping\nsay stack.is_empty;     # is_emtpy?","language":"ruby"},{"title":"Stack","code":"class Stack(stack=[]) {\n    method pop        { stack.pop };\n    method push(item) { stack.push(item) };\n    method empty      { stack.is_empty };\n}\n\nvar stack = Stack();\nstack.push(42);\nsay stack.pop;          # => 42\nsay stack.empty;        # => true","language":"ruby"},{"title":"Queue/Definition","code":"var fifo = [];\nfifo.push(42); // Enqueue.\nfifo.push(43);\nvar x = fifo.shift(); // Dequeue.\nalert(x); // 42","language":"javascript"},{"title":"Queue/Definition","code":"function FIFO() {\n    this.data = new Array();\n\n    this.push  = function(element) {this.data.push(element)}\n    this.pop   = function() {return this.data.shift()}\n    this.empty = function() {return this.data.length == 0}\n\n    this.enqueue = this.push;\n    this.dequeue = this.pop;\n}","language":"javascript"},{"title":"Queue/Definition","code":"from collections import deque\nfifo = deque()\nfifo. appendleft(value) # push\nvalue = fifo.pop()\nnot fifo # empty\nfifo.pop() # raises IndexError when empty","language":"python"},{"title":"Create a two-dimensional array at runtime","code":"width = int(raw_input(\"Width of myarray: \"))\nheight = int(raw_input(\"Height of Array: \"))\nmyarray = [[0] * width for i in xrange(height)]\nmyarray[0][0] = 3.5\nprint myarray[0][0]","language":"python"},{"title":"Create a two-dimensional array at runtime","code":"puts 'Enter width and height: '\nw=gets.to_i\narr = Array.new(gets.to_i){Array.new(w)}\narr[1][3] = 5\np arr[1][3]","language":"ruby"},{"title":"Create a two-dimensional array at runtime","code":"func make_matrix(x, y) {\n    y.of { x.of(0) };\n}\n\nvar y = Sys.scanln(\"rows: \").to_i;\nvar x = Sys.scanln(\"cols: \").to_i;\n\nvar matrix = make_matrix(x, y);   # create the matrix\nmatrix[y/2][x/2] = 1;             # write something inside it\nsay matrix;                       # display the matrix","language":"ruby"},{"title":"Queue/Usage","code":"let myQueue = Queue()\nmyQueue.push 'foo'\nmyQueue.push 'bar'\nmyQueue.push 'baz'\nprint myQueue.pop() # => 'foo'\nprint myQueue.pop() # => 'bar'\nprint myQueue.pop() # => 'baz'","language":"python"},{"title":"Queue/Usage","code":"import java.util.LinkedList;\n...\nLinkedList queue = new LinkedList();\nSystem.out.println(queue.isEmpty());      // empty test - true\nqueue.add(new Integer(1));\nqueue.add(new Integer(2));\nqueue.add(new Integer(3));\nSystem.out.println(queue);                // [1, 2, 3]\nSystem.out.println(queue.removeFirst());  // 1\nSystem.out.println(queue);                // [2, 3]\nSystem.out.println(queue.isEmpty());      // false","language":"java"},{"title":"Queue/Usage","code":"var f = new Array();\nprint(f.length);\nf.push(1,2);         // can take multiple arguments\nf.push(3);\nf.shift();\nf.shift();\nprint(f.length);\nprint(f.shift())\nprint(f.length == 0);\nprint(f.shift());","language":"javascript"},{"title":"Queue/Usage","code":"q = Queue.new()\nQueue.push( q, 5 )\nQueue.push( q, \"abc\" )\n\nwhile not Queue.empty( q ) do\n    print( Queue.pop( q ) )\nend","language":"lua"},{"title":"Queue/Usage","code":"import Queue\nmy_queue = Queue.Queue()\nmy_queue.put(\"foo\")\nmy_queue.put(\"bar\")\nmy_queue.put(\"baz\")\nprint my_queue.get()  # foo\nprint my_queue.get()  # bar\nprint my_queue.get()  # baz","language":"python"},{"title":"Queue/Usage","code":"var f = FIFO();\nsay f.empty;        # true\nf.push('foo');\nf.push('bar', 'baz');\nsay f.pop;          # foo\nsay f.empty;        # false\n\nvar g = FIFO('xxx', 'yyy');\nsay g.pop;          # xxx\nsay f.pop;          # bar","language":"ruby"},{"title":"Conditional structures","code":"if (s == 'Hello World') {\n    foo();\n} else if (s == 'Bye World') {\n    bar();\n} else {\n    deusEx();\n}","language":"java"},{"title":"Conditional structures","code":"if(obj != null && obj.foo()){\n   aMethod();\n}","language":"java"},{"title":"Conditional structures","code":"if(obj != null & obj.foo()){\n   aMethod();\n}","language":"java"},{"title":"Conditional structures","code":"a = 3\nif( a == 1 ){\n    io.writeln( 'a == 1' )\n}else if( a== 3 ){\n    io.writeln( 'a == 3' )\n}else{\n    io.writeln( 'a is neither 1 nor 3' )\n}","language":"java"},{"title":"Conditional structures","code":"a = 3\nswitch( a ){\ncase 0: io.writeln( 'case 0' )\ncase 1, 2: io.writeln( 'case 1,2' )\ncase 3, 4, 5: io.writeln( 'case 3,4,5' )\ndefault: io.writeln( 'default' )\n}","language":"java"},{"title":"Conditional structures","code":"if(s.equals(\"Hello World\"))\n{\n    foo();\n}\nelse if(s.equals(\"Bye World\"))\n    bar();//{}'s optional for one-liners\nelse\n{\n    deusEx();\n}","language":"java"},{"title":"Conditional structures","code":"if(obj != null && obj.foo()){\n   aMethod();\n}","language":"java"},{"title":"Conditional structures","code":"if(obj != null & obj.foo()){\n   aMethod();\n}","language":"java"},{"title":"Conditional structures","code":"switch(c) {\ncase 'a':\n   foo();\n   break;\ncase 'b':\n   bar();\ndefault:\n   foobar();\n}","language":"java"},{"title":"Conditional structures","code":"if(c == 'a'){\n   foo();\n}else if(c == 'b'){\n   bar();\n   foobar();\n}else{\n   foobar();\n}","language":"java"},{"title":"Conditional structures","code":"if( s == \"Hello World\" ) {\n    foo();\n} else if( s == \"Bye World\" ) {\n    bar();\n} else {\n    deusEx();\n}","language":"javascript"},{"title":"Conditional structures","code":"function takeWhile(lst, fnTest) {\n    'use strict';\n    var varHead = lst.length ? lst[0] : null;\n\n    return varHead ? (\n        fnTest(varHead) ? [varHead].concat(\n            takeWhile(lst.slice(1), fnTest)\n        ) : []\n    ) : [];\n}","language":"JavaScript"},{"title":"Conditional structures","code":"if x == 0:\n    foo()\nelif x == 1:\n    bar()\nelif x == 2:\n    baz()\nelse:\n    boz()","language":"python"},{"title":"Conditional structures","code":"# The above, but with a dict literal\ndispatcher = {\n    0: foo,\n    1: bar,\n    2: baz,\n}\n# ...\nresults = dispatcher.get(x, boz)()","language":"python"},{"title":"Conditional structures","code":"# Or without the temp variable\n# (it's up to the reader to decide how \"pythonic\" this is or isn't)\nresults = {\n    0: foo,\n    1: bar,\n    2: baz,\n}.get(x, boz)()","language":"python"},{"title":"Conditional structures","code":"if(i>1)\n   DoSomething\n\nFailedSoContinueCodeExecution.","language":"c"},{"title":"Conditional structures","code":"if(i>1)\n   DoSomething\nelse if(i<=1)\n   DoSomethingElse\nFailedSoContinueCodeExecution","language":"c"},{"title":"Conditional structures","code":"if(i==1)\n   DoSomething\nelse\n   DoSomethingElse\nFailedSoContinueExecution","language":"c"},{"title":"Flow-control structures","code":"#include <iostream> \n\nint main()\n{\n LOOP:\n  std::cout << \"Hello, World!\\n\";\n goto LOOP;\n}","language":"cpp"},{"title":"Flow-control structures","code":"i = 0\nwhile true do\n    i = i + 1\n    if i > 10 then break end\nend","language":"lua"},{"title":"Flow-control structures","code":"function func1 ()\n  return func2()\nend\n\nfunction func2 ()\n  return func1()\nend\n\nfunc1()","language":"lua"},{"title":"Flow-control structures","code":"# Search for an odd factor of a using brute force:\nfor i in range(n):\n    if (n%2) == 0:\n        continue\n    if (n%i) == 0:\n        result = i\n        break\nelse:\n    result = None\n    print \"No odd factors found\"","language":"python"},{"title":"Flow-control structures","code":"class MyVirtual(object):\n    def __init__(self):\n        raise NotImplementedError","language":"python"},{"title":"Flow-control structures","code":"try:\n    temp = 0/0\n# here, 'except' catches a specific type of error raised within the try block.\nexcept ZeroDivisionError:\n    print \"You've divided by zero!\"\n# Output : \"You've divided by zero!\"","language":"python"},{"title":"Flow-control structures","code":"try:\n    temp = 1/1 # not a division by zero error\nexcept ZeroDivisionError: # so... it is not caught\n    print \"You've divided by zero.\"\n# here, 'else' executes when no exceptions are caught...\nelse:\n    print \"No apparent error occurred.\"\n# Output :\n# No apparent error occurred.","language":"python"},{"title":"Flow-control structures","code":"class Quitting(Exception): pass\nmax = 10 \nwith open(\"some_file\") as myfile:\n    exit_counter = 0\n    for line in myfile:\n        exit_counter += 1\n        if exit_counter > max:\n            raise Quitting \n        print line,","language":"python"},{"title":"Flow-control structures","code":"values = [\"1\", \"2.3\", /pattern/]\nresult = values.map {|v| Integer(v) rescue Float(v) rescue String(v)}\n# => [1, 2.3, \"(?-mix:pattern)\"]","language":"ruby"},{"title":"Exceptions","code":"struct MyException\n{\n  // data with info about exception\n};","language":"cpp"},{"title":"Exceptions","code":"#include <exception>\nstruct MyException: std::exception\n{\n  char const* what() const throw() { return \"description\"; }\n}","language":"cpp"},{"title":"Exceptions","code":"public class MyException : Exception\n{\n  // data with info about exception\n};","language":"csharp"},{"title":"Exceptions","code":"void foo()\n{\n  throw MyException();\n}","language":"csharp"},{"title":"Exceptions","code":"try {\n  foo();\n}\ncatch (MyException e)\n{\n  // handle exceptions of type MyException and derived\n}\ncatch\n{\n  // handle any type of exception not handled by above catches\n}","language":"csharp"},{"title":"Exceptions","code":"try(o foo)\n    {\n        on(MyException e)\n        [\n            // handle exceptions of type MyException and derived\n        ]\n    }","language":"csharp"},{"title":"Exceptions","code":"o foo | if(:e) \n   [ \n      // handle any type of exception not handled by above catches\n   ].","language":"csharp"},{"title":"Exceptions","code":"//Checked exception\npublic class MyException extends Exception {\n   //Put specific info in here\n}\n\n//Unchecked exception\npublic class MyRuntimeException extends RuntimeException {}","language":"java"},{"title":"Exceptions","code":"public void fooChecked() throws MyException {\n   throw new MyException();\n}\n\npublic void fooUnchecked() {\n   throw new MyRuntimeException();\n}","language":"java"},{"title":"Exceptions","code":"function doStuff() {\n  throw new Error('Not implemented!');\n}","language":"javascript"},{"title":"Exceptions","code":"try {\n  element.attachEvent('onclick', doStuff);\n}\ncatch(e if e instanceof TypeError) {\n  element.addEventListener('click', doStuff, false);\n}\nfinally {\n  eventSetup = true;\n}","language":"javascript"},{"title":"Exceptions","code":"function throw_error_with_argment(argument)\n    error(string.format(\"Whoops! argument = %s\", argument))\n    -- won't ever appear, due to previous error() call\n    return \"hello!\"\nend\n\nstatus, errmsg = pcall(throw_error_with_argment, \"foobar 123\")\nprint(\"errmsg = \", errmsg)","language":"Lua"},{"title":"Exceptions","code":"function throw_error_with_argment(argument)\n    return \"hello!\"\nend\n\nstatus, errmsg = pcall(throw_error_with_argment, \"foobar 123\")\nprint(\"errmsg = \", errmsg)","language":"Lua"},{"title":"Exceptions","code":"import exceptions\nclass SillyError(exceptions.Exception):\n    def __init__(self,args=None):\n         self.args=args","language":"python"},{"title":"Exceptions","code":"try:\n   foo()\nexcept SillyError, se:\n   print se.args\n   bar()\nelse:\n   # no exception occurred\n   quux()\nfinally:\n   baz()","language":"python"},{"title":"Exceptions","code":"try:\n   foo()\nexcept SillyError as se:\n   print(se.args)\n   bar()\nelse:\n   # no exception occurred\n   quux()\nfinally:\n   baz()","language":"python"},{"title":"Exceptions","code":"# define an exception\nclass SillyError < Exception\nend","language":"ruby"},{"title":"Exceptions","code":"# raise (throw) an exception\ndef spam\n  raise SillyError, 'egg'\nend\n\n# rescue (catch) an exception\nbegin\n  spam\nrescue SillyError => se\n  puts se  # writes 'egg' to stdout\nend","language":"ruby"},{"title":"Exceptions","code":"def foo\n    throw :done\nend\n\ncatch :done do\n    foo\nend","language":"ruby"},{"title":"Exceptions","code":"try  {\n    die \"I'm dead!\";        # throws an exception of type 'error'\n}\ncatch { |type, msg|\n    say \"type: #{type}\";    # type: error\n    say \"msg: #{msg}\";      # msg: I'm dead! at test.sf line 2.\n};\n\nsay \"I'm alive...\";\ndie \"Now I'm dead!\";        # this line terminates the program\nsay \"Or am I?\";             # Yes, you are!","language":"ruby"},{"title":"Classes","code":"class MyClass\n{\npublic:\n  MyClass(): variable(0) {}\n  void someMethod() { variable = 1; }\nprivate:\n  int variable;\n};","language":"cpp"},{"title":"Classes","code":"class MyClass\n{\npublic:\n  virtual void someMethod(); // this is polymorphic\n  virtual ~MyClass(); // destructor\n};","language":"cpp"},{"title":"Classes","code":"// instantiate the class:\nProgrammingLanguage processing = new ProgrammingLanguage(\"Processing\");\n\n// call the method:\nprocessing.sayHello();","language":"java"},{"title":"Classes","code":"class MyClass(instance_var) {\n    method add(num) {\n        instance_var += num;\n    }\n}\n\nvar obj = MyClass(3);   # `instance_var` will be set to 3\nobj.add(5);             # calls the add() method\nsay obj.instance_var;   # prints the value of `instance_var`: 8","language":"ruby"},{"title":"Sort an integer array","code":"#include <algorithm>\n\nint main()\n{\n    int nums[] = {2,4,3,1,2};\n    std::sort(nums, nums+sizeof(nums)/sizeof(int));\n    return 0;\n}","language":"cpp"},{"title":"Sort an integer array","code":"using System;\nusing System.Collections.Generic;\n\npublic class Program {\n    static void Main() {\n        int[] unsorted = { 6, 2, 7, 8, 3, 1, 10, 5, 4, 9 };\n        Array.Sort(unsorted);\n    }\n}","language":"csharp"},{"title":"Sort an integer array","code":"mums := list(2,4,3,1,2)\nsorted := nums sort  # returns a new sorted array.  'nums' is unchanged\nnums sortInPlace  # sort 'nums' \"in-place\"","language":"lua"},{"title":"Sort an integer array","code":"import java.util.Arrays;\n\npublic class example {\n    public static void main(String[] args)\n    {\n        int[] nums = {2,4,3,1,2};\n        Arrays.sort(nums);\n    }\n}","language":"java"},{"title":"Sort an integer array","code":"function int_arr(a, b) {\n  return a - b;\n}\nvar numbers = [20, 7, 65, 10, 3, 0, 8, -60];\nnumbers.sort(int_arr);\ndocument.write(numbers);","language":"javascript"},{"title":"Sort an integer array","code":"t = {4, 5, 2}\ntable.sort(t)\nprint(unpack(t))","language":"lua"},{"title":"Sort an integer array","code":"#include <order/interpreter.h>\n\nORDER_PP( 8seq_sort(8less, 8seq(2, 4, 3, 1, 2)) )","language":"c"},{"title":"Sort an integer array","code":"nums = [2,4,3,1,2]\nsorted = nums.sort      # returns a new sorted array.  'nums' is unchanged\np sorted                #=> [1, 2, 2, 3, 4]\np nums                  #=> [2, 4, 3, 1, 2]\n\nnums.sort!              # sort 'nums' \"in-place\"\np nums                  #=> [1, 2, 2, 3, 4]","language":"ruby"},{"title":"Sort an integer array","code":"var nums = [2,4,3,1,2];\nvar sorted = nums.sort;  # returns a new sorted array.\nnums.sort!;              # sort 'nums' \"in-place\"","language":"ruby"},{"title":"Walk a directory/Recursively","code":"import java.io.IOException;\nimport java.nio.file.*;\n\npublic class WalkTree {\n        public static void main(String[] args) throws IOException {\n                Path start = FileSystems.getDefault().getPath(\"/path/to/file\");\n                Files.walk(start)\n                     .filter( path -> path.toFile().isFile())\n                     .filter( path -> path.toString().endsWith(\".mp3\"))\n                     .forEach( System.out::println );\n        }\n}","language":"java"},{"title":"Walk a directory/Recursively","code":"import fnmatch\nimport os\n\nrootPath = '/'\npattern = '*.mp3'\n \nfor root, dirs, files in os.walk(rootPath):\n    for filename in fnmatch.filter(files, pattern):\n        print( os.path.join(root, filename))","language":"python"},{"title":"Walk a directory/Recursively","code":"from fnmatch import fnmatch\nimport os, os.path\n\ndef print_fnmatches(pattern, dir, files):\n    for filename in files:\n        if fnmatch(filename, pattern):\n            print os.path.join(dir, filename)\n\nos.path.walk('/', print_fnmatches, '*.mp3')","language":"python"},{"title":"Walk a directory/Recursively","code":"from path import path\n\nrootPath = '/'\npattern = '*.mp3'\n\nd = path(rootPath)\nfor f in d.walkfiles(pattern):\n  print f","language":"python"},{"title":"Walk a directory/Recursively","code":"require 'find'\n\nFind.find('/your/path') do |f|\n   # print file and path to screen if filename ends in \".mp3\"\n   puts f if f.match(/\\.mp3\\Z/)\nend","language":"ruby"},{"title":"Sort using a custom comparator","code":"strings = \"here are Some sample strings to be sorted\".split()\n\ndef mykey(x):\n    return -len(x), x.upper()\n\nprint sorted(strings, key=mykey)","language":"python"},{"title":"Sort using a custom comparator","code":"def mycmp(s1, s2):\n    return cmp(len(s2), len(s1)) or cmp(s1.upper(), s2.upper())\n\nprint sorted(strings, cmp=mycmp)","language":"python"},{"title":"Sort using a custom comparator","code":"func mycmp(a, b) { (b.len <=> a.len) || (a.lc <=> b.lc) };\nvar strings = %w(Here are some sample strings to be sorted);\nvar sorted = strings.sort(mycmp);","language":"ruby"},{"title":"Execute a system command","code":"#include <stdlib.h>\n\nint main()\n{\n    system(\"ls\");\n    return 0;\n}","language":"c"},{"title":"Execute a system command","code":"using System.Diagnostics;\n\nnamespace Execute\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Process.Start(\"cmd.exe\", \"/c dir\");\n        }\n    }\n}","language":"csharp"},{"title":"Execute a system command","code":"using System;\n \n  class Execute {\n     static void Main() {\n         System.Diagnostics.Process proc = new System.Diagnostics.Process();\n         proc.EnableRaisingEvents=false;\n         proc.StartInfo.FileName=\"ls\";\n         proc.Start();\n    }\n }","language":"csharp"},{"title":"Execute a system command","code":"runCommand(\"cmd\", \"/c\", \"dir\", \"d:\\\\\");\nprint(\"===\");\nvar options = {\n    // can specify arguments here in the options object\n    args: [\"/c\", \"dir\", \"d:\\\\\"],\n    // capture stdout to the options.output property\n    output: ''\n};\nrunCommand(\"cmd\", options);\nprint(options.output);","language":"javascript"},{"title":"Execute a system command","code":"-- just executing the command\nos.execute(\"ls\")\n\n-- to execute and capture the output, use io.popen\nlocal f = io.popen(\"ls\") -- store the output in a \"file\"\nprint( f:read(\"*a\") )    -- print out the \"file\"'s content","language":"lua"},{"title":"Execute a system command","code":"import subprocess\n# if the exit code was non-zero these commands raise a CalledProcessError\nexit_code = subprocess.check_call(['ls', '-l'])   # Python 2.5+\nassert exit_code == 0\noutput    = subprocess.check_output(['ls', '-l']) # Python 2.7+","language":"python"},{"title":"Execute a system command","code":"from subprocess import PIPE, Popen, STDOUT\np = Popen('ls', stdout=PIPE, stderr=STDOUT)\nprint p.communicate()[0]","language":"python"},{"title":"Execute a system command","code":"import commands\nstat, out = commands.getstatusoutput('ls')\nif not stat:\n    print out","language":"python"},{"title":"Execute a system command","code":"# Pipe in read-only mode\n%p(ls).open_r.each { |line|\n    print line;\n};\n\nvar str1 = `ls`;         # backtick: returns a string\nvar str2 = %x(ls);       # ditto, alternative syntax\n\nSys.system('ls');   # system: executes a command and prints the result\nSys.exec('ls');     # replaces current process with another","language":"ruby"},{"title":"Tokenize a string","code":"let text = 'Hello,How,Are,You,Today'\nlet tokens = text.split /,/\nprint join('.', tokens)","language":"python"},{"title":"Tokenize a string","code":"string str = \"Hello,How,Are,You,Today\"; \n// or Regex.Split ( \"Hello,How,Are,You,Today\", \",\" );\n// (Regex is in System.Text.RegularExpressions namespace)\nstring[] strings = str.Split(',');\nConsole.WriteLine(String.Join(\".\", s));","language":"csharp"},{"title":"Tokenize a string","code":"function string:split (sep)\n    local sep, fields = sep or \":\", {}\n    local pattern = string.format(\"([^%s]+)\", sep)\n    self:gsub(pattern, function(c) fields[#fields+1] = c end)\n    return fields\nend\n\nlocal str = \"Hello,How,Are,You,Today\"\nprint(table.concat(str:split(\",\"), \".\"))","language":"Lua"},{"title":"Tokenize a string","code":"text = \"Hello,How,Are,You,Today\"\ntokens = text.split(',')\nprint ('.'.join(tokens))","language":"python"},{"title":"Hostname","code":"var network = new ActiveXObject('WScript.Network');\nvar hostname = network.computerName;\nWScript.echo(hostname);","language":"javascript"},{"title":"Concurrent computing","code":"fun main(): \n    let words = ['Enjoy', 'Rosetta', 'Code']\n    random.seed(time.now())\n    let q = Chan[Str]()\n\n    for w in words: \n        run (w:) -> \n            time.sleep(random())\n            q << w \n\n    for i in [:words.size]:\n        print q","language":"python"},{"title":"Concurrent computing","code":"#include <stdio.h>\n#include <omp.h>\n\nint main()\n{\n        const char *str[] = { \"Enjoy\", \"Rosetta\", \"Code\" };\n        #pragma omp parallel for num_threads(3)\n        for (int i = 0; i < 3; i++)\n                printf(\"%s\\n\", str[i]);\n        return 0;\n}","language":"C"},{"title":"Concurrent computing","code":"self.addEventListener('message', function (event) {\n  self.postMessage(event.data);\n  self.close();\n}, false);","language":"javascript"},{"title":"Concurrent computing","code":"var words = [\"Enjoy\", \"Rosetta\", \"Code\"];\nvar workers = [];\n\nfor (var i = 0; i < words.length; i++) {\n  workers[i] = new Worker(\"concurrent_worker.js\");\n  workers[i].addEventListener('message', function (event) {\n    console.log(event.data);\n  }, false);\n  workers[i].postMessage(words[i]);\n}","language":"javascript"},{"title":"Concurrent computing","code":"import threading\nimport random\n \ndef echo(text):\n    print(text)\n \nthreading.Timer(random.random(), echo, (\"Enjoy\",)).start()\nthreading.Timer(random.random(), echo, (\"Rosetta\",)).start()\nthreading.Timer(random.random(), echo, (\"Code\",)).start()","language":"python"},{"title":"Concurrent computing","code":"import threading\nimport random\n\ndef echo(text):\n    print(text)\n\nfor text in [\"Enjoy\", \"Rosetta\", \"Code\"]:\n    threading.Timer(random.random(), echo, (text,)).start()","language":"python"},{"title":"Concurrent computing","code":"from __future__ import print_function\nfrom multiprocessing import Pool\n\ndef main():\n    p = Pool()\n    p.map(print, 'Enjoy Rosetta Code'.split())\n\nif __name__==\"__main__\":\n    main()","language":"python"},{"title":"Concurrent computing","code":"import random\nfrom twisted.internet    import reactor, task, defer\nfrom twisted.python.util import println\n\ndelay = lambda: 1e-4*random.random()\nd = defer.DeferredList([task.deferLater(reactor, delay(), println, line)\n                        for line in 'Enjoy Rosetta Code'.split()])\nd.addBoth(lambda _: reactor.stop())\nreactor.run()","language":"python"},{"title":"Concurrent computing","code":"from __future__ import print_function\nimport random\nimport gevent\n\ndelay = lambda: 1e-4*random.random()\ngevent.joinall([gevent.spawn_later(delay(), print, line)\n               for line in 'Enjoy Rosetta Code'.split()])","language":"python"},{"title":"Concurrent computing","code":"%w{Enjoy Rosetta Code}.map do |x|\n    Thread.new do\n        sleep rand\n        puts x\n    end\nend.each do |t| \n  t.join\nend","language":"ruby"},{"title":"Concurrent computing","code":"var a = <Enjoy Rosetta Code>\n\na.map{|str|\n    {   Sys.sleep(1.rand)\n        say str\n    }.fork\n}.map{|thr| thr.wait }","language":"ruby"},{"title":"Fork","code":"local posix = require 'posix'\n\nlocal pid = posix.fork()\nif pid == 0 then\n    print(\"child process\")\nelseif pid > 0 then\n    print(\"parent process\")\nelse\n    error(\"unable to fork\")\nend","language":"Lua"},{"title":"Fork","code":"void\nfoo()\n{\n  if (pari_daemon())\n    pari_printf(\"Original\\n\");\n  else\n    pari_printf(\"Fork\\n\");\n}","language":"C"},{"title":"Fork","code":"import os\n\npid = os.fork()\nif pid > 0:\n # parent code\nelse:\n # child code","language":"python"},{"title":"Fork","code":"pid = fork\nif pid\n # parent code\nelse\n # child code\nend","language":"ruby"},{"title":"Fork","code":"fork do\n  # child code\nend\n# parent code","language":"ruby"},{"title":"Fork","code":"var x = 42;\n{ x += 1; say x }.fork.wait;     # x is 43 here\nsay x;                           # but here is still 42","language":"ruby"},{"title":"Synchronous concurrency","code":"count = 0\n\ndef reader():\n    for line in open('input.txt'):\n        yield line.rstrip()\n    print('Printed %d lines.' % count)\n\nr = reader() \n# printer\nfor line in r:\n    print(line)\n    count += 1","language":"python"},{"title":"Synchronous concurrency","code":"count = 0\nIO.foreach(\"input.txt\") { |line| print line; count += 1 }\nputs \"Printed #{count} lines.\"","language":"ruby"},{"title":"Synchronous concurrency","code":"count = 0\nreader = Fiber.new do\n  IO.foreach(\"input.txt\") { |line| Fiber.yield line }\n  puts \"Printed #{count} lines.\"\n  nil\nend\n\n# printer\nwhile line = reader.resume\n  print line\n  count += 1\nend","language":"ruby"},{"title":"String case","code":"#include <iostream>\n#include <string>\n\nusing namespace std;\nint main() {\n  string foo(\"_upperCas3Me!!\");\n  str_toupper(foo);\n  cout << foo << endl;\n  str_tolower(foo);\n  cout << foo << endl;\n  return 0;\n}","language":"cpp"},{"title":"String case","code":"var string = \"alphaBETA\";\nvar uppercase = string.toUpperCase();\nvar lowercase = string.toLowerCase();","language":"javascript"},{"title":"String case","code":"str = \"alphaBETA\"\nprint( string.upper(str) )\nprint( string.lower(str) )","language":"Lua"},{"title":"String case","code":"s = \"alphaBETA\"\nprint s.upper() # => \"ALPHABETA\"\nprint s.lower() # => \"alphabeta\"\n\nprint s.swapcase() # => \"ALPHAbeta\"\n\nprint \"fOo bAR\".capitalize() # => \"Foo bar\"\nprint \"fOo bAR\".title() # => \"Foo Bar\"\n\nimport string\nprint string.capwords(\"fOo bAR\") # => \"Foo Bar\"","language":"python"},{"title":"String case","code":"\"alphaBETA\".downcase # => \"alphabeta\"\n\"alphaBETA\".upcase # => \"ALPHABETA\"\n\n\"alphaBETA\".swapcase # => \"ALPHAbeta\"\n\"alphaBETA\".capitalize # => \"Alphabeta\"","language":"ruby"},{"title":"String case","code":"say \"alphaBETA\".lc;             #=> alphabeta\nsay \"alphaBETA\".uc;             #=> ALPHABETA\nsay \"alphaBETA\".tc;             #=> AlphaBETA\nsay \"alpha BETA\".wc;            #=> Alpha Beta\nsay \"alpha BETA\".tc;            #=> Alpha BETA\nsay \"alpha BETA\".tclc;          #=> Alpha beta","language":"ruby"},{"title":"Formatted numeric output","code":"#include <stdio.h>\nmain(){\n  float r=7.125;\n  printf(\" %9.3f\\n\",-r);\n  printf(\" %9.3f\\n\",r);\n  printf(\" %-9.3f\\n\",r);\n  printf(\" %09.3f\\n\",-r);\n  printf(\" %09.3f\\n\",r);\n  printf(\" %-09.3f\\n\",r);\n  return 0;\n}","language":"c"},{"title":"Formatted numeric output","code":"var n = 123;\nvar str = (\"00000\" + n).slice(-5);\nalert(str);","language":"javascript"},{"title":"Formatted numeric output","code":"function digits(n) return math.floor(math.log(n) / math.log(10))+1 end\nfunction fixedprint(num, digs) --digs = number of digits before decimal point\n  for i = 1, digs - digits(num) do\n    io.write\"0\"\n  end\n  print(num)\nend\n\nfixedprint(7.125, 5) --> 00007.125","language":"lua"},{"title":"Formatted numeric output","code":"from math import pi, exp\nr = exp(pi)-pi\nprint r\nprint \"e=%e f=%f g=%g G=%G s=%s r=%r!\"%(r,r,r,r,r,r)\nprint \"e=%9.4e f=%9.4f g=%9.4g!\"%(-r,-r,-r)\nprint \"e=%9.4e f=%9.4f g=%9.4g!\"%(r,r,r)\nprint \"e=%-9.4e f=%-9.4f g=%-9.4g!\"%(r,r,r)\nprint \"e=%09.4e f=%09.4f g=%09.4g!\"%(-r,-r,-r)\nprint \"e=%09.4e f=%09.4f g=%09.4g!\"%(r,r,r)\nprint \"e=%-09.4e f=%-09.4f g=%-09.4g!\"%(r,r,r)","language":"python"},{"title":"Formatted numeric output","code":"from math import pi, exp\nr = exp(pi)-pi\nprint(r)\nprint(\"e={0:e} f={0:f} g={0:g} G={0:G} s={0!s} r={0!r}!\".format(r))\nprint(\"e={0:9.4e} f={0:9.4f} g={0:9.4g}!\".format(-r))\nprint(\"e={0:9.4e} f={0:9.4f} g={0:9.4g}!\".format(r))\nprint(\"e={0:-9.4e} f={0:-9.4f} g={0:-9.4g}!\".format(r))\nprint(\"e={0:09.4e} f={0:09.4f} g={0:09.4g}!\".format(-r))\nprint(\"e={0:09.4e} f={0:09.4f} g={0:09.4g}!\".format(r))\nprint(\"e={0:-09.4e} f={0:-09.4f} g={0:-09.4g}!\".format(r))","language":"python"},{"title":"Formatted numeric output","code":"r = 7.125\nprintf \" %9.3f\\n\",   r          #=>      7.125\nprintf \" %09.3f\\n\",  r          #=>  00007.125\nprintf \" %09.3f\\n\", -r          #=>  -0007.125\nprintf \" %+09.3f\\n\", r          #=>  +0007.125\nputs \" %9.3f\"  %  r             #=>      7.125\nputs \" %09.3f\" %  r             #=>  00007.125\nputs \" %09.3f\" % -r             #=>  -0007.125\nputs \" %+09.3f\" % r             #=>  +0007.125","language":"ruby"},{"title":"Command-line arguments","code":"#include <stdlib.h>\n#include <stdio.h>\n\nint main(int argc, char* argv[])\n{\n  int i;\n  (void) printf(\"This program is named %s.\\n\", argv[0]);\n  for (i = 1; i < argc; ++i)\n    (void) printf(\"the argument #%d is %s\\n\", i, argv[i]);\n  return EXIT_SUCCESS;\n}","language":"c"},{"title":"Command-line arguments","code":"#include <iostream>\n\nint main(int argc, char* argv[])\n{\n  std::cout << \"This program is named \" << argv[0] << std::endl;\n  std::cout << \"There are \" << argc-1 << \" arguments given.\" << std::endl;\n  for (int i = 1; i < argc; ++i)\n    std::cout << \"the argument #\" << i << \" is \" << argv[i] << std::endl;\n\n  return 0;\n}","language":"cpp"},{"title":"Command-line arguments","code":"var objArgs = WScript.Arguments;\nfor (var i = 0; i < objArgs.length; i++)\n   WScript.Echo(objArgs.Item(i));","language":"javascript"},{"title":"Command-line arguments","code":"import System;\nvar argv:String[] = Environment.GetCommandLineArgs();\nfor (var i in argv)\n  print(argv[i]);","language":"javascript"},{"title":"Command-line arguments","code":"print( \"Program name:\", arg[0] )\n\nprint \"Arguments:\"\nfor i = 1, #arg do\n    print( i,\" \", arg[i] )\nend","language":"lua"},{"title":"Command-line arguments","code":"import sys\nprogram_name = sys.argv[0]\narguments = sys.argv[1:]\ncount = len(arguments)","language":"python"},{"title":"Simple windowed application","code":"#include <QApplication>\n#include \"clickcounter.h\"\n\nint main( int argc , char *argv[ ] ) {\n   QApplication app( argc , argv ) ;\n   Counter counter ;\n   counter.show( ) ;\n   return app.exec( ) ;\n}","language":"Cpp"},{"title":"Simple windowed application","code":"require 'tk'\nstr = TkVariable.new(\"no clicks yet\")\ncount = 0\nroot = TkRoot.new\nTkLabel.new(root, \"textvariable\" => str).pack\nTkButton.new(root) do\n  text \"click me\"\n  command {str.value = count += 1}\n  pack\nend\nTk.mainloop","language":"ruby"},{"title":"Simple windowed application","code":"Shoes.app do\n  stack do\n    @count = 0\n    @label = para \"no clicks yet\"\n    button \"click me\" do \n      @count += 1\n      @label.text = \"click: #@count\"\n    end\n  end\nend","language":"ruby"},{"title":"Copy a string","code":"#include <iostream>\n#include <string>\n\nint main( ) {\n   std::string original (\"This is the original\");\n   std::string my_copy = original;\n   std::cout << \"This is the copy: \" << my_copy << std::endl;\n   original = \"Now we change the original! \";\n   std::cout << \"my_copy still is \" << my_copy << std::endl;\n}","language":"cpp"},{"title":"Copy a string","code":"String src = \"Hello\";\nString newAlias = src;\nString strCopy = new String(src);\n\n//\"newAlias == src\" is true\n//\"strCopy == src\" is false\n//\"strCopy.equals(src)\" is true","language":"java"},{"title":"Copy a string","code":"var a = \"Hello\";\nvar b = a; // Same as saying window.b = window.a\n\nb = \"Goodbye\" // b contains a copy of a's value and a will still return \"Hello\"","language":"javascript"},{"title":"Copy a string","code":"string a = \"A string\";\nstring b = a;\na =~ s/$/\\./; \nputs(a);\nputs(b);","language":"C"},{"title":"Copy a string","code":"a = \"string\"\nb = a\nprint(a == b) -->true\nprint(b) -->string","language":"lua"},{"title":"Copy a string","code":"original = \"hello\"\nreference = original          # copies reference\ncopy1 = original.dup          # instance of original.class\ncopy2 = String.new(original)  # instance of String\n\noriginal << \" world!\"         # append\np reference                   #=> \"hello world!\"\np copy1                       #=> \"hello\"\np copy2                       #=> \"hello\"","language":"ruby"},{"title":"Copy a string","code":"original = \"hello\".freeze     # prevents further modifications\ncopy1 = original.dup          # copies contents (without status)\ncopy2 = original.clone        # copies contents (with status)\np copy1.frozen?               #=> false\np copy1 << \" world!\"          #=> \"hello world!\"\np copy2.frozen?               #=> true\np copy2 << \" world!\"          #=> can't modify frozen String (RuntimeError)","language":"ruby"},{"title":"Copy a string","code":"var original = \"hello\";               # new String object\nvar reference = original;             # points at the original object\nvar copy1 = String.new(original);     # creates a new String object\nvar copy2 = original+'';              # ==//==","language":"ruby"},{"title":"Increment a numerical string","code":"#include <string>\n\nstd::string s = \"12345\";\ns = std::to_string(1+std::stoi(s));","language":"cpp"},{"title":"Increment a numerical string","code":"// Boost\n#include <cstdlib>\n#include <string>\n#include <boost/lexical_cast.hpp>\n\n// inside a function or method...\nstd::string s = \"12345\";\nint i = boost::lexical_cast<int>(s) + 1;\ns = boost::lexical_cast<std::string>(i);","language":"cpp"},{"title":"Increment a numerical string","code":"// Qt\nQString num1 = \"12345\";\nQString num2 = QString(\"%1\").arg(v1.toInt()+1);","language":"cpp"},{"title":"Increment a numerical string","code":"// MFC\nCString s = \"12345\";\nint i = _ttoi(s) + 1;\nint i = _tcstoul(s, NULL, 10) + 1; \ns.Format(\"%d\", i);","language":"cpp"},{"title":"Increment a numerical string","code":"let s = '9999';\nlet splusplus = (+s+1)+\"\"\n\nconsole.log([splusplus, typeof splusplus]) // 10000,string","language":"javascript"},{"title":"Enumerations","code":"enum fruits { apple, banana, cherry };\n\nenum fruits { apple = 0, banana = 1, cherry = 2 };","language":"c"},{"title":"Enumerations","code":"typedef enum { apple, banana, cherry } fruits;\n\ntypedef enum { apple = 0, banana = 1, cherry = 2 } fruits;","language":"c"},{"title":"Enumerations","code":"enum fruits { apple, banana, cherry };\n\nenum fruits { apple = 0, banana = 1, cherry = 2 };","language":"cpp"},{"title":"Enumerations","code":"enum class fruits { apple, banana, cherry };\n\nenum class fruits { apple = 0, banana = 1, cherry = 2 };","language":"cpp"},{"title":"Enumerations","code":"enum fruits { apple, banana, cherry }\n\nenum fruits { apple = 0, banana = 1, cherry = 2 }\n\nenum fruits : int { apple = 0, banana = 1, cherry = 2 }\n\n[FlagsAttribute]\nenum Colors { Red = 1, Green = 2, Blue = 4, Yellow = 8 }","language":"csharp"},{"title":"Enumerations","code":"// enum fruits { apple, banana, cherry }\n\nvar f = \"apple\";\n\nif(f == \"apple\"){\n    f = \"banana\";\n}","language":"javascript"},{"title":"Enumerations","code":"module Fruits\n  APPLE  = 0\n  BANANA = 1\n  CHERRY = 2\nend\n\n# It is possible to use a symbol if the value is unrelated.\n\nFRUITS = [:apple, :banana, :cherry]\nval = :banana\nFRUITS.include?(val)      #=> true","language":"ruby"},{"title":"Enumerations","code":"enum {\n    Apple=3,\n    Banana,         # gets the value 4\n    Cherry=\"a\",\n    Orange,         # gets the value \"b\"\n};","language":"ruby"},{"title":"Polymorphism","code":"pp(Point.new);              # => Point at 0,0\nvar p = Point(1, 2);        # create a point\npp(p);                      # => Point at 1,2\nsay p.x;                    # => 1\np.y += 1;                   # add one to y\npp(p);                      # => Point at 1,3\n\nvar c = Circle(4,5,6);      # create a circle\nvar d = c.clone;            # make a clone of it\nd.r = 7.5;                  # and change the radius to 7.5\npp(c);                      # => Circle at 4,5 with radius 6\npp(d);                      # => Circle at 4,5 with radius 7.5","language":"ruby"},{"title":"Variable size/Set","code":"#include <stdint.h>\n\nint_least32_t foo;","language":"c"},{"title":"Variable size/Set","code":"union u {\n  int i;\n  long l;\n  double d;\n  /* ... */\n};","language":"c"},{"title":"Variable size/Set","code":"union must_be_at_least_512_bytes {\n  int interesting_datum;\n  char padding[512];\n};","language":"c"},{"title":"Variable size/Set","code":"#include <boost/cstdint.hpp>\n\nboost::int_least32_t foo;","language":"Cpp"},{"title":"Address of a variable","code":"var x = 12\nvar pointer = ptr(x) # get pointer\nprint pointer        # print address\npointer.set 0xFFFE   # set the address","language":"python"},{"title":"Address of a variable","code":"unsafe\n{\n  int i = 5;\n  void* address_of_i = &i;\n}","language":"csharp"},{"title":"Address of a variable","code":"static union\n{\n  int i;\n  int j;\n};","language":"cpp"},{"title":"Address of a variable","code":">foo = Object.new  # => #<Object:0x10ae32000>\n>id = foo.object_id  # => 2238812160\n>\"%x\" % (id << 1)  # => \"10ae32000\"","language":"ruby"},{"title":"Variable size/Get","code":"class Program\n{\n    static void Main(string[] args)\n    {\n        int i = sizeof(int);\n        Console.WriteLine(i);\n        Console.ReadLine();\n    }       \n}","language":"csharp"},{"title":"Variable size/Get","code":"#include <climits>\n#include <cstdlib>\nstd::size_t intbits = CHAR_BITS*sizeof(int);","language":"cpp"},{"title":"Variable size/Get","code":"#include <cstdlib>\nint a = 1;\nstd::size_t a_size = sizeof a;","language":"cpp"},{"title":"Variable size/Get","code":"require 'objspace'\n\np ObjectSpace.memsize_of(\"a\"*23)    #=> 0\np ObjectSpace.memsize_of(\"a\"*24)    #=> 25\np ObjectSpace.memsize_of(\"a\"*1000) #=> 1001","language":"ruby"},{"title":"Variable size/Get","code":"struct foo {\n  uint32_t x : 17;\n  uint8_t y : 3;\n  char z[16];\n};","language":"c"},{"title":"Memory layout of a data structure","code":"struct RS232_data\n{\n  unsigned carrier_detect        : 1;\n  unsigned received_data         : 1;\n  unsigned transmitted_data      : 1;\n  unsigned data_terminal_ready   : 1;\n  unsigned signal_ground         : 1;\n  unsigned data_set_ready        : 1;\n  unsigned request_to_send       : 1;\n  unsigned clear_to_send         : 1;\n  unsigned ring_indicator        : 1;\n};","language":"c"},{"title":"Define a primitive data type","code":"type\n  MyInt = range[0..10]\n\nvar x: MyInt = 5\n\nx = x + 6  # Runtime error: value out of range: 11\n\nx = 12 # Compile-time error: conversion from int literal(12) to MyInt is invalid","language":"python"},{"title":"Introspection","code":"try:\n    print abs(bloop)\nexcept (NameError, TypeError):\n    print \"Something's missing\"","language":"python"},{"title":"Introspection","code":"def sum_of_global_int_vars():\n    variables = vars(__builtins__).copy()\n    variables.update(globals())\n    print sum(v for v in variables.itervalues() if type(v) == int)\n\nsum_of_global_int_vars()","language":"python"},{"title":"Singly-linked list/Element insertion","code":"void insert_append (link *anchor, link *newlink) {\n  newlink->next = anchor->next;\n  anchor->next = newlink;\n}","language":"c"},{"title":"Singly-linked list/Element insertion","code":"link *a, *b, *c;\na = malloc(sizeof(link));\nb = malloc(sizeof(link));\nc = malloc(sizeof(link));\na->data = 1;\nb->data = 2;\nc->data = 3;","language":"c"},{"title":"Singly-linked list/Element insertion","code":"free (a);\n free (b);\n free (c);","language":"c"},{"title":"Singly-linked list/Element insertion","code":"template<typename T> void insert_after(link<T>* list_node, link<T>* new_node)\n{\n  new_node->next = list_node->next;\n  list_node->next = new_node;\n};","language":"cpp"},{"title":"Singly-linked list/Element insertion","code":"while (a)\n{\n  link<int>* tmp = a;\n  a = a->next;\n  delete tmp;\n}","language":"cpp"},{"title":"Singly-linked list/Element insertion","code":"static void InsertAfter(Link prev, int i)\n{\n    prev.next = new Link() { item = i, next = prev.next };\n}","language":"csharp"},{"title":"Singly-linked list/Element insertion","code":"static void Main()\n{\n    //Create A(5)->B(7)\n    var A = new Link() { item = 5 };\n    InsertAfter(A, 7);\n    //Insert C between A and B\n    InsertAfter(A, 15);\n}","language":"csharp"},{"title":"Singly-linked list/Element insertion","code":"void insertNode(Node<T> anchor_node, Node<T> new_node)\n{\n    new_node.next = anchor_node.next;\n    anchor_node.next = new_node;\n}","language":"Java"},{"title":"Singly-linked list/Element insertion","code":"def chain_insert(lst, at, item):\n    while lst is not None:\n        if lst[0] == at:\n            lst[1] = [item, lst[1]]\n            return\n        else:\n            lst = lst[1]\n    raise ValueError(str(at) + \" not found\")\n\nchain = ['A', ['B', None]]\nchain_insert(chain, 'A', 'C')\nprint chain","language":"python"},{"title":"Integer comparison","code":"let a = scan('Enter value of a: ')\nlet b = scan('Enter value of b: ')\n \nif a < b:\n    print 'a is less than b'\nelif a > b:\n    print 'a is greater than b'\nelif a == b:\n    print 'a is equal to b'","language":"python"},{"title":"Integer comparison","code":"print('Enter the first number: ')\na = tonumber(io.stdin:read())\nprint('Enter the second number: ')\nb = tonumber(io.stdin:read())\n\nif a < b then print(a .. \" is less than \" .. b) end\nif a > b then print(a .. \" is greater than \" .. b) end\nif a == b then print(a .. \" is equal to \" .. b) end","language":"lua"},{"title":"Integer comparison","code":"#!/usr/bin/env python\na = input('Enter value of a: ')\nb = input('Enter value of b: ')\n\nif a < b:\n    print 'a is less than b'\nelif a > b:\n    print 'a is greater than b'\nelif a == b:\n    print 'a is equal to b'","language":"Python"},{"title":"Integer comparison","code":"a = (print \"enter a value for a: \"; gets).to_i\nb = (print \"enter a value for b: \"; gets).to_i\n\nputs \"#{a} is less than #{b}\" if a < b\nputs \"#{a} is greater than #{b}\" if a > b\nputs \"#{a} is equal to #{b}\" if a == b","language":"ruby"},{"title":"Integer comparison","code":"a = (print \"enter a value for a: \"; gets).to_i\nb = (print \"enter a value for b: \"; gets).to_i\n\ncase a <=> b\nwhen -1; puts \"#{a} is less than #{b}\"\nwhen  0; puts \"#{a} is equal to #{b}\"\nwhen +1; puts \"#{a} is greater than #{b}\"\nend","language":"ruby"},{"title":"Integer comparison","code":"var a = read(\"a: \", Number);\nvar b = read(\"b: \", Number);\n\nif (a < b) {\n    say 'Lower';\n}\nelsif (a == b) {\n    say 'Equal';\n}\nelsif (a > b) {\n    say 'Greater';\n}","language":"ruby"},{"title":"Random numbers","code":"double[] list = new double[1000];\ndouble mean = 1.0, std = 0.5;\nRandom rng = new Random();\nfor(int i = 0;i<list.length;i++) {\n  list[i] = mean + std * rng.nextGaussian();\n}","language":"java"},{"title":"Check that file exists","code":"using System.IO;\n\nConsole.WriteLine(File.Exists(\"input.txt\"));\nConsole.WriteLine(File.Exists(\"/input.txt\"));\nConsole.WriteLine(Directory.Exists(\"docs\"));\nConsole.WriteLine(Directory.Exists(\"/docs\"));","language":"csharp"},{"title":"Check that file exists","code":"var fso = new ActiveXObject(\"Scripting.FileSystemObject\");\n\nfso.FileExists('input.txt');\nfso.FileExists('c:/input.txt');\nfso.FolderExists('docs');\nfso.FolderExists('c:/docs');","language":"javascript"},{"title":"Check that file exists","code":"if (exists(\"input.txt\")) {\n    puts(\"The file \\\"input.txt\\\" exist\");   \n}\nif (exists(\"/input.txt\")) {\n    puts(\"The file \\\"/input.txt\\\" exist\");  \n}\nif (exists(\"docs\")) {\n    puts(\"The file \\\"docs\\\" exist\");    \n}\nif (exists(\"/docs\")) {\n    puts(\"The file \\\"/docs\\\" exist\");   \n}","language":"C"},{"title":"Check that file exists","code":"function output( s, b )\n    if b then\n        print ( s, \" does not exist.\" )\n    else\n        print ( s, \" does exist.\" )\n    end    \nend\n\noutput( \"input.txt\",  io.open( \"input.txt\", \"r\" ) == nil )\noutput( \"/input.txt\", io.open( \"/input.txt\", \"r\" ) == nil )\noutput( \"docs\",  io.open( \"docs\", \"r\" ) == nil )\noutput( \"/docs\", io.open( \"/docs\", \"r\" ) == nil )","language":"lua"},{"title":"Check that file exists","code":"require \"lfs\"\nfor i, path in ipairs({\"input.txt\", \"/input.txt\", \"docs\", \"/docs\"}) do\n    local mode = lfs.attributes(path, \"mode\")\n    if mode then\n        print(path .. \" exists and is a \" .. mode .. \".\")\n    else\n        print(path .. \" does not exist.\")\n    end\nend","language":"lua"},{"title":"Check that file exists","code":"import os\n\nos.path.isfile(\"input.txt\")\nos.path.isfile(\"/input.txt\")\nos.path.isdir(\"docs\")\nos.path.isdir(\"/docs\")","language":"python"},{"title":"Check that file exists","code":"File.file?(\"input.txt\")\nFile.file?(\"/input.txt\")\nFile.directory?(\"docs\")\nFile.directory?(\"/docs\")","language":"ruby"},{"title":"Check that file exists","code":"[\"input.txt\", \"/input.txt\"].each { |f|\n  printf \"%s is a regular file? %s\\n\", f, File.file?(f) }\n[\"docs\", \"/docs\"].each { |d|\n  printf \"%s is a directory? %s\\n\", d, File.directory?(d) }","language":"ruby"},{"title":"Check that file exists","code":"# Here\nsay (Dir.cwd  + %f'input.txt' -> is_file);\nsay (Dir.cwd  + %d'docs'      -> is_dir);\n\n# Root\nsay (Dir.root + %f'input.txt' -> is_file);\nsay (Dir.root + %d'docs'      -> is_dir);","language":"ruby"},{"title":"Create a file","code":"#include <stdio.h>\n\nint main() {\n  FILE *fh = fopen(\"output.txt\", \"w\");\n  fclose(fh);\n\n  return 0;\n}","language":"c"},{"title":"Create a file","code":"using System;\nusing System.IO;\n\nclass Program {\n    static void Main(string[] args) {\n        File.Create(\"output.txt\");\n        File.Create(@\"\\output.txt\");\n\n        Directory.CreateDirectory(\"docs\");\n        Directory.CreateDirectory(@\"\\docs\");\n    }\n}","language":"csharp"},{"title":"Create a file","code":"require \"lfs\"\nlfs.mkdir(\"docs\")\nlfs.mkdir(\"/docs\")","language":"lua"},{"title":"Create a file","code":"from __future__ import with_statement\nimport os\ndef create(directory):\n    with open(os.path.join(directory, \"output.txt\"), \"w\"):\n        pass\n    os.mkdir(os.path.join(directory, \"docs\"))\n   \ncreate(\".\") # current directory\ncreate(\"/\") # root directory","language":"python"},{"title":"Create a file","code":"# Here\n%f'output.txt' -> create;\n%d'docs'       -> create;\n\n# Root dir\nDir.root + %f'output.txt' -> create;\nDir.root + %d'docs'       -> create;","language":"ruby"},{"title":"File size","code":"using System;\nusing System.IO;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(new FileInfo(\"/input.txt\").Length);\n        Console.WriteLine(new FileInfo(\"input.txt\").Length);\n    }\n}","language":"csharp"},{"title":"File size","code":"var fso = new ActiveXObject(\"Scripting.FileSystemObject\");\nfso.GetFile('input.txt').Size;\nfso.GetFile('c:/input.txt').Size;","language":"javascript"},{"title":"File size","code":"function GetFileSize( filename )\n    local fp = io.open( filename )\n    if fp == nil then \n         return nil \n    end\n    local filesize = fp:seek( \"end\" )\n    fp:close()\n    return filesize\nend","language":"Lua"},{"title":"File size","code":"import os\n\nsize = os.path.getsize('input.txt')\nsize = os.path.getsize('/input.txt')","language":"python"},{"title":"Delete a file","code":"#include <stdio.h>\n\nint main() {\n  remove(\"input.txt\");\n  remove(\"/input.txt\");\n  remove(\"docs\");\n  remove(\"/docs\");\n  return 0;\n}","language":"c"},{"title":"Delete a file","code":"#include <unistd.h>\n\nint main() {\n  unlink(\"input.txt\");\n  unlink(\"/input.txt\");\n  rmdir(\"docs\");\n  rmdir(\"/docs\");\n  return 0;\n}","language":"c"},{"title":"Delete a file","code":"#include <cstdio>\n#include <direct.h>\n\nint main() {\n        remove( \"input.txt\" );\n        remove( \"/input.txt\" );\n        _rmdir( \"docs\" );\n        _rmdir( \"/docs\" );\n\n        return 0;\n}","language":"cpp"},{"title":"Delete a file","code":"var fso = new ActiveXObject(\"Scripting.FileSystemObject\");\n\nfso.DeleteFile('input.txt');\nfso.DeleteFile('c:/input.txt');\n\nfso.DeleteFolder('docs');\nfso.DeleteFolder('c:/docs');","language":"javascript"},{"title":"Delete a file","code":"var fso = new ActiveXObject(\"Scripting.FileSystemObject\");\nvar f;\nf = fso.GetFile('input.txt');\nf.Delete();\nf = fso.GetFile('c:/input.txt');\nf.Delete();\nf = fso.GetFolder('docs');\nf.Delete();\nf = fso.GetFolder('c:/docs');\nf.Delete();","language":"javascript"},{"title":"Delete a file","code":"const fs = require('fs');\nfs.unlink('myfile.txt', ()=>{\n  console.log(\"Done!\");\n})","language":"javascript"},{"title":"Delete a file","code":"os.remove(\"input.txt\")\nos.remove(\"/input.txt\")\nos.remove(\"docs\")\nos.remove(\"/docs\")","language":"lua"},{"title":"Delete a file","code":"import os\n# current directory\nos.remove(\"output.txt\")\nos.rmdir(\"docs\")\n# root directory\nos.remove(\"/output.txt\")\nos.rmdir(\"/docs\")","language":"python"},{"title":"Delete a file","code":"File.delete(\"output.txt\", \"/output.txt\")\nDir.delete(\"docs\")\nDir.delete(\"/docs\")","language":"ruby"},{"title":"Delete a file","code":"# here\n%f'input.txt' -> delete;\n%d'docs'      -> delete;\n\n# root dir\nDir.root + %f'input.txt' -> delete;\nDir.root + %d'docs'      -> delete;","language":"ruby"},{"title":"Rename a file","code":"#include <stdio.h>\n\nint main()\n{\n  rename(\"input.txt\", \"output.txt\");\n  rename(\"docs\", \"mydocs\");\n  rename(\"/input.txt\", \"/output.txt\");\n  rename(\"/docs\", \"/mydocs\");\n  return 0;\n}","language":"c"},{"title":"Rename a file","code":"#include <cstdio>\n\nint main()\n{\n    std::rename(\"input.txt\", \"output.txt\");\n    std::rename(\"docs\", \"mydocs\");\n    std::rename(\"/input.txt\", \"/output.txt\");\n    std::rename(\"/docs\", \"/mydocs\");\n    return 0;\n}","language":"cpp"},{"title":"Rename a file","code":"using System;\nusing System.IO;\n\nclass Program {\n    static void Main(string[] args) {\n        File.Move(\"input.txt\",\"output.txt\");\n        File.Move(@\"\\input.txt\",@\"\\output.txt\");\n\n        Directory.Move(\"docs\",\"mydocs\");\n        Directory.Move(@\"\\docs\",@\"\\mydocs\");\n    }\n}","language":"csharp"},{"title":"Rename a file","code":"var fso = new ActiveXObject(\"Scripting.FileSystemObject\");\nfso.MoveFile('input.txt', 'output.txt');\nfso.MoveFile('c:/input.txt', 'c:/output.txt');\nfso.MoveFolder('docs', 'mydocs');\nfso.MoveFolder('c:/docs', 'c:/mydocs');","language":"javascript"},{"title":"Rename a file","code":"os.rename( \"input.txt\", \"output.txt\" )\nos.rename( \"/input.txt\", \"/output.txt\" )\nos.rename( \"docs\", \"mydocs\" )\nos.rename( \"/docs\", \"/mydocs\" )","language":"lua"},{"title":"Rename a file","code":"import os\n\nos.rename(\"input.txt\", \"output.txt\")\nos.rename(\"docs\", \"mydocs\")\n\nos.rename(os.sep + \"input.txt\", os.sep + \"output.txt\")\nos.rename(os.sep + \"docs\", os.sep + \"mydocs\")","language":"python"},{"title":"Rename a file","code":"import shutil\n\nshutil.move(\"input.txt\", \"output.txt\")\nshutil.move(\"docs\", \"mydocs\")\n\nshutil.move(\"/input.txt\", \"/output.txt\")\nshutil.move(\"/docs\", \"/mydocs\")","language":"python"},{"title":"Rename a file","code":"File.rename('input.txt', 'output.txt')\nFile.rename('/input.txt', '/output.txt')\nFile.rename('docs', 'mydocs')\nFile.rename('/docs', '/mydocs')","language":"ruby"},{"title":"Rename a file","code":"# Here\nFile.rename('input.txt', 'output.txt');\nFile.rename('docs',      'mydocs');\n\n# Root dir\nFile.rename(Dir.root + %f'input.txt', Dir.root + %f'output.txt');\nFile.rename(Dir.root + %f'docs',      Dir.root + %f'mydocs');","language":"ruby"},{"title":"File modification time","code":"using System;\nusing System.IO;\n\nConsole.WriteLine(File.GetLastWriteTime(\"file.txt\"));\nFile.SetLastWriteTime(\"file.txt\", DateTime.Now);","language":"csharp"},{"title":"File modification time","code":"var fso = new ActiveXObject(\"Scripting.FileSystemObject\");\nvar f = fso.GetFile('input.txt');\nvar mtime = f.DateLastModified;","language":"javascript"},{"title":"File modification time","code":"#Get modification time:\nmodtime = File.mtime('filename')\n\n#Set the access and modification times:\nFile.utime(actime, mtime, 'path')\n\n#Set just the modification time:\nFile.utime(File.atime('path'), mtime, 'path')\n\n#Set the access and modification times to the current time:\nFile.utime(nil, nil, 'path')","language":"ruby"},{"title":"File modification time","code":"var file = File.new(__FILE__);\nsay file.stat.mtime;            # seconds since the epoch\n\n# keep atime unchanged\n# set mtime to current time\nfile.utime(file.stat.atime, Time.now);","language":"ruby"},{"title":"Doubly-linked list/Element definition","code":"struct link \n{\n  struct link *next;\n  struct link *prev;\n  void  *data;\n  size_t type;\n};","language":"c"},{"title":"Doubly-linked list/Element definition","code":"template <typename T>\nstruct Node\n{\n    Node* next;\n    Node* prev;\n    T data;\n};","language":"cpp"},{"title":"Doubly-linked list/Element definition","code":"var node = Hash.new(\n     data => 'say what',\n     next => foo_node,\n     prev => bar_node,\n);\n\nnode{:next} = quux_node;  # mutable","language":"ruby"},{"title":"Arithmetic/Integer","code":"#include <iostream>\n\nint main()\n{\n  int a, b;\n  std::cin >> a >> b;\n  std::cout << \"a+b = \" << a+b << \"\\n\";\n  std::cout << \"a-b = \" << a-b << \"\\n\";\n  std::cout << \"a*b = \" << a*b << \"\\n\";\n  std::cout << \"a/b = \" << a/b << \", remainder \" << a%b << \"\\n\";\n  return 0;\n}","language":"cpp"},{"title":"Arithmetic/Integer","code":"local x = io.read()\nlocal y = io.read()\n\nprint (\"Sum: \"       , (x + y))\nprint (\"Difference: \", (x - y))\nprint (\"Product: \"   , (x * y))\nprint (\"Quotient: \"  , (x / y)) -- Does not truncate\nprint (\"Remainder: \" , (x % y)) -- Result has sign of right operand\nprint (\"Exponent: \"  , (x ^ y))","language":"lua"},{"title":"Arithmetic/Integer","code":"def arithmetic(x, y):\n    for op in \"+ - * // % **\".split():\n        expr = \"%(x)s %(op)s %(y)s\" % vars()\n        print(\"%s\\t=> %s\" % (expr, eval(expr)))\n\n\narithmetic(12, 8)\narithmetic(input(\"Number 1: \"), input(\"Number 2: \"))","language":"python"},{"title":"Arithmetic/Integer","code":"puts 'Enter x and y'\nx = gets.to_i  # to check errors, use x=Integer(gets)\ny = gets.to_i\n\nputs \"Sum: #{x+y}\",\n     \"Difference: #{x-y}\",\n     \"Product: #{x*y}\",\n     \"Quotient: #{x/y}\",       # truncates towards negative infinity\n     \"Quotient: #{x.fdiv(y)}\", # float\n     \"Remainder: #{x%y}\",      # same sign as second operand\n     \"Exponentiation: #{x**y}\"","language":"ruby"},{"title":"Arithmetic/Integer","code":"var a = Sys.scanln(\"First number: \").to_i;\nvar b = Sys.scanln(\"Second number: \").to_i;\n\n%w'+ - * // % ** ^ | & << >>'.each { |op|\n    \"#{a} #{op} #{b} = #{a.$op(b)}\".say;\n}","language":"ruby"},{"title":"Arithmetic/Integer","code":"a <- (read)\nb <- (read)\nprn \"sum: \" a+b\nprn \"difference: \" a-b\nprn \"product: \" a*b\nprn \"quotient: \" a/b\nprn \"integer quotient: \" (int a/b)\nprn \"remainder: \" a%b\nprn \"exponent: \" a^b","language":"python"},{"title":"Doubly-linked list/Element insertion","code":"void insert(link* anchor, link* newlink) {\n  newlink->next = anchor->next;\n  newlink->prev = anchor;\n  (newlink->next)->prev = newlink;\n  anchor->next = newlink;\n}","language":"c"},{"title":"Doubly-linked list/Element insertion","code":"link a, b, c;\na.next = &b;\na.prev = null;\na.data = 1;\nb.next = null;\nb.prev = &a;\nb.data = 3;\nc.data = 2;","language":"c"},{"title":"Doubly-linked list/Element insertion","code":"template <typename T>\nvoid insert_after(Node<T>* N, T&& data)\n{\n    auto node = new Node<T>{N, N->next, std::forward(data)};\n    if(N->next != nullptr)\n        N->next->prev = node;\n    N->next = node;\n}","language":"cpp"},{"title":"Doubly-linked list/Element insertion","code":"static void Main()\n{\n    //Create A(5)->B(7)\n    var A = new Link() { item = 5 };\n    InsertAfter(A, 7);\n    //Insert C(15) between A and B\n    InsertAfter(A, 15);\n}","language":"csharp"},{"title":"Doubly-linked list/Element insertion","code":"def insert(anchor, new):\n    new.next = anchor.next\n    new.prev = anchor\n    anchor.next.prev = new\n    anchor.next = new","language":"python"},{"title":"Date format","code":"Datetime dtNow = datetime.now();\nString strDt1 = dtNow.format('yyyy-MM-dd');\nString strDt2 = dtNow.format('EEEE, MMMM dd, yyyy');\nsystem.debug(strDt1); // \"2007-11-10\"\nsystem.debug(strDt2); //\"Sunday, November 10, 2007\"","language":"java"},{"title":"Date format","code":"import datetime\ntoday = datetime.date.today()\n# This one is built in:\nprint today.isoformat()\n# Or use a format string for full flexibility:\nprint today.strftime('%Y-%m-%d')","language":"python"},{"title":"Date format","code":"var time = Time.local;\nsay time.ctime;\nsay time.strftime(\"%Y-%m-%d\");\nsay time.strftime(\"%A, %B %d, %Y\");","language":"ruby"},{"title":"Sort an array of composite structures","code":"public static void sortByName(Pair[] pairs) {\n        Arrays.sort(pairs, (p1, p2) -> p1.name.compareTo(p2.name));\n    }","language":"java"},{"title":"Sort an array of composite structures","code":"public static void sortByName(Pair[] pairs) {\n        Arrays.sort(pairs, Comparator.comparing(p -> p.name));\n    }","language":"java"},{"title":"Sort an array of composite structures","code":"function sorting( a, b ) \n    return a[1] < b[1] \nend\n \ntab = { {\"C++\", 1979}, {\"Ada\", 1983}, {\"Ruby\", 1995}, {\"Eiffel\", 1985} }\n\ntable.sort( tab, sorting )\nfor _, v in ipairs( tab ) do \n    print( unpack(v) ) \nend","language":"lua"},{"title":"Sort an array of composite structures","code":"from operator import itemgetter\npeople = [(120, 'joe'), (31, 'foo'), (51, 'bar')]\npeople.sort(key=itemgetter(1))","language":"python"},{"title":"Sort an array of composite structures","code":"Person = Struct.new(:name,:value) do\n  def to_s; \"name:#{name}, value:#{value}\" end\nend\n\nlist = [Person.new(\"Joe\",3),\n        Person.new(\"Bill\",4),\n        Person.new(\"Alice\",20),\n        Person.new(\"Harry\",3)]\nputs list.sort_by{|x|x.name}\nputs\nputs list.sort_by(&:value)","language":"ruby"},{"title":"Sort an array of composite structures","code":"# Declare an array of pairs\nvar people = [['joe', 120], ['foo', 31], ['bar', 51]];\n\n# Sort the array in-place by name\npeople.sort! {|a,b| a[0] <=> b[0] };\n\n# Alternatively, we can use the `.sort_by{}` method\nvar sorted = people.sort_by { |item| item[0] };\n\n# Display the sorted array\nsay people;","language":"ruby"},{"title":"Distributed programming","code":"var net = require('net')\n\nvar server = net.createServer(function (c){\n  c.write('hello\\r\\n')\n  c.pipe(c) // echo messages back\n})\n\nserver.listen(3000, 'localhost')","language":"javascript"},{"title":"Distributed programming","code":"var net = require('net')\n\nconn = net.createConnection(3000, '192.168.1.x')\n\nconn.on('connect', function(){\n        console.log('connected')\n        conn.write('test')\n})\n\nconn.on('data', function(msg){\n        console.log(msg.toString())\n})","language":"javascript"},{"title":"Generic swap","code":"void swap(void *va, void *vb, size_t s)\n{\n  char t, *a = (char*)va, *b = (char*)vb;\n  while(s--)\n    t = a[s], a[s] = b[s], b[s] = t;\n}","language":"c"},{"title":"Generic swap","code":"template<typename T> void swap(T& left, T& right)\n{\n  T tmp(left);\n  left = right;\n  right = tmp;\n}","language":"cpp"},{"title":"Generic swap","code":"template<class T>\nvoid swap(T &lhs, T &rhs){\n  T tmp = std::move(lhs);\n  lhs = std::move(rhs);\n  rhs = std::move(tmp);\n}","language":"cpp"},{"title":"Generic swap","code":"static void Swap<T>(ref T a, ref T b)\n{\n    T temp = a;\n    a = b;\n    b = temp;\n}\n//Usage:\nint a = 1;\nint b = 2;\nSwap(ref a, ref b); //type is inferred.","language":"csharp"},{"title":"Generic swap","code":"int a = 1;\nint b = 2;\n(a, b) = (b, a); //Swapping","language":"csharp"},{"title":"Generic swap","code":"class Pair<T> {\n    T first;\n    T second;\n}\npublic static <T> void swap(Pair<T> p) {\n   T temp = p.first;\n   p.first = p.second;\n   p.second = temp;\n}","language":"java"},{"title":"Generic swap","code":"function swap(arr) {\n  var tmp = arr[0];\n  arr[0] = arr[1];\n  arr[1] = tmp;\n}","language":"javascript"},{"title":"Generic swap","code":"x, y = 3, 4\nprint(x, y)                --> 3 4\nx, y = y, x                -- swap\nprint(x, y)                --> 4 3","language":"lua"},{"title":"Generic swap","code":"def swap(a, b)\n    return b, a\nend","language":"ruby"},{"title":"Generic swap","code":"x = 42\ny = \"string\"\nx, y = swap x, y\nputs x  # prints string\nputs y  # prints 42","language":"ruby"},{"title":"Generic swap","code":"func swap(Ref a, Ref b) {\n    var tmp = *a;\n    *a = *b;\n    *b = tmp;\n}","language":"ruby"},{"title":"Generic swap","code":"func swap(Ref a, Ref b) {\n    (*a, *b) = (*b, *a);\n}","language":"ruby"},{"title":"Add a variable to a class instance at runtime","code":"e = {}       // generic object\ne.foo = 1\ne[\"bar\"] = 2    // name specified at runtime","language":"javascript"},{"title":"Add a variable to a class instance at runtime","code":"class empty(object):\n    pass\ne = empty()","language":"python"},{"title":"Add a variable to a class instance at runtime","code":"class Empty\nend\n\ne = Empty.new\nclass << e\n  attr_accessor :foo\nend\ne.foo = 1\nputs e.foo  # output: \"1\"\n\nf = Empty.new\nf.foo = 1   # raises NoMethodError","language":"ruby"},{"title":"Add a variable to a class instance at runtime","code":"yes_no = \"Yes\"\n\ndef yes_no.not\n  replace( self==\"Yes\" ? \"No\": \"Yes\")\nend\n\n#Demo:\np yes_no.not # => \"No\"\np yes_no.not # => \"Yes\"\np \"aaa\".not  # => undefined method `not' for \"aaa\":String (NoMethodError)","language":"ruby"},{"title":"Add a variable to a class instance at runtime","code":"class Empty{};\nvar e = Empty();    # create a new class instance\ne{:foo} = 42;       # add variable 'foo'\nsay e{:foo};        # print the value of 'foo'","language":"ruby"},{"title":"Function definition","code":"double multiply(double a, double b)\n{\n   return a * b;\n}","language":"c"},{"title":"Function definition","code":"static double multiply(double a, double b)\n{\n    return a * b;\n}","language":"csharp"},{"title":"Function definition","code":"inline double multiply(double a, double b)\n{\n   return a*b;\n}","language":"cpp"},{"title":"Function definition","code":"template<typename Number>\n  Number multiply(Number a, Number b)\n{\n   return a*b;\n}","language":"cpp"},{"title":"Function definition","code":"public class Math\n{\n     public static    int multiply(   int a,    int b) { return a*b; }\n     public static double multiply(double a, double b) { return a*b; }\n}","language":"java"},{"title":"Function definition","code":"function multiply(a, b) { \n  return a*b; \n}","language":"javascript"},{"title":"Function definition","code":"var multiply = function(a, b) {\n    return a * b;\n};","language":"javascript"},{"title":"Function definition","code":"var multiply = function multiply(a, b) {\n    return a * b;\n};","language":"javascript"},{"title":"Function definition","code":"var o = {\n  multiply: function(a, b) {\n    return a * b;\n  }\n};","language":"javascript"},{"title":"Function definition","code":"var o = {\n  get foo() {\n    return 1;\n  }, \n  set bar(value) {\n    // do things with value\n  }\n};","language":"javascript"},{"title":"Function definition","code":"var o = {\n  multiply(a, b) {\n    return a * b;\n  }\n};","language":"javascript"},{"title":"Function definition","code":"function * generator() {\n  yield 1;\n}","language":"javascript"},{"title":"Function definition","code":"function multiply( a, b )\n    return a * b\nend","language":"Lua"},{"title":"Function definition","code":"class Multiply:\n    def __init__(self):\n        pass\n    def __call__(self, a, b):\n        return a * b\n\nmultiply = Multiply()\nprint multiply(2, 4)    # prints 8","language":"python"},{"title":"Function definition","code":"def multiply(a, b)\n    a * b\nend","language":"ruby"},{"title":"Function definition","code":"func multiply(a, b) {\n    a * b;\n}","language":"ruby"},{"title":"Sorting algorithms/Quicksort","code":"using Sort;\n  using System;\n\n  class Program {\n    static void Main(String[] args) {\n      var entries = new Int32[] { 1, 3, 5, 7, 9, 8, 6, 4, 2 };\n      var sorter = new QuickSort<Int32>();\n      sorter.Sort(entries);\n      Console.WriteLine(String.Join(\" \", entries));\n    }\n  }","language":"csharp"},{"title":"Sorting algorithms/Quicksort","code":"def quick_sort(a : Array(Int32)) : Array(Int32)\n  return a if a.size <= 1\n  p = a[0]\n  lt, rt = a[1 .. -1].partition { |x| x < p }\n  return quick_sort(lt) + [p] + quick_sort(rt)\nend\n\na = [7, 6, 5, 9, 8, 4, 3, 1, 2, 0]\nputs quick_sort(a) # => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]","language":"ruby"},{"title":"Sorting algorithms/Quicksort","code":"Array.prototype.quick_sort = function () {\n    if (this.length < 2) { return this; }\n\n    var pivot = this[Math.round(this.length / 2)];\n\n    return this.filter(x => x <  pivot)\n               .quick_sort()\n               .concat(this.filter(x => x == pivot))\n               .concat(this.filter(x => x >  pivot).quick_sort());\n};","language":"javascript"},{"title":"Sorting algorithms/Quicksort","code":"def qsort(L):\n    return (qsort([y for y in L[1:] if y <  L[0]]) + \n            L[:1] + \n            qsort([y for y in L[1:] if y >= L[0]])) if len(L) > 1 else L","language":"python"},{"title":"Sorting algorithms/Quicksort","code":"def qsort(list):\n    if not list:\n        return []\n    else:\n        pivot = list[0]\n        less = [x for x in list     if x <  pivot]\n        more = [x for x in list[1:] if x >= pivot]\n        return qsort(less) + [pivot] + qsort(more)","language":"python"},{"title":"Sorting algorithms/Quicksort","code":"def qsort(array):\n    if len(array) < 2:\n        return array\n    head, *tail = array\n    less = qsort([i for i in tail if i < head])\n    more = qsort([i for i in tail if i >= head])\n    return less + [head] + more","language":"python"},{"title":"Sorting algorithms/Quicksort","code":"class Array\n  def quick_sort\n    return self if length <= 1\n    pivot = self[0]\n    less, greatereq = self[1..-1].partition { |x| x < pivot }\n    less.quick_sort + [pivot] + greatereq.quick_sort\n  end\nend","language":"ruby"},{"title":"Sorting algorithms/Quicksort","code":"class Array\n  def quick_sort\n    return self if length <= 1\n    pivot = sample\n    group = group_by{ |x| x <=> pivot }\n    group.default = []\n    group[-1].quick_sort + group[0] + group[1].quick_sort\n  end\nend","language":"ruby"},{"title":"Sorting algorithms/Quicksort","code":"func quicksort (a) {\n    a.len < 2 && return(a);\n    var p = a.pop_rand;          # to avoid the worst cases\n    __FUNC__(a.grep{ .< p}) + [p] + __FUNC__(a.grep{ .>= p});\n}","language":"ruby"},{"title":"Sorting algorithms/Quicksort","code":"def (qsort (pivot ... ns))\n  (+ (qsort+keep (fn(_) (_ < pivot)) ns)\n     list.pivot\n     (qsort+keep (fn(_) (_ > pivot)) ns))\n\ndef (qsort x) :case x=nil\n  nil","language":"python"},{"title":"Delegates","code":"package delegate;\n\n@FunctionalInterface\npublic interface Thingable {\n  public String thing();\n}","language":"java"},{"title":"Delegates","code":"package delegate;\n\npublic final class Delegate implements Thingable {\n  @Override\n  public String thing() {\n    return \"delegate implementation\";\n  }\n}","language":"java"},{"title":"Sieve of Eratosthenes","code":"var gen = new SoEIncClass(); \nfor (var i = 1; i < 1000000; i++, gen.next());\nvar prime = gen.next();\n \nif (typeof print == \"undefined\")\n    print = (typeof WScript != \"undefined\") ? WScript.Echo : alert;\nprint(prime);","language":"javascript"},{"title":"Sieve of Eratosthenes","code":"def eratosthenes2(n):\n    multiples = set()\n    for i in range(2, n+1):\n        if i not in multiples:\n            yield i\n            multiples.update(range(i*i, n+1, i))\n\nprint(list(eratosthenes2(100)))","language":"python"},{"title":"Sieve of Eratosthenes","code":"def primes_upto(limit):\n    is_prime = [False] * 2 + [True] * (limit - 1) \n    for n in range(int(limit**0.5 + 1.5)): # stop at ``sqrt(limit)``\n        if is_prime[n]:\n            for i in range(n*n, limit+1, n):\n                is_prime[i] = False\n    return [i for i, prime in enumerate(is_prime) if prime]","language":"python"},{"title":"Sieve of Eratosthenes","code":"def iprimes_upto(limit):\n    is_prime = [False] * 2 + [True] * (limit - 1)\n    for n in xrange(int(limit**0.5 + 1.5)): # stop at ``sqrt(limit)``\n        if is_prime[n]:\n            for i in range(n * n, limit + 1, n): # start at ``n`` squared\n                is_prime[i] = False\n    for i in xrange(limit + 1):\n        if is_prime[i]: yield i","language":"python"},{"title":"Sieve of Eratosthenes","code":"def primes2(limit):\n    if limit < 2: return []\n    if limit < 3: return [2]\n    lmtbf = (limit - 3) // 2\n    buf = [True] * (lmtbf + 1)\n    for i in range((int(limit ** 0.5) - 3) // 2 + 1):\n        if buf[i]:\n            p = i + i + 3\n            s = p * (i + 1) + i\n            buf[s::p] = [False] * ((lmtbf - s) // p + 1)\n    return [2] + [i + i + 3 for i, v in enumerate(buf) if v]","language":"python"},{"title":"Sieve of Eratosthenes","code":"def iprimes2(limit):\n    yield 2\n    if limit < 3: return\n    lmtbf = (limit - 3) // 2\n    buf = [True] * (lmtbf + 1)\n    for i in range((int(limit ** 0.5) - 3) // 2 + 1):\n        if buf[i]:\n            p = i + i + 3\n            s = p * (i + 1) + i\n            buf[s::p] = [False] * ((lmtbf - s) // p + 1)\n    for i in range(lmtbf + 1):\n        if buf[i]: yield (i + i + 3)","language":"python"},{"title":"Sieve of Eratosthenes","code":"import numpy\ndef primes_upto2(limit):\n    is_prime = numpy.ones(limit + 1, dtype=numpy.bool)\n    for n in xrange(2, int(limit**0.5 + 1.5)): \n        if is_prime[n]:\n            is_prime[n*n::n] = 0\n    return numpy.nonzero(is_prime)[0][2:]","language":"python"},{"title":"Sieve of Eratosthenes","code":"def eratosthenes(n)\n  nums = [nil, nil, *2..n]\n  (2..Math.sqrt(n)).each do |i|\n    (i**2..n).step(i){|m| nums[m] = nil}  if nums[i]\n  end\n  nums.compact\nend\n \np eratosthenes(100)","language":"ruby"},{"title":"Sieve of Eratosthenes","code":"require 'benchmark'\nBenchmark.bmbm {|x|\n  x.report(\"eratosthenes\") { eratosthenes(1_000_000) }\n  x.report(\"eratosthenes2\") { eratosthenes2(1_000_000) }\n}","language":"ruby"},{"title":"Sieve of Eratosthenes","code":"func sieve(limit) {\n    var composite = []\n    for n in (2 .. limit.isqrt) {\n        for i in (n**2 .. limit `by` n) {\n            composite[i] = true\n        }\n    }\n    2..limit -> grep{ !composite[_] }\n}\n\nsay sieve(100).join(\",\")","language":"ruby"},{"title":"Secure temporary file","code":"#include <stdlib.h>\n#include <stdio.h>\n\nint main(void)\n{\n  char filename[] = \"/tmp/prefixXXXXXX\";\n  int fd = mkstemp(filename);\n  puts(filename);\n  /* do stuff with file descriptor \"fd\" */\n  close(fd);\n  return 0;\n}","language":"c"},{"title":"Secure temporary file","code":"using System;\nusing System.IO;\n\nConsole.WriteLine(Path.GetTempFileName());","language":"csharp"},{"title":"Secure temporary file","code":"fp = io.tmpfile()\n\n-- do some file operations\n\nfp:close()","language":"lua"},{"title":"Secure temporary file","code":"fd, path = tempfile.mkstemp()\ntry:\n    # use the path or the file descriptor\nfinally:\n    os.close(fd)","language":"python"},{"title":"Secure temporary file","code":"irb(main):001:0> require 'tempfile'\n=> true\nirb(main):002:0> f = Tempfile.new('foo')\n=> #<File:/tmp/foo20081226-307-10p746n-0>\nirb(main):003:0> f.path\n=> \"/tmp/foo20081226-307-10p746n-0\"\nirb(main):004:0> f.close\n=> nil\nirb(main):005:0> f.unlink\n=> #<Tempfile: (closed)>","language":"ruby"},{"title":"Secure temporary file","code":"var tmpfile = require('File::Temp');\nvar fh = tmpfile.new(UNLINK => 0);\nsay fh.filename;\nfh.print(\"Hello, World!\\n\");\nfh.close;","language":"ruby"},{"title":"Singly-linked list/Traversal","code":"struct link *first;\n// ...\nstruct link *iter;\nfor(iter = first; iter != NULL; iter = iter->next) {\n  // access data, e.g. with iter->data\n}","language":"c"},{"title":"Singly-linked list/Traversal","code":"#include <iostream>\n#include <forward_list>\n\nint main()\n{\n    std::forward_list<int> list{1, 2, 3, 4, 5};\n    for (int e : list)\n        std::cout << e << std::endl;\n}","language":"cpp"},{"title":"Singly-linked list/Traversal","code":"//current is the first Link in the list\nwhile(current != null){ \n    System.Console.WriteLine(current.item);\n    current = current.next;\n}","language":"csharp"},{"title":"Singly-linked list/Traversal","code":"LinkedList<Type> list = new LinkedList<Type>();\n\nfor(Type i: list){\n  //each element will be in variable \"i\"\n  System.out.println(i);\n}","language":"java"},{"title":"Singly-linked list/Traversal","code":"LinkedList.prototype.traverse = function(func) {\n    func(this);\n    if (this.next() != null)\n        this.next().traverse(func);\n}\n\nLinkedList.prototype.print = function() {\n    this.traverse( function(node) {print(node.value())} );\n}\n\nvar head = createLinkedListFromArray([10,20,30,40]);\nhead.print();","language":"javascript"},{"title":"Singly-linked list/Traversal","code":"var list = 'a':'b':'c':nil;\n#var list = ['a', ['b', ['c']]];\n#var list = Pair.new('a', Pair.new('b', Pair.new('c', nil)));\n\nfor (var l = list; l != nil; l = l[1]) {\n    say l[0];\n}","language":"ruby"},{"title":"List comprehensions","code":"n = 20\n \n# select Pythagorean triplets\nr = ((1..n).flat_map { |x|\n       (x..n).flat_map { |y|\n         (y..n).flat_map { |z|\n           [[x, y, z]].keep_if { x * x + y * y == z * z }}}})\n\np r # print the array _r_","language":"ruby"},{"title":"List comprehensions","code":"var n = 20\nsay gather {\n    for x in (1 .. n) {\n        for y in (x .. n) {\n           for z in (y .. n) {\n             take([x,y,z]) if (x*x + y*y == z*z)\n           }\n        }\n    }\n}","language":"ruby"},{"title":"Binary search","code":"import java.util.Arrays;\n\nint index = Arrays.binarySearch(array, thing);\nint index = Arrays.binarySearch(array, startIndex, endIndex, thing);\n\n// for objects, also optionally accepts an additional comparator argument:\nint index = Arrays.binarySearch(array, thing, comparator);\nint index = Arrays.binarySearch(array, startIndex, endIndex, thing, comparator);","language":"java"},{"title":"Binary search","code":"import java.util.Collections;\n\nint index = Collections.binarySearch(list, thing);\nint index = Collections.binarySearch(list, thing, comparator);","language":"java"},{"title":"Binary search","code":"function binarySearch (list, value)\n    local function search(low, high)\n        if low > high then return false end\n        local mid = math.floor((low+high)/2)\n        if list[mid] > value then return search(low,mid-1) end\n        if list[mid] < value then return search(mid+1,high) end\n        return mid\n    end\n    return search(1,#list)\nend","language":"lua"},{"title":"Binary search","code":"def binary_search(l, value):\n    low = 0\n    high = len(l)-1\n    while low <= high: \n        mid = (low+high)//2\n        if l[mid] > value: high = mid-1\n        elif l[mid] < value: low = mid+1\n        else: return mid\n    return -1","language":"python"},{"title":"Binary search","code":"def binary_search(l, value, low = 0, high = -1):\n    if not l: return -1\n    if(high == -1): high = len(l)-1\n    if low >= high:\n        if l[low] == value: return low\n        else: return -1\n    mid = (low+high)//2\n    if l[mid] > value: return binary_search(l, value, low, mid-1)\n    elif l[mid] < value: return binary_search(l, value, mid+1, high)\n    else: return mid","language":"python"},{"title":"Binary search","code":"index = bisect.bisect_left(list, item) # leftmost insertion point\nindex = bisect.bisect_right(list, item) # rightmost insertion point\nindex = bisect.bisect(list, item) # same as bisect_right\n\n# same as above but actually insert the item into the list at the given place:\nbisect.insort_left(list, item)\nbisect.insort_right(list, item)\nbisect.insort(list, item)","language":"python"},{"title":"Binary search","code":"def binary_search(l, value):\n    low = 0\n    high = len(l)-1\n    while low + 1 < high:\n        mid = (low+high)//2\n        if l[mid] > value:\n            high = mid\n        elif l[mid] < value:\n            low = mid\n        else:\n            return mid\n    return high if abs(l[high] - value) < abs(l[low] - value) else low","language":"python"},{"title":"Parametric polymorphism","code":"template<class T> \nclass tree\n{\n  T value;\n  tree *left;\n  tree *right;\npublic:\n  void replace_all (T new_value);\n};","language":"cpp"},{"title":"Parametric polymorphism","code":"template<class T>\nvoid tree<T>::replace_all (T new_value)\n{\n  value = new_value;\n  if (left != NULL) \n    left->replace_all (new_value);\n  if (right != NULL)\n    right->replace_all (new_value);\n}","language":"cpp"},{"title":"Parametric polymorphism","code":"namespace RosettaCode {\n    class Program {\n        static void Main(string[] args) {\n            BinaryTree<int> b = new BinaryTree<int>(6);\n            b.left = new BinaryTree<int>(5);\n            b.right = new BinaryTree<int>(7);\n            BinaryTree<double> b2 = b.Map(x => x * 10.0);\n        }\n    }\n}","language":"csharp"},{"title":"Sorting algorithms/Insertion sort","code":"using Sort;\n  using System;\n\n  class Program {\n    static void Main(String[] args) {\n      var entries = new Int32[] { 3, 9, 4, 6, 8, 1, 7, 2, 5 };\n      InsertionSort<Int32>.Sort(entries);\n      Console.WriteLine(String.Join(\" \", entries));\n    }\n  }","language":"csharp"},{"title":"Sorting algorithms/Insertion sort","code":"def insertion_sort(l):\n    for i in xrange(1, len(l)):\n        j = i-1 \n        key = l[i]\n        while (l[j] > key) and (j >= 0):\n           l[j+1] = l[j]\n           j -= 1\n        l[j+1] = key","language":"python"},{"title":"Sorting algorithms/Insertion sort","code":"import bisect\ndef insertion_sort_bin(seq):\n    for i in range(1, len(seq)):\n        bisect.insort(seq, seq.pop(i), 0, i)","language":"python"},{"title":"Special characters","code":"& | ^ ~ //bitwise AND, OR, XOR, and NOT\n>> << //bitwise arithmetic shift\n>>> //bitwise logical shift\n+ - * / = % //+ can be used for String concatenation)","language":"java"},{"title":"Special characters","code":"! //NOT\n&& || //short-circuit AND, OR\n^ & | //long-circuit XOR, AND, OR","language":"java"},{"title":"Special characters","code":"/*\n * c:\\unix\\home\\\n */","language":"java"},{"title":"Literals/String","code":"char lines[] = \"line 1\\n\"\n \"line 2\\n\"\n \"line 3\\n\";","language":"c"},{"title":"Literals/String","code":"char a = 'a';  // prints as: a\n  String b = \"abc\";  // prints as: abc\n  char doubleQuote = '\"';  // prints as: \"\n  char singleQuote = '\\'';  // prints as: '\n  String singleQuotes = \"''\";  // prints as: ''\n  String doubleQuotes = \"\\\"\\\"\";  // prints as: \"\"","language":"java"},{"title":"Literals/String","code":"'c' == \"c\" # character\n'text' == \"text\"\n' \" '\n\" ' \"\n'\\x20' == ' '\nu'unicode string'\nu'\\u05d0' # unicode literal","language":"python"},{"title":"Literals/String","code":"'single quotes with \\'embedded quote\\' and \\\\backslash'\n%q(not interpolating with (nested) parentheses\nand newline)","language":"ruby"},{"title":"Literals/String","code":"print <<HERE\nWith an unquoted delimiter, this interpolates:\na = #{a}\nHERE\nprint <<-INDENTED\n   This delimiter can have whitespace before it\n   INDENTED\nprint <<'NON_INTERPOLATING'\nThis will not interpolate: #{a}\nNON_INTERPOLATING","language":"ruby"},{"title":"Determine if only one instance is running","code":"mutex = CreateMutex( NULL, TRUE, \"MyApp\" );\nif ( GetLastError() == ERROR_ALREADY_EXISTS )\n{\n     // There's another instance running.  What do you do?\n}","language":"cpp"},{"title":"Determine if only one instance is running","code":"import __main__, os\n\ndef isOnlyInstance():\n    # Determine if there are more than the current instance of the application\n    # running at the current time.\n    return os.system(\"(( $(ps -ef | grep python | grep '[\" +\n                     __main__.__file__[0] + \"]\" + __main__.__file__[1:] +\n                     \"' | wc -l) > 1 ))\") != 0","language":"python"},{"title":"Determine if only one instance is running","code":"# For this to work, you need to explicitly\n# store the returned fh inside a variable.\nvar fh = File(__FILE__).open_r\n\n# Now call the flock() method on it\nfh.flock(File.LOCK_EX | File.LOCK_NB) ->\n    || die \"I'm already running!\"\n\n# Your code here...\nsay \"Running...\"\nSys.sleep(20)\nsay 'Done!'","language":"ruby"},{"title":"Logical operations","code":"boolean a = true;\nboolean b = false;\nSystem.Debug('a AND b: ' + (a && b));\nSystem.Debug('a OR b: ' + (a || b));\nSystem.Debug('NOT a: ' + (!a));\nSystem.Debug('a XOR b: ' + (a ^ b));","language":"Java"},{"title":"Logical operations","code":"void print_logic(int a, int b)\n{\n  printf(\"a and b is %d\\n\", a && b);\n  printf(\"a or b is %d\\n\", a || b);\n  printf(\"not a is %d\\n\", !a);\n}","language":"c"},{"title":"Logical operations","code":"public static void logic(boolean a, boolean b){\n  System.out.println(\"a AND b: \" + (a && b));\n  System.out.println(\"a OR b: \" + (a || b));\n  System.out.println(\"NOT a: \" + (!a));\n}","language":"java"},{"title":"Logical operations","code":"function logic(a,b) {\n  print(\"a AND b: \" + (a && b));\n  print(\"a OR b: \" + (a || b));\n  print(\"NOT a: \" + (!a));\n}","language":"javascript"},{"title":"Logical operations","code":"function logic(a,b)\n  return a and b, a or b, not a\nend","language":"lua"},{"title":"Logical operations","code":"def logic(a, b):\n        print 'a and b:', a and b\n        print 'a or b:' , a or b\n        print 'not a:'  , not a","language":"python"},{"title":"Logical operations","code":"def logic(a, b)\n  print 'a and b: ', a && b, \"\\n\"\n  print 'a or b: ' , a || b, \"\\n\"\n  print 'not a: '  , !a    , \"\\n\"\n  print 'a xor b: ' , a ^ b, \"\\n\"\nend","language":"ruby"},{"title":"Logical operations","code":"func logic(a, b) {\n    say (\"a and b: \", a && b);\n    say (\"a  or b: \", a || b);\n    say (\"a xor b: \", a ^ b);\n    say (\"  not a: \", !a);\n}\n\nlogic(false, true);","language":"ruby"},{"title":"Logical operations","code":"!logic:\n  (a? b?)\n    [\n    println(\"a and b: \" a and b)\n    println(\"a or b: \"  a or b)\n    println(\"not a: \"   not a)\n    println(\"a xor b: \" a xor b)\n    println(\"a nand b: \" a nand b)\n    println(\"a nor b: \" a nor b)\n    println(\"a not xor b: \" a nxor b)\n    ]","language":"javascript"},{"title":"Bitwise operations","code":"/* rotate x to the right by s bits */\nunsigned int rotr(unsigned int x, unsigned int s)\n{\n        return (x >> s) | (x << 32 - s);\n}","language":"C"},{"title":"Bitwise operations","code":"a <<= 3;\na = a << 3;\na *= 8; //2 * 2 * 2 = 8\na = a * 8;","language":"java"},{"title":"Bitwise operations","code":"function bitwise(a, b){\n   alert(\"a AND b: \" + (a & b));\n   alert(\"a OR b: \"+ (a | b));\n   alert(\"a XOR b: \"+ (a ^ b));\n   alert(\"NOT a: \" + ~a);\n   alert(\"a << b: \" + (a << b)); // left shift\n   alert(\"a >> b: \" + (a >> b)); // arithmetic right shift\n   alert(\"a >>> b: \" + (a >>> b)); // logical right shift\n}","language":"javascript"},{"title":"Bitwise operations","code":"def bitwise(a, b):\n        print 'a and b:', a & b\n        print 'a or b:', a | b\n        print 'a xor b:', a ^ b\n        print 'not a:', ~a\n        print 'a << b:', a << b # left shift\n        print 'a >> b:', a >> b # arithmetic right shift","language":"python"},{"title":"Bitwise operations","code":"# 8-bit bounded shift:\nx = x << n & 0xff\n# ditto for 16 bit:\nx = x << n & 0xffff\n# ... and 32-bit:\nx = x << n & 0xffffffff\n# ... and 64-bit:\nx = x << n & 0xffffffffffffffff","language":"python"},{"title":"Bitwise operations","code":"func bitwise(a, b) {\n   say ('a and b : ',  a & b)\n   say ('a or b  : ',  a | b)\n   say ('a xor b : ',  a ^ b)\n   say ('not a   : ',     ~a)\n   say ('a << b  : ', a << b)  # left shift\n   say ('a >> b  : ', a >> b)  # arithmetic right shift\n}\n \nbitwise(14,3)","language":"ruby"},{"title":"MD5","code":"require 'digest'\nDigest::MD5.hexdigest(\"The quick brown fox jumped over the lazy dog's back\")\n# => \"e38ca1d920c4b8b8d3946b2c72f01680\"","language":"ruby"},{"title":"MD5","code":"var md5 = require('Digest::MD5').new;\nmd5.add(\"The quick brown fox jumped over the lazy dog's back\");\nsay md5.hexdigest;","language":"ruby"},{"title":"Primality by trial division","code":"int is_prime(unsigned int n)\n{\n        unsigned int p;\n        if (!(n & 1) || n < 2 ) return n == 2;\n\n        /* comparing p*p <= n can overflow */\n        for (p = 3; p <= n/p; p += 2)\n                if (!(n % p)) return 0;\n        return 1;\n}","language":"c"},{"title":"Primality by trial division","code":"static bool isPrime(int n)\n        {\n            if (n <= 1) return false;\n            for (int i = 2; i * i <= n; i++)            \n                if (n % i == 0) return false;            \n            return true;\n        }","language":"csharp"},{"title":"Primality by trial division","code":"public static boolean prime(long a){\n   if(a == 2){\n      return true;\n   }else if(a <= 1 || a % 2 == 0){\n      return false;\n   }\n   long max = (long)Math.sqrt(a);\n   for(long n= 3; n <= max; n+= 2){\n      if(a % n == 0){ return false; }\n   }\n   return true;\n}","language":"java"},{"title":"Primality by trial division","code":"public static boolean prime(int n) {\n    return !new String(new char[n]).matches(\".?|(..+?)\\\\1+\");\n}","language":"java"},{"title":"Primality by trial division","code":"def prime2(a):\n    if a == 2: return True\n    if a < 2 or a % 2 == 0: return False\n    return not any(a % x == 0 for x in xrange(3, int(a**0.5) + 1, 2))","language":"python"},{"title":"Primality by trial division","code":"def prime(a)\n  if a == 2\n    true\n  elsif a <= 1 || a % 2 == 0\n    false\n  else\n    divisors = (3..Math.sqrt(a)).step(2)\n    divisors.none? { |d| a % d == 0 }\n  end\nend\np (1..50).select{|i| prime(i)}","language":"ruby"},{"title":"Primality by trial division","code":"require \"prime\"\ndef prime?(value, generator = Prime::Generator23.new)\n  return false if value < 2\n  for num in generator\n    q,r = value.divmod num\n    return true if q < num\n    return false if r == 0\n  end\nend\np (1..50).select{|i| prime?(i)}","language":"ruby"},{"title":"Primality by trial division","code":"def primes(limit)\n  (enclose = lambda { |primes|\n    primes.last.succ.upto(limit) do |trial_pri|\n      if primes.none? { |pri| (trial_pri % pri).zero? }\n        return enclose.call(primes << trial_pri)\n      end\n    end\n    primes\n  }).call([2])\nend\np primes(50)","language":"ruby"},{"title":"Primality by trial division","code":"def isprime(n)\n  '1'*n !~ /^1?$|^(11+?)\\1+$/\nend","language":"ruby"},{"title":"Primality by trial division","code":"func is_prime(a) {\n  given (a) {\n    when (2)                   { true  }\n    case (a <= 1 || a.is_even) { false }\n    default                    { 3 .. a.isqrt -> any { .divides(a) } -> not }\n  }\n}","language":"ruby"},{"title":"Primality by trial division","code":"func is_prime(n) {\n    return (n >= 2) if (n < 4)\n    return false if (n%%2 || n%%3)\n    for k in (5 .. n.isqrt -> by(6)) {\n        return false if (n%%k || n%%(k+2))\n    }\n    return true\n}","language":"ruby"},{"title":"Sockets","code":"socket = require \"socket\"\nhost, port = \"127.0.0.1\", 256\n\nsid = socket.udp()\nsid:sendto( \"hello socket world\", host, port )\nsid:close()","language":"lua"},{"title":"Sockets","code":"import socket\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsock.connect((\"localhost\", 256))\nsock.sendall(\"hello socket world\") \nsock.close()","language":"python"},{"title":"Sockets","code":"require 'socket'\nsock = TCPSocket.open(\"localhost\", 256)\nsock.write(\"hello socket world\")\nsock.close","language":"ruby"},{"title":"Sockets","code":"var host = Socket.gethostbyname('localhost');\nvar in = Socket.sockaddr_in(256, host);\nvar proto = Socket.getprotobyname('tcp');\n\nvar sock = Socket.open(Socket.AF_INET, Socket.SOCK_STREAM, proto);\nsock.connect(in);\nsock.send('hello socket world', 0, in);\nsock.close;","language":"ruby"},{"title":"Sum and product of an array","code":"/* using pointer arithmetic (because we can, I guess) */\nint arg[] = { 1,2,3,4,5 };\nint arg_length = sizeof(arg)/sizeof(arg[0]);\nint *end = arg+arg_length;\nint sum = 0, prod = 1;\nint *p;\n\nfor (p = arg; p!=end; ++p) {\n   sum += *p;\n   prod *= *p;\n}","language":"c"},{"title":"Sum and product of an array","code":"int sum = 0, prod = 1;\nint[] arg = { 1, 2, 3, 4, 5 };\nforeach (int value in arg) {\n  sum += value;\n  prod *= value;\n}","language":"csharp"},{"title":"Sum and product of an array","code":"#include <numeric>\n#include <functional>\n\nint arg[] = { 1, 2, 3, 4, 5 };\nint sum  = std::accumulate(arg, arg+5, 0, std::plus<int>());\n// or just\n// std::accumulate(arg, arg + 5, 0);\n// since plus() is the default functor for accumulate\nint prod = std::accumulate(arg, arg+5, 1, std::multiplies<int>());","language":"cpp"},{"title":"Sum and product of an array","code":"var array = [1, 2, 3, 4, 5],\n    sum = 0,\n    prod = 1,\n    i;\nfor (i = 0; i < array.length; i += 1) {\n    sum += array[i];\n    prod *= array[i];\n}\nalert(sum + ' ' + prod);","language":"javascript"},{"title":"Sum and product of an array","code":"var array = [1, 2, 3, 4, 5],\n    sum = array.reduce(function (a, b) {\n        return a + b;\n    }, 0),\n    prod = array.reduce(function (a, b) {\n        return a * b;\n    }, 1);\nalert(sum + ' ' + prod);","language":"javascript"},{"title":"Sum and product of an array","code":"function sumf(a, ...) return a and a + sumf(...) or 0 end\nfunction sumt(t) return sumf(unpack(t)) end\nfunction prodf(a, ...) return a and a * prodf(...) or 1 end\nfunction prodt(t) return prodf(unpack(t)) end\n\nprint(sumt{1, 2, 3, 4, 5})\nprint(prodt{1, 2, 3, 4, 5})","language":"lua"},{"title":"Sum and product of an array","code":"function table.sum(arr, length) \n      --same as if <> then <> else <>\n      return length == 1 and arr[1] or arr[length] + table.sum(arr, length -1)\nend\n\nfunction table.product(arr, length)\n      return length == 1 and arr[1] or arr[length] * table.sum(arr, length -1)\nend\n\nt = {1,2,3}\nprint(table.sum(t,#t))\nprint(table.product(t,3))","language":"lua"},{"title":"Sum and product of an array","code":"numbers = [1, 2, 3]\ntotal = sum(numbers)\n\nproduct = 1\nfor i in numbers:\n    product *= i","language":"python"},{"title":"Sum and product of an array","code":"from numpy import r_\nnumbers = r_[1:4]\ntotal = numbers.sum()\nproduct = numbers.prod()","language":"python"},{"title":"Sum and product of an array","code":"arr = [1,2,3,4,5]     # or ary = *1..5, or ary = (1..5).to_a\np sum = arr.inject(0) { |sum, item| sum + item }\n# => 15\np product = arr.inject(1) { |prod, element| prod * element }\n# => 120","language":"ruby"},{"title":"Sum and product of an array","code":"arr = [1,2,3,4,5]\np sum = arr.inject(0, :+)         #=> 15\np product = arr.inject(1, :*)     #=> 120\n\n# If you do not explicitly specify an initial value for memo,\n# then the first element of collection is used as the initial value of memo.\np sum = arr.inject(:+)            #=> 15\np product = arr.inject(:*)        #=> 120","language":"ruby"},{"title":"Sum and product of an array","code":"arr = []\np arr.inject(0, :+)               #=> 0\np arr.inject(1, :*)               #=> 1\np arr.inject(:+)                  #=> nil\np arr.inject(:*)                  #=> nil","language":"ruby"},{"title":"Sum and product of an array","code":"arr = [1,2,3,4,5]\np sum = arr.sum                   #=> 15\np [].sum                          #=> 0","language":"ruby"},{"title":"Sum and product of an array","code":"var ary = [1, 2, 3, 4, 5];\nsay ary.sum;                 # => 15\nsay ary.prod;                # => 120","language":"ruby"},{"title":"Combinations","code":"0 1 2\n0 1 3\n0 1 4\n0 2 3\n0 2 4\n0 3 4\n1 2 3\n1 2 4\n1 3 4\n2 3 4","language":"JavaScript"},{"title":"Combinations","code":"function map(f, a, ...) if a then return f(a), map(f, ...) end end\nfunction incr(k) return function(a) return k > a and a or a+1 end end\nfunction combs(m, n)\n  if m * n == 0 then return {{}} end\n  local ret, old = {}, combs(m-1, n-1)\n  for i = 1, n do\n    for k, v in ipairs(old) do ret[#ret+1] = {i, map(incr(i), unpack(v))} end\n  end\n  return ret\nend\n\nfor k, v in ipairs(combs(3, 5)) do print(unpack(v)) end","language":"lua"},{"title":"Combinations","code":"def comb(m, lst):\n    if m == 0: return [[]]\n    return [[x] + suffix for i, x in enumerate(lst)\n            for suffix in comb(m - 1, lst[i + 1:])]","language":"python"},{"title":"Combinations","code":"def comb(m, s):\n    if m == 0: return [[]]\n    if s == []: return []\n    return [s[:1] + a for a in comb(m-1, s[1:])] + comb(m, s[1:])\n\nprint comb(3, range(5))","language":"python"},{"title":"Matrix multiplication","code":"local alg = require(\"sci.alg\")\nmat1 = alg.tomat{{1, 2, 3}, {4, 5, 6}}\nmat2 = alg.tomat{{1, 2}, {3, 4}, {5, 6}}\nmat3 = mat1[] ** mat2[]\nprint(mat3)","language":"Lua"},{"title":"Matrix multiplication","code":"from operator import mul\n\ndef matrixMul(m1, m2):\n  return map(\n    lambda row:\n      map(\n        lambda *column:\n          sum(map(mul, row, column)),\n        *m2),\n    m1)","language":"python"},{"title":"Matrix multiplication","code":"import numpy as np\nnp.dot(a,b)\n#or if a is an array\na.dot(b)","language":"python"},{"title":"Matrix multiplication","code":"require 'matrix'\n\nMatrix[[1, 2],\n       [3, 4]] * Matrix[[-3, -8, 3],\n                        [-2,  1, 4]]","language":"ruby"},{"title":"Matrix multiplication","code":"def matrix_mult(a, b)\n  a.map do |ar|\n    b.transpose.map do |bc|\n      ar.zip(bc).map(&:*).inject(&:+)\n    end\n  end\nend","language":"ruby"},{"title":"Sleep","code":"#include <stdio.h>\n#include <unistd.h>\n\nint main()\n{\n  unsigned int seconds;\n  scanf(\"%u\", &seconds);\n  printf(\"Sleeping...\\n\");\n  sleep(seconds);\n  printf(\"Awake!\\n\");\n  return 0;\n}","language":"c"},{"title":"Sleep","code":"#include <iostream>\n#include <thread>\n#include <chrono>\nint main()\n{\n    unsigned long microseconds;\n    std::cin >> microseconds;\n    std::cout << \"Sleeping...\" << std::endl;\n    std::this_thread::sleep_for(std::chrono::microseconds(microseconds));\n    std::cout << \"Awake!\\n\";\n}","language":"cpp"},{"title":"Sleep","code":"require(\"socket\")\nio.write(\"Input a number of seconds to sleep: \")\nlocal input = io.read(\"*number\")\nprint(\"Sleeping\")\nsocket.sleep(input)\nprint(\"Awake!\")","language":"lua"},{"title":"Sleep","code":"import time\n\nseconds = float(raw_input())\nprint \"Sleeping...\"\ntime.sleep(seconds) # number is in seconds ... but accepts fractions\nprint \"Awake!\"","language":"python"},{"title":"Sleep","code":"seconds = gets.to_f\nputs \"Sleeping...\"\nsleep(seconds) # number is in seconds ... but accepts fractions\n# Minimum resolution is system dependent.\nputs \"Awake!\"","language":"ruby"},{"title":"Sleep","code":"var sec = read(Number);       # any positive number (it may be fractional)\nsay \"Sleeping...\";\nSys.sleep(sec);               # in seconds\n#Sys.usleep(sec);             # in microseconds\n#Sys.nanosleep(sec);          # in nanoseconds\nsay \"Awake!\";","language":"ruby"},{"title":"Sum of squares","code":"#include <numeric>\n#include <vector>\n#include \"boost/lambda/lambda.hpp\"\n\ndouble vec_add_squares(std::vector<double>& v)\n{\n  using namespace boost::lambda;\n\n  return std::accumulate(v.begin(), v.end(), 0.0, _1 + _2 * _2);\n}","language":"cpp"},{"title":"Sum of squares","code":"function sumsq(array) {\n  var sum = 0;\n  var i, iLen;\n\n  for (i = 0, iLen = array.length; i < iLen; i++) {\n    sum += array[i] * array[i];\n  }\n  return sum;\n}\n\nalert(sumsq([1,2,3,4,5]));  // 55","language":"javascript"},{"title":"Sum of squares","code":"function sumsq(array) {\n  var sum = 0, \n      i = array.length;\n\n  while (i--) sum += Math.pow(array[i], 2);\n\n  return sum;\n}\n\nalert(sumsq([1,2,3,4,5])); // 55","language":"javascript"},{"title":"Sum of squares","code":"function squaresum(a, ...) return a and a^2 + squaresum(...) or 0 end\nfunction squaresumt(t) return squaresum(unpack(t)) end\n\nprint(squaresumt{3, 5, 4, 1, 7})","language":"lua"},{"title":"Sum of squares","code":"#include <order/interpreter.h>\n\nORDER_PP(8to_lit(\n  8seq_fold(8plus, 0,\n            8seq_map(8fn(8X, 8times(8X, 8X)), 8seq(3, 1, 4, 1, 5, 9)))\n))","language":"c"},{"title":"Sum of squares","code":"func sum_of_squares(vector) {\n    var sum = 0;\n    vector.each { |n| sum += n**2 };\n    return sum;\n}\n\nsay sum_of_squares([]);         # 0\nsay sum_of_squares([1,2,3]);    # 14","language":"ruby"},{"title":"Averages/Arithmetic mean","code":"using System;\nusing System.Linq;\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(new[] { 1, 2, 3 }.Average());\n    }\n}","language":"csharp"},{"title":"Averages/Arithmetic mean","code":"#include <iterator>\n#include <algorithm>\n\ntemplate <typename Iterator>\ndouble mean(Iterator begin, Iterator end)\n{\n    if (begin == end)\n        return 0;\n    return std::accumulate(begin, end, 0.0) / std::distance(begin, end);\n}","language":"cpp"},{"title":"Averages/Arithmetic mean","code":"# Crystal will return NaN if an empty array is passed\ndef mean(arr) : Float64\n  arr.sum / arr.size.to_f\nend","language":"ruby"},{"title":"Averages/Arithmetic mean","code":"function mean(array)\n{\n var sum = 0, i;\n for (i = 0; i < array.length; i++)\n {\n  sum += array[i];\n }\n  return array.length ? sum / array.length : 0;\n}\n\nalert( mean( [1,2,3,4,5] ) );   // 3\nalert( mean( [] ) );            // 0","language":"javascript"},{"title":"Averages/Arithmetic mean","code":"function mean(array) {\n    var sum = 0;\n    array.forEach(function(value){\n        sum += value;\n        });\n    return array.length ? sum / array.length : 0;\n    }\n\nalert( mean( [1,2,3,4,5] ) );   // 3","language":"javascript"},{"title":"Averages/Arithmetic mean","code":"function mean(array) {\n    return !array.length ? 0\n        : array.reduce(function(pre, cur, i) {\n            return (pre * i + cur) / (i + 1);\n            });\n    }\n\nalert( mean( [1,2,3,4,5] ) );   // 3\nalert( mean( [] ) );            // 0","language":"javascript"},{"title":"Averages/Arithmetic mean","code":"Array.prototype.mean = function() {\n    return !this.length ? 0\n        : this.reduce(function(pre, cur, i) {\n            return (pre * i + cur) / (i + 1);\n            });\n    }\n\nalert( [1,2,3,4,5].mean() );   // 3\nalert( [].mean() );            // 0","language":"javascript"},{"title":"Averages/Arithmetic mean","code":"function mean(a)\n{\n return a.length ? Functional.reduce('+', 0, a) / a.length : 0;\n}","language":"javascript"},{"title":"Averages/Arithmetic mean","code":"function mean (numlist)\n    if type(numlist) ~= 'table' then return numlist end\n    num = 0\n    table.foreach(numlist,function(i,v) num=num+v end)\n    return num / #numlist\nend\n\nprint (mean({3,1,4,1,5,9}))","language":"lua"},{"title":"Averages/Arithmetic mean","code":"from math import fsum\ndef average(x):\n    return fsum(x)/float(len(x)) if x else 0\nprint (average([0,0,3,1,4,1,5,9,0,0]))\nprint (average([1e20,-1e-20,3,1,4,1,5,9,-1e20,1e-20]))","language":"python"},{"title":"Averages/Arithmetic mean","code":"def average(x):\n    return sum(x)/float(len(x)) if x else 0\nprint (average([0,0,3,1,4,1,5,9,0,0]))\nprint (average([1e20,-1e-20,3,1,4,1,5,9,-1e20,1e-20]))","language":"python"},{"title":"Averages/Arithmetic mean","code":"def avg(data):\n    if len(data)==0:\n        return 0\n    else:\n        return sum(data)/float(len(data))\nprint avg([0,0,3,1,4,1,5,9,0,0])","language":"python"},{"title":"Averages/Arithmetic mean","code":"def mean(nums)\n  nums.inject(0.0, :+) / nums.size\nend\n\nnums = [3, 1, 4, 1, 5, 9]\nnums.size.downto(0) do |i|\n  ary = nums[0,i]\n  puts \"array size #{ary.size} : #{mean(ary)}\"\nend","language":"ruby"},{"title":"Averages/Arithmetic mean","code":"func avg(Array list) {\n    list.len > 0 || return 0;\n    list.sum / list.len;\n}\n\nsay avg([Math.inf, Math.inf]);\nsay avg([3,1,4,1,5,9]);\nsay avg([1e+20, 3, 1, 4, 1, 5, 9, -1e+20]);\nsay avg([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0.11]);\nsay avg([10, 20, 30, 40, 50, -100, 4.7, -1100]);","language":"ruby"},{"title":"Arithmetic evaluation","code":"exp = \"1 + 2 - 3 * (4 / 6)\"\nputs(\"Original: \" + exp)\n\ntree = infix_exp_to_tree(exp)\nputs(\"Prefix: \" + tree.to_s(:prefix))\nputs(\"Infix: \" + tree.to_s(:infix))\nputs(\"Postfix: \" + tree.to_s(:postfix))\nputs(\"Result: \" + tree.eval.to_s)","language":"ruby"},{"title":"Roots of unity","code":"def roots_of_unity(n)\n  (0...n).map {|k| Complex.polar(1, 2 * Math::PI * k / n)}\nend\n\np roots_of_unity(3)","language":"ruby"},{"title":"Roots of unity","code":"func roots_of_unity(n) {\n    n.of { |j|\n        exp(2i * Num.pi / n * j)\n    }\n}\n\nroots_of_unity(5).each { |c|\n    printf(\"%+.5f%+.5fi\\n\", c.reals)\n}","language":"ruby"},{"title":"Forward difference","code":"function dif(a, b, ...)\n  if(b) then return b-a, dif(b, ...) end\nend\nfunction dift(t) return {dif(unpack(t))} end\nprint(unpack(dift{1,3,6,10,15}))","language":"lua"},{"title":"Forward difference","code":"def dif(s)\n  s.each_cons(2).collect { |x, y| y - x }\nend\n\ndef difn(s, n)\n  n.times.inject(s) { |s, | dif(s) }\nend","language":"ruby"},{"title":"Greatest common divisor","code":"int\ngcd_iter(int u, int v) {\n  if (u < 0) u = -u;\n  if (v < 0) v = -v;\n  if (v) while ((u %= v) && (v %= u));\n  return (u + v);\n}","language":"c"},{"title":"Greatest common divisor","code":"int gcd(int u, int v) {\nreturn (v != 0)?gcd(v, u%v):u;\n}","language":"c"},{"title":"Greatest common divisor","code":"public static long gcd(long a, long b){\n   long factor= Math.min(a, b);\n   for(long loop= factor;loop > 1;loop--){\n      if(a % loop == 0 && b % loop == 0){\n         return loop;\n      }\n   }\n   return 1;\n}","language":"java"},{"title":"Greatest common divisor","code":"public static int gcd(int a, int b) //valid for positive integers.\n{\n        while(b > 0)\n        {\n                int c = a % b;\n                a = b;\n                b = c;\n        }\n        return a;\n}","language":"java"},{"title":"Greatest common divisor","code":"static int gcd(int a,int b)\n        {\n                int min=a>b?b:a,max=a+b-min, div=min;\n                for(int i=1;i<min;div=min/++i)\n                        if(min%div==0&&max%div==0)\n                                return div;\n                return 1;\n        }","language":"java"},{"title":"Greatest common divisor","code":"public static long gcd(long a, long b){\n   if(a == 0) return b;\n   if(b == 0) return a;\n   if(a > b) return gcd(b, a % b);\n   return gcd(a, b % a);\n}","language":"java"},{"title":"Greatest common divisor","code":"import java.math.BigInteger;\n\npublic static long gcd(long a, long b){\n   return BigInteger.valueOf(a).gcd(BigInteger.valueOf(b)).longValue();\n}","language":"java"},{"title":"Greatest common divisor","code":"function gcd_rec(a, b) {\n  return b ? gcd_rec(b, a % b) : Math.abs(a);\n}","language":"javascript"},{"title":"Greatest common divisor","code":"#include <order/interpreter.h>\n\n#define ORDER_PP_DEF_8gcd ORDER_PP_FN( \\\n8fn(8U, 8V,                            \\\n    8if(8isnt_0(8V), 8gcd(8V, 8remainder(8U, 8V)), 8U)))\n// No support for negative numbers","language":"c"},{"title":"Greatest common divisor","code":"def gcd_iter(u, v):\n    while v:\n        u, v = v, u % v\n    return abs(u)","language":"python"},{"title":"Greatest common divisor","code":"def gcd(u, v)\n  u, v = u.abs, v.abs\n  while v > 0\n    u, v = v, u % v\n  end\n  u\nend","language":"ruby"},{"title":"Greatest common divisor","code":"func gcd(a, b) {\n    b.is_zero ? a.abs : gcd(b, a % b);\n}","language":"ruby"},{"title":"Greatest common divisor","code":"function gcd_rec(a: number, b: number) {\n  return b ? gcd_rec(b, a % b) : Math.abs(a);\n}","language":"javascript"},{"title":"Man or boy test","code":"def a(k, x1, x2, x3, x4, x5)\n  b = uninitialized -> typeof(k)\n  b = ->() { k -= 1; a(k, b, x1, x2, x3, x4) }\n  k <= 0 ? x4.call + x5.call : b.call\nend\n\nputs a(10, -> {1}, -> {-1}, -> {-1}, -> {1}, -> {0})","language":"ruby"},{"title":"Man or boy test","code":"var x = n => () => n;\n\nvar a = (k, x1, x2, x3, x4, x5) => {\n  var b = () => return a(--k, b, x1, x2, x3, x4); //decrement k before use\n  return (k > 0) ? b() : x4() + x5();\n};","language":"javascript"},{"title":"Man or boy test","code":"#!/usr/bin/env python\nimport sys\nsys.setrecursionlimit(1025)\n\ndef A(k, x1, x2, x3, x4, x5):\n    def B():\n        nonlocal k\n        k -= 1\n        return A(k, B, x1, x2, x3, x4)\n    return x4() + x5() if k <= 0 else B()\n\nprint(A(10, lambda: 1, lambda: -1, lambda: -1, lambda: 1, lambda: 0))","language":"python"},{"title":"Man or boy test","code":"def a(k, x1, x2, x3, x4, x5)\n  b = lambda { k -= 1; a(k, b, x1, x2, x3, x4) }\n  k <= 0 ? x4[] + x5[] : b[]\nend\n\nputs a(10, lambda {1}, lambda {-1}, lambda {-1}, lambda {1}, lambda {0})","language":"ruby"},{"title":"Man or boy test","code":"func a(k, x1, x2, x3, x4, x5) {\n    func b { a(--k, b, x1, x2, x3, x4) };\n    k <= 0 ? (x4() + x5()) : b();\n}\nsay a(10, ->{1}, ->{-1}, ->{-1}, ->{1}, ->{0});      #=> -67","language":"ruby"},{"title":"Man or boy test","code":"func a(k, x1, x2, x3, x4, x5) {\n    k <= 0 ? (x4() + x5())\n           : func b { a(--k, b, x1, x2, x3, x4) }();\n}\nsay a(10, ->{1}, ->{-1}, ->{-1}, ->{1}, ->{0});      #=> -67","language":"ruby"},{"title":"Man or boy test","code":"class MOB {\n    method a(k, x1, x2, x3, x4, x5) {\n        func b { self.a(--k, b, x1, x2, x3, x4) };\n        k <= 0 ? (x4() + x5()) : b();\n    }\n}\n\nvar obj = MOB();\nsay obj.a(10, ->{1}, ->{-1}, ->{-1}, ->{1}, ->{0});","language":"ruby"},{"title":"Numerical integration","code":"def faster_simpson(f, a, b, steps):\n   h = (b-a)/float(steps)\n   a1 = a+h/2\n   s1 = sum( f(a1+i*h) for i in range(0,steps))\n   s2 = sum( f(a+i*h) for i in range(1,steps))\n   return (h/6.0)*(f(a)+f(b)+4.0*s1+2.0*s2)","language":"python"},{"title":"Write float arrays to a text file","code":"import itertools\ndef writedat(filename, x, y, xprecision=3, yprecision=5):\n    with open(filename,'w') as f:\n        for a, b in itertools.izip(x, y):\n            print >> f, \"%.*g\\t%.*g\" % (xprecision, a, yprecision, b)","language":"python"},{"title":"Time a function","code":"function Test_Function()\n    for i = 1, 10000000 do\n        local s = math.log( i )\n        s = math.sqrt( s )\n    end\nend\n\nt1 = os.clock()\n    Test_Function()\nt2 = os.clock()\n\nprint( os.difftime( t2, t1 ) )","language":"lua"},{"title":"Time a function","code":"require 'benchmark'\n\nBenchmark.bm(8) do |x|\n  x.report(\"nothing:\")  {  }\n  x.report(\"sum:\")  { (1..1_000_000).inject(4) {|sum, x| sum + x} }\nend","language":"ruby"},{"title":"Time a function","code":"time 1+1\n30000/1000000  # in microseconds\n=> 2","language":"python"},{"title":"Plot coordinate pairs","code":"require 'gnuplot'\n\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny = [2.7, 2.8, 31.4, 38.1, 58.0, 76.2, 100.5, 130.0, 149.3, 180.0]\nGnuplot.open do |gp|\n  Gnuplot::Plot.new( gp ) do |plot|\n    plot.data << Gnuplot::DataSet.new( [x, y] ) do |ds|\n      ds.with = \"linespoints\"\n      ds.notitle\n    end\n  end\nend","language":"ruby"},{"title":"Plot coordinate pairs","code":"require('GD::Graph::points')\n\nvar data = [\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n    [2.7, 2.8, 31.4, 38.1, 58.0, 76.2, 100.5, 130.0, 149.3, 180.0],\n]\n\nvar graph = %s'GD::Graph::points'.new(400, 300)\nvar gd = graph.plot(data)\n\nvar format = 'png'\nFile(\"qsort-range.#{format}\").write(gd.(format), :raw)","language":"ruby"},{"title":"Polynomial regression","code":"#ifndef _POLIFITGSL_H\n#define _POLIFITGSL_H\n#include <gsl/gsl_multifit.h>\n#include <stdbool.h>\n#include <math.h>\nbool polynomialfit(int obs, int degree, \n                   double *dx, double *dy, double *store); /* n, p */\n#endif","language":"c"},{"title":"Polynomial regression","code":"require 'matrix'\n\ndef regress x, y, degree\n  x_data = x.map { |xi| (0..degree).map { |pow| (xi**pow).to_f } }\n\n  mx = Matrix[*x_data]\n  my = Matrix.column_vector(y)\n\n  ((mx.t * mx).inv * mx.t * my).transpose.to_a[0]\nend","language":"ruby"},{"title":"Polynomial regression","code":"betas = regress [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n                [1, 6, 17, 34, 57, 86, 121, 162, 209, 262, 321],\n                2\n\np betas","language":"ruby"},{"title":"Compare sorting algorithms' performance","code":"#ifndef _CSEQUENCE_H\n#define _CSEQUENCE_H\n#include <stdlib.h>\n\nvoid setfillconst(double c);\nvoid fillwithconst(double *v, int n);\nvoid fillwithrrange(double *v, int n);\nvoid shuffledrange(double *v, int n);\n#endif","language":"c"},{"title":"Compare sorting algorithms' performance","code":"def ones(n):\n    return [1]*n\n\ndef reversedrange(n):\n    return reversed(range(n))\n\ndef shuffledrange(n):\n    x = range(n)\n    random.shuffle(x)\n    return x","language":"python"},{"title":"String length","code":"#include <string.h>\n\nint main(void) \n{\n  const char *string = \"Hello, world!\";\n  size_t length = strlen(string);\n         \n  return 0;\n}","language":"c"},{"title":"String length","code":"int main(void) \n{\n  const char *string = \"Hello, world!\";\n  size_t length = 0;\n  \n  const char *p = string;\n  while (*p++ != '\\0') length++;                                         \n  \n  return 0;\n}","language":"c"},{"title":"String length","code":"#include <stdlib.h>\n\nint main(void)\n{\n  char s[] = \"Hello, world!\";\n  size_t length = sizeof s - 1;\n  \n  return 0;\n}","language":"c"},{"title":"String length","code":"#include <string> // (not <string.h>!)\nusing std::string;\n\nint main()\n{\n  string s = \"Hello, world!\";\n  string::size_type length = s.length(); // option 1: In Characters/Bytes\n  string::size_type size = s.size();     // option 2: In Characters/Bytes\n  // In bytes same as above since sizeof(char) == 1\n  string::size_type bytes = s.length() * sizeof(string::value_type); \n}","language":"cpp"},{"title":"String length","code":"#include <string>\nusing std::wstring;\n\nint main()\n{\n  wstring s = L\"\\u304A\\u306F\\u3088\\u3046\";\n  wstring::size_type length = s.length();\n}","language":"cpp"},{"title":"String length","code":"using System.Text;\n\nstring s = \"Hello, world!\";\nint byteLength = Encoding.Unicode.GetByteCount(s);","language":"csharp"},{"title":"String length","code":"var str1 = \"Hello, world!\";\nvar len1 = str1.length; //13\n\nvar str2 = \"\\uD834\\uDD2A\"; //U+1D12A represented by a UTF-16 surrogate pair\nvar len2 = str2.length; //2","language":"javascript"},{"title":"String length","code":"# The letter Alef\nprint len(u'\\u05d0'.encode('utf-8'))\n# 2\nprint len(u'\\u05d0'.encode('iso-8859-8'))\n# 1","language":"python"},{"title":"String length","code":"print len('ascii')\n# 5\nprint len(u'\\u05d0') # the letter Alef as unicode literal\n# 1\nprint len('\\xd7\\x90'.decode('utf-8')) # Same encoded as utf-8 string\n# 1\nprint hex(sys.maxunicode), len(unichr(0x1F4A9))\n# ('0x10ffff', 1)","language":"python"},{"title":"String length","code":"# The letter Alef\nprint(len('\\u05d0'.encode())) # the default encoding is utf-8 in Python3\n# 2\nprint(len('\\u05d0'.encode('iso-8859-8')))\n# 1","language":"python"},{"title":"String length","code":"print(len('ascii'))\n# 5\nprint(len('\\u05d0')) # the letter Alef as unicode literal\n# 1","language":"python"},{"title":"Infinity","code":"#include <math.h>        /* HUGE_VAL */\n#include <stdio.h>        /* printf() */\n\ndouble inf(void) {\n  return HUGE_VAL;\n}\n\nint main() {\n  printf(\"%g\\n\", inf());\n  return 0;\n}","language":"c"},{"title":"Infinity","code":"#define _ISOC99_SOURCE\n\n#include <math.h>\n#include <stdio.h>\n\nint main() {\n  printf(\"%g\\n\", INFINITY);\n  return 0;\n}","language":"c"},{"title":"Infinity","code":"#include <limits>\n\ndouble inf()\n{\n  if (std::numeric_limits<double>::has_infinity)\n    return std::numeric_limits<double>::infinity();\n  else\n    return std::numeric_limits<double>::max();\n}","language":"cpp"},{"title":"Infinity","code":"public static double getInf(){\n   return Double.POSITIVE_INFINITY;\n}","language":"java"},{"title":"Infinity","code":"function infinity()\n  return 1/0 --lua uses unboxed C floats for all numbers\nend","language":"lua"},{"title":"Infinity","code":"a = 1.0/0       # => Infinity\na.finite?       # => false\na.infinite?     # => 1\n\na = -1/0.0      # => -Infinity\na.infinite?     # => -1\n\na = Float::MAX  # => 1.79769313486232e+308\na.finite?       # => true\na.infinite?     # => nil","language":"ruby"},{"title":"System time","code":"#include<time.h>\n#include<stdio.h>\n#include<stdlib.h>\nint main(){\n  time_t my_time = time(NULL);\n  printf(\"%s\", ctime(&my_time));\n  return 0;\n}","language":"c"},{"title":"System time","code":"public class SystemTime{\n    public static void main(String[] args){\n        System.out.format(\"%tc%n\", System.currentTimeMillis());\n    }\n}","language":"java"},{"title":"System time","code":"# textual\nsay Time.local.ctime;        # => Thu Mar 19 15:10:41 2015\n\n# epoch time\nsay Time.sec;                # => 1426770641\n\n# epoch time with fractional seconds\nsay Time.micro_sec;          # => 1426770641.68409","language":"ruby"},{"title":"Singleton","code":"#ifndef SILLY_H\n#define SILLY_H\n\nextern void JumpOverTheDog( int numberOfTimes);\nextern int  PlayFetchWithDog( float weightOfStick);\n\n#endif","language":"c"},{"title":"Singleton","code":"...\n#include \"silly.h\"\n...\n/* code using the dog methods */\n   JumpOverTheDog( 4);\n   retrieved = PlayFetchWithDog( 3.1);\n...","language":"c"},{"title":"Prime decomposition","code":"public static List<BigInteger> primeFactorBig(BigInteger a){\n    List<BigInteger> ans = new LinkedList<BigInteger>();\n\n    for(BigInteger divisor = BigInteger.valueOf(2);\n            a.compareTo(ONE) > 0; divisor = divisor.add(ONE))\n                while(a.mod(divisor).equals(ZERO)){\n                         ans.add(divisor);\n                         a = a.divide(divisor);\n                }\n    return ans;\n}","language":"java"},{"title":"Prime decomposition","code":"irb(main):001:0> require 'prime'\n=> true\nirb(main):003:0> 2543821448263974486045199.prime_division\n=> [[701, 1], [1123, 2], [2411, 1], [1092461, 2]]","language":"ruby"},{"title":"Prime decomposition","code":"require 'benchmark'\nrequire 'mathn'\nBenchmark.bm(24) do |x|\n  [2**25 - 6, 2**35 - 7].each do |i|\n    puts \"#{i} = #{prime_factors_faster(i).join(' * ')}\"\n    x.report(\"  prime_factors\") { prime_factors(i) }\n    x.report(\"  prime_factors_faster\") { prime_factors_faster(i) }\n    x.report(\"  Integer#prime_division\") { i.prime_division }\n  end\nend","language":"ruby"},{"title":"Sorting algorithms/Merge sort","code":"using Sort;\n  using System;\n\n  class Program {\n    static void Main(String[] args) {\n      var entries = new Int32[] { 7, 5, 2, 6, 1, 4, 2, 6, 3 };\n      var sorter = new MergeSort<Int32>();\n      sorter.Sort(entries);\n      Console.WriteLine(String.Join(\" \", entries));\n    }\n  }","language":"csharp"},{"title":"Matrix transposition","code":"m=((1,  1,  1,   1),\n   (2,  4,  8,  16),\n   (3,  9, 27,  81),\n   (4, 16, 64, 256),\n   (5, 25,125, 625))\nprint(zip(*m))\n# in Python 3.x, you would do:\n# print(list(zip(*m)))","language":"python"},{"title":"Matrix transposition","code":"m=[[1,  1,  1,   1],\n   [2,  4,  8,  16],\n   [3,  9, 27,  81],\n   [4, 16, 64, 256],\n   [5, 25,125, 625]]\nputs m.transpose","language":"ruby"},{"title":"Matrix transposition","code":"require 'matrix'\n\nm=Matrix[[1,  1,  1,   1],\n         [2,  4,  8,  16],\n         [3,  9, 27,  81],\n         [4, 16, 64, 256],\n         [5, 25,125, 625]]\nputs m.transpose","language":"ruby"},{"title":"Matrix transposition","code":"def transpose(m)\n  m[0].zip(*m[1..-1])\nend\np transpose([[1,2,3],[4,5,6]])","language":"ruby"},{"title":"Hello world/Graphical","code":"#include \"windows.h\"\nvoid SayGoodbyeWorld(HWND hWnd)\n{\n  SetWindowText(hWnd, _T(\"Goodbye, World!\"));\n}","language":"c"},{"title":"Hello world/Graphical","code":"using System;\nusing System.Windows.Forms;\n\nclass Program {\n    static void Main(string[] args) {\n        Application.EnableVisualStyles(); //Optional.\n        MessageBox.Show(\"Goodbye, World!\");\n    }\n}","language":"csharp"},{"title":"Hello world/Graphical","code":"using Gtk;\nusing GtkSharp;\n\npublic class GoodbyeWorld {\n  public static void Main(string[] args) {\n    Gtk.Window window = new Gtk.Window();\n    window.Title = \"Goodbye, World\";\n    window.DeleteEvent += delegate { Application.Quit(); };\n    window.ShowAll();\n    Application.Run();\n  }\n}","language":"csharp"},{"title":"Hello world/Graphical","code":"#include <gtkmm.h>\nint main(int argc, char *argv[])\n{\n   Gtk::Main app(argc, argv);\n   Gtk::MessageDialog msg(\"Goodbye, World!\");\n   msg.run();\n}","language":"cpp"},{"title":"Hello world/Graphical","code":"#include \"afx.h\"\nvoid ShowGoodbyeWorld(CWnd* pWnd)\n{\n    pWnd->SetWindowText(_T(\"Goodbye, World!\"));\n}","language":"cpp"},{"title":"Hello world/Graphical","code":"using namespace System::Windows::Forms;\n\nint main(array<System::String^> ^args)\n{\n  MessageBox::Show(\"Goodbye, World!\", \"Rosetta Code\");\n  return 0;\n}","language":"cpp"},{"title":"Hello world/Graphical","code":"require \"iuplua\"\n\ndlg = iup.dialog{iup.label{title=\"Goodbye, World!\"}; title=\"test\"}\ndlg:show()\n\nif (not iup.MainLoopLevel or iup.MainLoopLevel()==0) then\n  iup.MainLoop()\nend","language":"lua"},{"title":"Hello world/Graphical","code":"function love.draw()\n    love.graphics.print(\"Goodbye, World!\", 400, 300)\nend","language":"lua"},{"title":"Hello world/Graphical","code":"import tkMessageBox\n\nresult = tkMessageBox.showinfo(\"Some Window Label\", \"Goodbye, World!\")","language":"python"},{"title":"Hello world/Graphical","code":"from tkinter import messagebox\n\nresult = messagebox.showinfo(\"Some Window Label\", \"Goodbye, World!\")","language":"python"},{"title":"Hello world/Graphical","code":"import PyQt4.QtGui\napp = PyQt4.QtGui.QApplication([])\npb = PyQt4.QtGui.QPushButton('Hello World')\npb.connect(pb,PyQt4.QtCore.SIGNAL(\"clicked()\"),pb.close)\npb.show()\nexit(app.exec_())","language":"python"},{"title":"Hello world/Graphical","code":"import pygtk\npygtk.require('2.0')\nimport gtk\n\nwindow = gtk.Window()\nwindow.set_title('Goodbye, World')\nwindow.connect('delete-event', gtk.main_quit)\nwindow.show_all()\ngtk.main()","language":"python"},{"title":"Hello world/Graphical","code":"import wx\n\napp = wx.App(False)\nframe = wx.Frame(None, wx.ID_ANY, \"Hello, World\")\nframe.Show(True)\napp.MainLoop()","language":"python"},{"title":"Hello world/Graphical","code":"require 'gtk2'\n\nwindow = Gtk::Window.new\nwindow.title = 'Goodbye, World'\nwindow.signal_connect(:delete-event) { Gtk.main_quit }\nwindow.show_all\n\nGtk.main","language":"ruby"},{"title":"Hello world/Graphical","code":"require 'tk'\nroot = TkRoot.new(\"title\" => \"User Output\")\nTkLabel.new(root, \"text\"=>\"CHUNKY BACON!\").pack(\"side\"=>'top')\nTk.mainloop","language":"ruby"},{"title":"Hello world/Graphical","code":"#_Note: this code MUST be executed through the Shoes GUI!!\n\nShoes.app do\n  para \"CHUNKY BACON!\", :size => 72\nend","language":"ruby"},{"title":"Hello world/Graphical","code":"#_Note: this code must not be executed through a GUI\nrequire 'green_shoes'\n\nShoes.app do\n  para \"Hello world\"\nend","language":"ruby"},{"title":"Hello world/Graphical","code":"var tk = require('Tk');\nvar main = %s'MainWindow'.new;\nmain.Button(\n    '-text'    => 'Goodbye, World!',\n    '-command' => 'exit',\n).pack;\ntk.MainLoop;","language":"ruby"},{"title":"Hello world/Graphical","code":"var gtk2 = require('Gtk2') -> init;\n\nvar window = %s'Gtk2::Window'.new;\nvar label  = %s'Gtk2::Label'.new('Goodbye, World!');\n\nwindow.set_title('Goodbye, World!');\nwindow.signal_connect(destroy => func(*_){ gtk2.main_quit });\n\nwindow.add(label);\nwindow.show_all;\n\ngtk2.main;","language":"ruby"},{"title":"Detect division by zero","code":"public static boolean infinity(double numer, double denom){\n        return Double.isInfinite(numer/denom);\n}","language":"java"},{"title":"Detect division by zero","code":"function div(a,b)\n  quot = a/b\n  if quot == 1/0 then error() end\n  return quot\nend","language":"lua"},{"title":"Detect division by zero","code":"def div_check(x, y):\n  try:\n    x / y\n  except ZeroDivisionError:\n    return True\n  else:\n    return False","language":"python"},{"title":"Detect division by zero","code":"def div_check(x, y)\n  begin\n    x / y\n  rescue ZeroDivisionError\n    true\n  else\n    false\n  end\nend","language":"ruby"},{"title":"Detect division by zero","code":"irb(main):010:0> div_check(5, 0)\n=> true\nirb(main):011:0> div_check(5.0, 0)\n=> false","language":"ruby"},{"title":"Detect division by zero","code":"def div_check(x, y)\n  begin\n    x.div y\n  rescue ZeroDivisionError\n    true\n  else\n    false\n  end\nend","language":"ruby"},{"title":"Detect division by zero","code":"irb(main):010:0> div_check(5, 0)\n=> true\nirb(main):011:0> div_check(5.0, 0)\n=> true","language":"ruby"},{"title":"Exponentiation operator","code":"function pow(base, exp) {\n    if (exp != Math.floor(exp)) \n        throw \"exponent must be an integer\";\n    if (exp < 0) \n        return 1 / pow(base, -exp);\n    var ans = 1;\n    while (exp > 0) {\n        ans *= base;\n        exp--;\n    }\n    return ans;\n}","language":"javascript"},{"title":"Exponentiation operator","code":"class Numeric\n  def pow(m)\n    raise TypeError, \"exponent must be an integer: #{m}\" unless m.is_a? Integer\n    puts \"pow!!\"\n    Array.new(m, self).reduce(1, :*)\n  end\nend\n\np 5.pow(3)\np 5.5.pow(3)\np 5.pow(3.1)","language":"ruby"},{"title":"Exponentiation operator","code":"class Numeric\n  def **(m)\n    pow(m)\n  end\nend","language":"ruby"},{"title":"Input loop","code":"import java.util.Scanner;\n...\nScanner in = new Scanner(System.in);//stdin\n//new Scanner(new FileInputStream(filename)) for a file\n//new Scanner(socket.getInputStream()) for a network stream\nwhile(in.hasNext()){\n        String input = in.next(); //in.nextLine() for line-by-line\n        //process the input here\n}","language":"java"},{"title":"Input loop","code":"var text_stream = WScript.StdIn;\nvar i = 0;\n\nwhile ( ! text_stream.AtEndOfStream ) {\n    var line = text_stream.ReadLine();\n    // do something with line\n    WScript.echo(++i + \": \" + line);\n}","language":"javascript"},{"title":"Input loop","code":"lines = {}\nstr = io.read()\nwhile str do\n    table.insert(lines,str)\n    str = io.read()\nend","language":"lua"},{"title":"Input loop","code":"lines = {}\n\nfor line in io.lines() do\n    table.insert(lines, line) -- add the line to the list of lines\nend","language":"lua"},{"title":"Input loop","code":"while(True):\n      x = input(\"What is your age? \")\n      print(x)","language":"python"},{"title":"Input loop","code":"my_file = open(filename, 'r')\ntry:\n    for line in my_file:\n        pass # process line, includes newline\nfinally:\n    my_file.close()","language":"python"},{"title":"Input loop","code":"from __future__ import with_statement\n\nwith open(filename, 'r') as f:\n    for line in f:\n        pass # process line, includes newline","language":"python"},{"title":"Input loop","code":"import fileinput\nfor line in fileinput.input():\n    pass # process line, includes newline","language":"python"},{"title":"Input loop","code":"stream = $stdin\nstream.each do |line|\n  # process line\nend","language":"ruby"},{"title":"Input loop","code":"var file = File(__FILE__)\nfile.open_r(\\var fh, \\var err) || die \"#{file}: #{err}\"\n\nfh.each { |line|              # iterates the lines of the fh\n    line.each_word { |word|   # iterates the words of the line\n        say word\n    }\n}","language":"ruby"},{"title":"Roots of a function","code":"-- Main procedure\nprint(\"Root (to 12DP)\\tMax. Error\\n\")\nfor _, r in pairs(root(f, -1, 3, 2^-10)) do\n    print(string.format(\"%0.12f\", r.val), r.err)\nend","language":"Lua"},{"title":"Sum of a series","code":"class Program\n{\n    static void Main(string[] args)\n    {\n        double sum = Enumerable.Range(1, 1000).Sum(x => 1.0 / (x * x));\n\n        Console.WriteLine(sum);\n        Console.ReadLine();\n    }\n}","language":"csharp"},{"title":"Sum of a series","code":"function sum(a,b,fn) {\n   var s = 0;\n   for ( ; a <= b; a++) s += fn(a);\n   return s;\n}\n \n sum(1,1000, function(x) { return 1/(x*x) } )  // 1.64393456668156","language":"javascript"},{"title":"Sum of a series","code":"sum = 0\nfor i = 1, 1000 do sum = sum + 1/i^2 end\nprint(sum)","language":"lua"},{"title":"Literals/Integer","code":"#include <stdio.h>\n\nint main(void)\n{\n  printf(\"%s\\n\",\n         ( (727 == 0x2d7) && \n           (727 == 01327)    ) ? \"true\" : \"false\");\n\n  return 0;\n}","language":"c"},{"title":"Literals/Integer","code":"#include <iostream>\n\nint main()\n{\n  std::cout << ( (727 == 0x2d7) && \n                 (727 == 01327)     ? \"true\" : \"false\")\n            << std::endl;\n \n  return 0;\n}","language":"cpp"},{"title":"Literals/Integer","code":"if ( 727 == 0x2d7 && \n     727 == 01327 )\n    window.alert(\"true\");","language":"javascript"},{"title":"Literals/Integer","code":"say 255;\nsay 0xff;\nsay 0377;\nsay 0b1111_1111;","language":"ruby"},{"title":"Non-decimal radices/Convert","code":"k = 26\ns = k.toString(16) //gives 1a\ni = parseInt('1a',16) //gives 26\n//optional special case for hex:\ni = +('0x'+s) //hexadecimal base 16, if s='1a' then i=26.","language":"javascript"},{"title":"Arithmetic/Complex","code":"# Other ways to find the multiplicative inverse:\nputs 1.quo a            # always works\nputs 1.0 / a            # works, but forces floating-point math\nputs 1 / a              # might truncate to integer","language":"ruby"},{"title":"Arithmetic/Complex","code":"require \"cmath\"\nCMath.sqrt(-9)      #=> 0+3.0i\nCMath.acos(0+3.0i)  #=> (1.5707963267948966-1.8184464592320668i)\n#etc","language":"ruby"},{"title":"Sierpinski carpet","code":"def sierpinski_carpet(n):\n  carpet = [\"#\"]\n  for i in xrange(n):\n    carpet = [x + x + x for x in carpet] + \\\n             [x + x.replace(\"#\",\" \") + x for x in carpet] + \\\n             [x + x + x for x in carpet]\n  return \"\\n\".join(carpet)\n\nprint sierpinski_carpet(3)","language":"python"},{"title":"Sierpinski carpet","code":"def sierpinski_carpet(n)\n  carpet = [\"#\"]\n  n.times do\n    carpet = carpet.collect {|x| x + x + x} +\n             carpet.collect {|x| x + x.tr(\"#\",\" \") + x} +\n             carpet.collect {|x| x + x + x}\n  end\n  carpet\nend\n\n4.times{|i| puts \"\\nN=#{i}\", sierpinski_carpet(i)}","language":"ruby"},{"title":"Sierpinski carpet","code":"var c = ['##']\n3.times {\n    c = (c.map{|x| x * 3 }             +\n         c.map{|x| x + ' '*x.len + x } +\n         c.map{|x| x * 3 })\n}\nsay c.join(\"\\n\")","language":"ruby"},{"title":"Non-continuous subsequences","code":"int main(){\n  N n(31);\n  int z{};for (;n.hasNext();++z); std::cout << z << std::endl;\n}","language":"cpp"},{"title":"Non-continuous subsequences","code":"def ncsub(seq, s=0):\n    if seq:\n        x = seq[:1]\n        xs = seq[1:]\n        p2 = s % 2\n        p1 = not p2\n        return [x + ys for ys in ncsub(xs, s + p1)] + ncsub(xs, s + p2)\n    else:\n        return [[]] if s >= 3 else []","language":"python"},{"title":"Non-continuous subsequences","code":"class Array\n  def continuous?(seq)\n    seq.each_cons(2) {|a, b| return false if index(a)+1 != index(b)}\n    true\n  end\nend\n\np %w(a e i o u).non_continuous_subsequences","language":"ruby"},{"title":"Loops/Infinite","code":"/*Abhishek Ghosh, 24th October 2017*/\nspam: puts(\"SPAM\");\ngoto spam;","language":"c"},{"title":"Loops/Infinite","code":"do\n  std::cout << \"SPAM\" << std::endl;\nwhile (true);","language":"cpp"},{"title":"Loops/Infinite","code":"while (true)\n{\n    Console.WriteLine(\"SPAM\");\n}","language":"csharp"},{"title":"Loops/Infinite","code":"while(true){\n   System.out.println(\"SPAM\");\n}","language":"java"},{"title":"Loops/Infinite","code":"for(;;){\n   System.out.println(\"SPAM\");\n}","language":"java"},{"title":"Loops/Infinite","code":"while true do\n  print(\"SPAM\")\nend\n\n--Another solution\nrepeat\n  print(\"SPAM\")\nuntil false","language":"lua"},{"title":"Loops/For","code":"int i, j;\nfor (i = 1; i <= 5; i++) {\n  for (j = 1; j <= i; j++)\n    putchar('*');\n  puts(\"\");\n}","language":"c"},{"title":"Loops/For","code":"for(int i = 1; i <= 5; ++i) {\n  for(int j = 1; j <= i; j++)\n    std::cout << \"*\";\n  std::cout << std::endl;\n}","language":"cpp"},{"title":"Loops/For","code":"for (int i = 0; i < 5; i++) {\n   for (int j = 0; j <= i; j++) {\n      System.out.print(\"*\");\n   }\n   System.out.println();\n}","language":"java"},{"title":"Loops/For","code":"var i, j;\nfor (i = 1; i <= 5; i += 1) {\n  s = '';\n  for (j = 0; j < i; j += 1)\n    s += '*';\n  document.write(s + '<br>');\n}","language":"javascript"},{"title":"Loops/For","code":"function range(i) {\n  return i ? range(i - 1).concat(i) : [];\n}\n\nrange(5) --> [1, 2, 3, 4, 5]","language":"JavaScript"},{"title":"Loops/For","code":"var s = '';\n\nrange(5).forEach(\n  function (line) {\n    range(line).forEach(\n      function () { s += '*'; }\n    );\n    s += '\\n';\n  }\n);\n\nconsole.log(s);","language":"JavaScript"},{"title":"Loops/For","code":"console.log(\n  range(5).reduce(\n    function (a, n) {\n      return a + Array(n + 1).join('*') + '\\n';\n    }, ''\n  )\n);","language":"JavaScript"},{"title":"Loops/For","code":"console.log(\n  range(5).map(function(a) {\n    return Array(a + 1).join('*');\n  }).join('\\n')\n);","language":"JavaScript"},{"title":"Loops/For","code":"for i=1,5 do\n  for j=1,i do\n    io.write(\"*\")\n  end\n  io.write(\"\\n\")\nend","language":"lua"},{"title":"Loops/For","code":"for i in 1..5:\n  for j in 1..i:\n    stdout.write(\"*\")\n  echo(\"\")","language":"Python"},{"title":"Loops/For","code":"#include <order/interpreter.h>\n\nORDER_PP(\n  8for_each_in_range(8fn(8I,\n                         8print(\n                           8for_each_in_range(8fn(8J, 8print((*))),\n                                              1, 8plus(8I, 1))\n                           8space)),\n                         1, 6)\n)","language":"c"},{"title":"Loops/For","code":"size( 105,120 );\n\nfor ( int i=20; i<=100; i+=20 )\n   for ( int j=10; j<=i; j+=20 )\n      text( \"*\", j,i );","language":"java"},{"title":"Loops/For","code":"import sys\nfor i in xrange(5):\n    for j in xrange(i+1):\n        sys.stdout.write(\"*\")\n    print","language":"python"},{"title":"Loops/For","code":"for i in 1..5\n  for j in 1..i\n    print \"*\"\n  end\n  puts\nend","language":"ruby"},{"title":"Loops/For","code":"(1..5).each do |i|\n  (1..i).each do |j|\n    print \"*\"\n  end\n  puts\nend","language":"ruby"},{"title":"Loops/For","code":"1.upto(5) do |i|\n  1.upto(i) do |j|\n    print \"*\"\n  end\n  puts\nend","language":"ruby"},{"title":"Loops/For","code":"5.times do |i|\n  # i goes from 0 to 4\n  (i+1).times do\n    print \"*\"\n  end\n  puts\nend","language":"ruby"},{"title":"Loops/For","code":"i = 1\nloop do\n  j = 1\n  loop do\n    print \"*\"\n    break if (j += 1) > i\n  end\n  puts\n  break if (i += 1) > 5\nend","language":"ruby"},{"title":"Loops/For","code":"for (var i = 1; i <= 5; i++) {\n    for (var j = 1; j <= i; j++) {\n        print '*'\n    }\n    print \"\\n\"\n}","language":"ruby"},{"title":"Loops/For","code":"for (1..5) { |i|\n    for (1..i) { print '*' }\n    print \"\\n\"\n}","language":"ruby"},{"title":"Loops/For","code":"for i in (1..5) {\n    for j in (1..i) { print '*' }\n    print \"\\n\"\n}","language":"ruby"},{"title":"Loops/For","code":"5.times { |i|\n    i.times { print '*' }\n    print \"\\n\"\n}","language":"ruby"},{"title":"Loops/For","code":"for (let i: number = 0; i < 5; ++i) {\n    let line: string = \"\"\n    for(let j: number = 0; j <= i; ++j) {\n        line += \"*\"\n    }\n    console.log(line)\n}","language":"JavaScript"},{"title":"Loops/While","code":"int i = 1024;\nwhile(i > 0) {\n  printf(\"%d\\n\", i);\n  i /= 2;\n}","language":"c"},{"title":"Loops/While","code":"int i;\nfor(i = 1024;i > 0; i/=2){\n   printf(\"%d\\n\", i);\n}","language":"c"},{"title":"Loops/While","code":"int i = 1024;\nwhile(i > 0) {\n  std::cout << i << std::endl;\n  i /= 2;\n}","language":"cpp"},{"title":"Loops/While","code":"{\n  init;\n  while (cond)\n  {\n    statement;\n    update;\n  }\n}","language":"cpp"},{"title":"Loops/While","code":"int i = 1024;\nwhile(i > 0){\n   System.Console.WriteLine(i);\n   i /= 2;\n}","language":"csharp"},{"title":"Loops/While","code":"var n = 1024;\nwhile (n > 0) {\n  print(n);\n  n /= 2;\n}","language":"javascript"},{"title":"Loops/While","code":"512\n256\n128\n64\n32\n16\n8\n4\n2\n1","language":"JavaScript"},{"title":"Loops/While","code":"n = 1024\nwhile n>0 do\n  print(n)\n  n = math.floor(n/2)\nend","language":"lua"},{"title":"Loops/While","code":"n = 1024\nwhile n > 0:\n    print n\n    n //= 2","language":"python"},{"title":"Loops/While","code":"i = 1024\nwhile i > 0 do\n   puts i\n   i /= 2\nend","language":"ruby"},{"title":"Loops/While","code":"i = 1024\nuntil i <= 0 do\n   puts i\n   i /= 2\nend","language":"ruby"},{"title":"Loops/While","code":"var i = 1024\nwhile (i > 0) {\n    say i\n    i //= 2\n}","language":"ruby"},{"title":"Loops/Foreach","code":"#include <stdio.h>\n...\n\nconst char *list[] = {\"Red\",\"Green\",\"Blue\",\"Black\",\"White\"};\n#define LIST_SIZE (sizeof(list)/sizeof(list[0]))\n\nint ix;\nfor(ix=0; ix<LIST_SIZE; ix++) {\n   printf(\"%s\\n\", list[ix]);\n}","language":"c"},{"title":"Loops/Foreach","code":"for (container_type::iterator i = container.begin(); i != container.end(); ++i)\n{\n  std::cout << *i << \"\\n\";\n}","language":"cpp"},{"title":"Loops/Foreach","code":"void print_element(container_type::value_type const& v)\n{\n  std::cout << v << \"\\n\";\n}\n\n...\n  std::for_each(container.begin(), container.end(), print_element);","language":"cpp"},{"title":"Loops/Foreach","code":"for (auto element: container)\n{\n  std::cout << element << \"\\n\";\n}","language":"cpp"},{"title":"Loops/Foreach","code":"for (auto const& element: container)\n{\n  std::cout << element << \"\\n\";\n}","language":"cpp"},{"title":"Loops/Foreach","code":"for (auto&& element: container) //use a 'universal reference'\n{\n  element += 42;\n}","language":"cpp"},{"title":"Loops/Foreach","code":"string[] things = {\"Apple\", \"Banana\", \"Coconut\"};\n\nforeach (string thing in things)\n{\n    Console.WriteLine(thing);\n}","language":"csharp"},{"title":"Loops/Foreach","code":"Iterable<Type> collect;\n...\nfor(Type i:collect){\n   System.out.println(i);\n}","language":"java"},{"title":"Loops/Foreach","code":"\"alpha beta gamma delta\".split(' ').forEach(\n  function (x) {\n    console.log(x);\n  }\n);","language":"JavaScript"},{"title":"Loops/Foreach","code":"console.log(\"alpha beta gamma delta\".split(' ').map(\n  function (x) {\n    return x.toUpperCase(x);\n  }\n).join('\\n'));","language":"JavaScript"},{"title":"Loops/Foreach","code":"console.log(\n  \"alpha beta gamma delta\".split(' ').reduce(\n    function (a, x, i, lst) {\n      return lst.length - i + '. ' + x + '\\n' + a;\n    }, ''\n  )\n)","language":"JavaScript"},{"title":"Loops/Foreach","code":"for (var a in o) {\n    print(o[a]);\n}","language":"JavaScript"},{"title":"Loops/Foreach","code":"for (var a in o) {\n    if (o.hasOwnProperty(a)) {\n        print(o[a]);\n    }\n}","language":"JavaScript"},{"title":"Loops/Foreach","code":"lines = words = characters = 0\nf = open('somefile','r')\nfor eachline in f:\n    lines += 1\n    for eachword in eachline.split():\n        words += 1\n        for eachchar in eachword:\n            characters += 1\n\nprint lines, words, characters","language":"python"},{"title":"Loops/Foreach","code":"for i in collection do\n  puts i\nend","language":"ruby"},{"title":"Loops/Foreach","code":"collection.each do |i|\n  puts i\nend","language":"ruby"},{"title":"Loops/Foreach","code":"foreach [1,2,3] { |i|\n    say i\n}","language":"ruby"},{"title":"Loops/Foreach","code":"for i in [1,2,3] {\n    say i\n}","language":"ruby"},{"title":"Loops/Foreach","code":"[1,2,3].each { |i|\n    say i\n}","language":"ruby"},{"title":"Loops/Do-while","code":"int val = 0;\ndo{\n   val++;\n   printf(\"%d\\n\",val);\n}while(val % 6 != 0);","language":"c"},{"title":"Loops/Do-while","code":"int val = 0;\ndo{\n   val++;\n   std::cout << val << std::endl;\n}while(val % 6 != 0);","language":"cpp"},{"title":"Loops/Do-while","code":"int a = 0;\n\ndo\n{\n    a += 1;\n    Console.WriteLine(a);\n} while (a % 6 != 0);","language":"csharp"},{"title":"Loops/Do-while","code":"int val = 0;\ndo{\n   val++;\n   System.out.println(val);\n}while(val % 6 != 0);","language":"java"},{"title":"Loops/Do-while","code":"var val = 0;\ndo {\n  print(++val);\n} while (val % 6);","language":"javascript"},{"title":"Loops/Do-while","code":"1\n2\n3\n4\n5\n6","language":"JavaScript"},{"title":"Loops/Do-while","code":"1\n2\n3\n4\n5","language":"JavaScript"},{"title":"Loops/Do-while","code":"1\n2\n3\n4\n5\n6","language":"JavaScript"},{"title":"Loops/Do-while","code":"i=0\nrepeat\n  i=i+1\n  print(i)\nuntil i%6 == 0","language":"lua"},{"title":"Loops/Do-while","code":"val = 0\nwhile True:\n   val +=1\n   print val\n   if val % 6 == 0: break","language":"python"},{"title":"Loops/Do-while","code":"val = 1\nprint val\nwhile val % 6 != 0:\n   val += 1\n   print val","language":"python"},{"title":"Loops/Do-while","code":"val = 0\nbegin\n   val += 1\n   puts val\nend while val % 6 != 0","language":"ruby"},{"title":"Loops/Do-while","code":"val = 0\nbegin\n   val += 1\n   puts val\nend until val % 6 == 0","language":"ruby"},{"title":"Loops/Do-while","code":"val = 0\nloop do\n   val += 1\n   puts val\n   break unless val %6 != 0\nend","language":"ruby"},{"title":"Loops/Do-while","code":"val = 0\nloop do\n   val += 1\n   puts val\n   break if val %6 == 0\nend","language":"ruby"},{"title":"Loops/Do-while","code":"var value = 0;\ndo {\n    say ++value;\n} while (value % 6);","language":"ruby"},{"title":"Loops/N plus one half","code":"#include <stdio.h>\n\nint main()\n{\n  int i;\n  for (i = 1; i <= 10; i++) {\n    printf(\"%d\", i);\n    printf(i == 10 ? \"\\n\" : \", \");\n  }\n  return 0;\n}","language":"c"},{"title":"Loops/N plus one half","code":"#include <iostream>\n\nint main()\n{ \n  int i;\n  for (i = 1; i<10 ; i++)\n    std::cout << i << \", \";\n  std::cout<<i;\n  return 0;\n}","language":"cpp"},{"title":"Loops/N plus one half","code":"var out = System.out\nfor(i in 1..10) {\n  if(i > 1) out.print(\", \")\n  out.print(i)\n}","language":"java"},{"title":"Loops/N plus one half","code":"public static void main(String[] args) {\n    for (int i = 1; ; i++) {\n        System.out.print(i);\n        if (i == 10)\n            break;\n        System.out.print(\", \");\n    }\n    System.out.println();\n}","language":"java"},{"title":"Loops/N plus one half","code":"function range(m, n) {\n  return Array.apply(null, Array(n - m + 1)).map(\n    function (x, i) {\n      return m + i;\n    }\n  );\n}\n \nconsole.log(\n  range(1, 10).join(', ')\n);","language":"JavaScript"},{"title":"Loops/N plus one half","code":"var s=1, e=10\nfor (var i=s; i<=e; i+=1) {\n        document.write( i==s ? '' : ', ', i )\n}","language":"JavaScript"},{"title":"Loops/N plus one half","code":"var s=1, e=10\nfor (;; s+=1) {\n        document.write( s )\n        if (s==e) break\n        document.write( ', ' )\n}","language":"JavaScript"},{"title":"Loops/N plus one half","code":"for i = 1, 10 do\n  io.write(i)\n  if i == 10 then break end\n  io.write\", \"\nend","language":"lua"},{"title":"Loops/N plus one half","code":"(1..10).each do |i|\n  print i\n  break if i == 10\n  print \", \"\nend\nputs","language":"ruby"},{"title":"Loops/N plus one half","code":"for (1..10) { |i|\n    print i;\n    i == 10 && break;\n    print ', ';\n}\n\nprint \"\\n\";","language":"ruby"},{"title":"Loops/Downward for","code":"int i;\nfor(i = 10; i >= 0; --i)\n  printf(\"%d\\n\",i);","language":"c"},{"title":"Loops/Downward for","code":"for (int i = 10; i >= 0; i--)\n{\n   Console.WriteLine(i);\n}","language":"csharp"},{"title":"Loops/Downward for","code":"for(i = 10; i >= 0; --i){\n   System.out.println(i);\n}","language":"java"},{"title":"Loops/Downward for","code":"console.log(\n  range(0, 10).reverse().map(\n    function (x) {\n      return x;\n    }\n  ).join('\\n')\n);","language":"JavaScript"},{"title":"Loops/Downward for","code":"console.log(\n    range(0, 10).reverse().join('\\n')\n);","language":"JavaScript"},{"title":"Loops/Downward for","code":"for i=10,0,-1 do\n  print(i)\nend","language":"lua"},{"title":"Loops/Downward for","code":"10.downto(0) do |i|\n   puts i\nend","language":"ruby"},{"title":"Loops/Downward for","code":"for (var i = 10; i >= 0; i--) {\n    say i\n}","language":"ruby"},{"title":"Loops/Downward for","code":"for i in (11 ^.. 0) {\n    say i\n}","language":"ruby"},{"title":"Loops/Downward for","code":"10.downto(0).each { |i|\n    say i\n}","language":"ruby"},{"title":"Reverse a string","code":"String str = 'Hello World!';\nstr = str.reverse();\nsystem.debug(str);","language":"java"},{"title":"Reverse a string","code":"#include <iostream>\n#include <string>\n#include <algorithm>\n\nint main()\n{\n  std::string s;\n  std::getline(std::cin, s);\n  std::reverse(s.begin(), s.end()); // modifies s\n  std::cout << s << std::endl;\n  return 0;\n}","language":"cpp"},{"title":"Reverse a string","code":"private static string ReverseString(string input)\n{\n        char[] inputChars = input.ToCharArray();\n        Array.Reverse(inputChars);\n        return new string(inputChars);\n}","language":"csharp"},{"title":"Reverse a string","code":"public static String reverseString(String s) {\n    return new StringBuffer(s).reverse().toString();\n}","language":"java"},{"title":"Program termination","code":"#include <stdlib.h>\n\nif(problem){\n  abort();\n}","language":"c"},{"title":"Program termination","code":"#include <cstdlib>\n\nvoid problem_occured()\n{\n  std::exit(EXIT_FAILURE);\n}","language":"cpp"},{"title":"Program termination","code":"#include <cstdlib>\n\nvoid problem_occured()\n{\n  std::abort();\n}","language":"cpp"},{"title":"Program termination","code":"#include <exception>\n\nvoid problem_occured()\n{\n  std::terminate();\n}","language":"cpp"},{"title":"Program termination","code":"if (problem)\n{\n   Environment.Exit(1);\n}","language":"csharp"},{"title":"Program termination","code":"if(problem){\n   System.exit(integerErrorCode); \n   //conventionally, error code 0 is the code for \"OK\",\n   // while anything else is an actual problem\n   //optionally: Runtime.getRuntime().exit(integerErrorCode);\n}","language":"java"},{"title":"Program termination","code":"if(problem){\n   Runtime.getRuntime().halt(integerErrorCode); \n   //conventionally, error code 0 is the code for \"OK\",\n   // while anything else is an actual problem\n}","language":"java"},{"title":"Program termination","code":"if some_condition then \n    os.exit( number )\nend","language":"lua"},{"title":"Program termination","code":"import sys\nif problem:\n    sys.exit(1)","language":"python"},{"title":"Program termination","code":"import os\nif problem:\n    os.abort()","language":"python"},{"title":"Program termination","code":"if problem\n  exit(1)\nend\n\n# or\nif problem\n  abort   # equivalent to exit(1)\nend","language":"ruby"},{"title":"Program termination","code":"if problem\n  exit!   # default value 1\nend","language":"ruby"},{"title":"Program termination","code":"if (problem) {\n    Sys.exit(code);\n}","language":"ruby"},{"title":"Loops/Continue","code":"for(int i = 1;i <= 10; i++){\n   printf(\"%d\", i);\n   if(i % 5 == 0){\n      printf(\"\\n\");\n      continue;\n   }\n   printf(\", \");\n}","language":"c"},{"title":"Loops/Continue","code":"for(int i = 1;i <= 10; i++){\n   cout << i;\n   if(i % 5 == 0){\n      cout << endl;\n      continue;\n   }\n   cout << \", \";\n}","language":"cpp"},{"title":"Loops/Continue","code":"for(int i = 1;i <= 10; i++){\n   System.out.print(i);\n   if(i % 5 == 0){\n      System.out.println();\n      continue;\n   }\n   System.out.print(\", \");\n}","language":"java"},{"title":"Loops/Continue","code":"var output = \"\";\nfor (var i = 1; i <= 10; i++) {\n  output += i; \n  if (i % 5 == 0) {\n    print(output);\n    output = \"\";\n    continue;\n  } \n  output += \", \";\n}","language":"javascript"},{"title":"Loops/Continue","code":"function rng(n) {\n  return n ? rng(n - 1).concat(n) : [];\n}\n\nconsole.log(\n  rng(10).reduce(\n    function (a, x) {\n      return a + x.toString() + (x % 5 ? ', ' : '\\n');\n    }, ''\n  )\n);","language":"JavaScript"},{"title":"Loops/Continue","code":"for i = 1, 10 do\n    io.write( i )\n    if i % 5 == 0 then\n        io.write( \"\\n\" )\n    else\n            io.write( \", \" ) \n    end\nend","language":"Lua"},{"title":"Loops/Continue","code":"for i in xrange(1,11):\n    if i % 5 == 0:\n        print i\n        continue\n    print i, \",\",","language":"python"},{"title":"Loops/Continue","code":"for i in 1..10 do\n   print i\n   if i % 5 == 0 then\n      puts\n      next\n   end\n   print ', '\nend","language":"ruby"},{"title":"Loops/Continue","code":"(1..10).each do |i| ...\n1.upto(10) do |i| ...\n10.times do |n| i=n+1; ...","language":"ruby"},{"title":"Loops/Continue","code":"for i in (1..10) {\n    print i\n    if (i %% 5) {\n        print \"\\n\"\n        next\n    }\n    print ', '\n}","language":"ruby"},{"title":"Inheritance/Single","code":"public class Animal{\n   //functions go here...\n}","language":"java"},{"title":"Inheritance/Single","code":"public class Dog extends Animal{\n   //functions go here...\n}","language":"java"},{"title":"Inheritance/Single","code":"public class Cat extends Animal{\n   //functions go here...\n}","language":"java"},{"title":"Inheritance/Single","code":"public class Lab extends Dog{\n   //functions go here...\n}","language":"java"},{"title":"Inheritance/Single","code":"public class Collie extends Dog{\n   //functions go here...\n}","language":"java"},{"title":"Inheritance/Single","code":"function Animal() {\n    // ...\n}","language":"javascript"},{"title":"Inheritance/Single","code":"function Dog() {\n    // ...\n}\nDog.prototype = new Animal();","language":"javascript"},{"title":"Inheritance/Single","code":"function Cat() {\n    // ...\n}\nCat.prototype = new Animal();","language":"javascript"},{"title":"Inheritance/Single","code":"function Collie() {\n    // ...\n}\nCollie.prototype = new Dog();","language":"javascript"},{"title":"Inheritance/Single","code":"function Lab() {\n    // ...\n}\nLab.prototype = new Dog();","language":"javascript"},{"title":"Inheritance/Single","code":"Animal.prototype.speak = function() {print(\"an animal makes a sound\")};\n\nvar lab = new Lab();\nlab.speak();  // shows \"an animal makes a sound\"","language":"javascript"},{"title":"Inheritance/Single","code":"class Animal {};\nclass Dog << Animal {};\nclass Cat << Animal {};\nclass Lab << Dog {};\nclass Collie << Dog {};","language":"ruby"},{"title":"Inheritance/Multiple","code":"interface ICamera {\n    // ...\n}\n\nclass MobilePhone {\n    // ...\n}\n\nclass CameraPhone: ICamera, MobilePhone {\n    // ...\n}","language":"csharp"},{"title":"Inheritance/Multiple","code":"public interface Camera{\n   //functions here with no definition...\n   //ex:\n   //public void takePicture();\n}","language":"java"},{"title":"Inheritance/Multiple","code":"public interface MobilePhone{\n   //functions here with no definition...\n   //ex:\n   //public void makeCall();\n}","language":"java"},{"title":"Inheritance/Multiple","code":"public class CameraPhone implements Camera, MobilePhone{\n   //functions here...\n}","language":"java"},{"title":"Inheritance/Multiple","code":"module Camera\n  # define methods here\nend\nclass MobilePhone\n  # define methods here\nend\nclass CameraPhone < MobilePhone\n  include Camera\n  # define methods here\nend","language":"ruby"},{"title":"Inheritance/Multiple","code":"class Camera {};\nclass MobilePhone {};\nclass CameraPhone << Camera, MobilePhone {};","language":"ruby"},{"title":"Real constants and functions","code":"#include <math.h>\n\nM_E; /* e - not standard but offered by most implementations */\nM_PI; /* pi - not standard but offered by most implementations */\nsqrt(x); /* square root--cube root also available in C99 (cbrt) */\nlog(x); /* natural logarithm--log base 10 also available (log10) */\nexp(x); /* exponential */\nabs(x); /* absolute value (for integers) */\nfabs(x); /* absolute value (for doubles) */\nfloor(x); /* floor */\nceil(x); /* ceiling */\npow(x,y); /* power */","language":"c"},{"title":"Real constants and functions","code":"Math.E; //e\nMath.PI; //pi\nMath.sqrt(x); //square root--cube root also available (cbrt)\nMath.log(x); //natural logarithm--log base 10 also available (log10)\nMath.exp(x); //exponential\nMath.abs(x); //absolute value\nMath.floor(x); //floor\nMath.ceil(x); //ceiling\nMath.pow(x,y); //power","language":"java"},{"title":"Real constants and functions","code":"Math.E\nMath.PI\nMath.sqrt(x)\nMath.log(x)\nMath.exp(x)\nMath.abs(x)\nMath.floor(x)\nMath.ceil(x)\nMath.pow(x,y)","language":"javascript"},{"title":"Real constants and functions","code":"math.exp(1)\nmath.pi\nmath.sqrt(x)\nmath.log(x)\nmath.log10(x)\nmath.exp(x)\nmath.abs(x)\nmath.floor(x)\nmath.ceil(x)\nx^y","language":"lua"},{"title":"Real constants and functions","code":"Num.e     # e\nNum.pi    # pi\nx.sqrt    # square root\nx.log     # natural logarithm\nx.log10   # base 10 logarithm\nx.exp     # e raised to the power of x\nx.abs     # absolute value\nx.floor   # floor\nx.ceil    # ceiling\nx**y      # exponentiation","language":"ruby"},{"title":"Sorting algorithms/Bogosort","code":"import operator\nimport random\nfrom itertools import dropwhile, imap, islice, izip, repeat, starmap\n\ndef shuffled(x):\n    x = x[:]\n    random.shuffle(x)\n    return x\n\nbogosort = lambda l: next(dropwhile(\n    lambda l: not all(starmap(operator.le, izip(l, islice(l, 1, None)))),\n    imap(shuffled, repeat(l))))","language":"python"},{"title":"Sorting algorithms/Bogosort","code":"def shuffle(l)\n    l.sort_by { rand }\nend\n\ndef bogosort(l)\n    l = shuffle(l) until in_order(l)\n    l\nend\n\ndef in_order(l)\n    (0..l.length-2).all? {|i| l[i] <= l[i+1] }\nend","language":"ruby"},{"title":"Sorting algorithms/Bogosort","code":"def shuffle(l)\n    l.sort_by { rand }\nend\n\ndef bogosort(l)\n   l = shuffle(l) until l == l.sort\n   l\nend","language":"ruby"},{"title":"Sorting algorithms/Bogosort","code":"def in_order(l)\n    (0..l.length-2).all? {|i| l[i] <= l[i+1] }\nend\n\ndef bogosort(l)\n   l.shuffle! until in_order(l)\n   l\nend","language":"ruby"},{"title":"Sorting algorithms/Permutation sort","code":"#include <algorithm>\n\ntemplate<typename ForwardIterator>\n void permutation_sort(ForwardIterator begin, ForwardIterator end)\n{\n  while (std::next_permutation(begin, end))\n  {\n    // -- this block intentionally left empty --\n  }\n}","language":"cpp"},{"title":"Sorting algorithms/Permutation sort","code":"from itertools import permutations\n\nin_order = lambda s: all(x <= s[i+1] for i,x in enumerate(s[:-1]))\nperm_sort = lambda s: (p for p in permutations(s) if in_order(p)).next()","language":"python"},{"title":"Sorting algorithms/Permutation sort","code":"class Array\n  def permutationsort\n    permutation.each{|perm| return perm if perm.sorted?}\n  end\n  \n  def sorted?\n    each_cons(2).all? {|a, b| a <= b}\n  end\nend","language":"ruby"},{"title":"Greatest element of a list","code":"#include <assert.h>\n\nfloat max(unsigned int count, float values[]) {\n     assert(count > 0);\n     unsigned int idx;\n     float themax = values[0];\n     for(i = 1; i < count; ++i) {\n          themax = values[i] > themax ? values[i] : themax;\n     }\n     return themax;\n}","language":"c"},{"title":"Greatest element of a list","code":"#include <algorithm>\n#include <cassert>\n\ntemplate<typename Ty> Ty max(unsigned int count, Ty values[]) {\n     assert(count > 0);\n     return *std::max_element(values, values + count);\n}","language":"cpp"},{"title":"Greatest element of a list","code":"using System.Linq;\n\nvalues.Max();","language":"csharp"},{"title":"Greatest element of a list","code":"public static float max(float[] values) throws NoSuchElementException {\n    if (values.length == 0)\n        throw new NoSuchElementException();\n    float themax = values[0];\n    for (int idx = 1; idx < values.length; ++idx) {\n        if (values[idx] > themax)\n            themax = values[idx];\n    }\n    return themax;\n}","language":"java"},{"title":"Greatest element of a list","code":"public static float max(float[] values) throws NoSuchElementException {\n    if (values.length == 0)\n        throw new NoSuchElementException();\n    Arrays.sort(values);//sorts the values in ascending order\n    return values[values.length-1];\n}","language":"java"},{"title":"Greatest element of a list","code":"import java.util.List;\nimport java.util.Collections;\nimport java.util.Arrays;\n\npublic static <T extends Comparable<? super T>> T max(List<T> values) {\n    return Collections.max(values);\n}\n\npublic static <T extends Comparable<? super T>> T max(T[] values) {\n    return Collections.max(Arrays.asList(values));\n}","language":"java"},{"title":"Greatest element of a list","code":"def (best f seq)\n  if seq\n    ret winner car.seq\n      each elem cdr.seq\n        if (f elem winner)\n          winner <- elem\n\ndef (max ... args)\n  (best (>) args)","language":"python"},{"title":"Variadic function","code":"function printAll() {\n  for (var i=0; i<arguments.length; i++)\n    print(arguments[i])\n}\nprintAll(4, 3, 5, 6, 4, 3);\nprintAll(4, 3, 5);\nprintAll(\"Rosetta\", \"Code\", \"Is\", \"Awesome!\");","language":"javascript"},{"title":"Variadic function","code":"(() => {\n    'use strict';\n\n    // show :: a -> String\n    const show = x => JSON.stringify(x, null, 2);\n\n    // printAll [any] -> String\n    const printAll = (...a) => a.map(show)\n        .join('\\n');\n\n    return printAll(1, 2, 3, 2 + 2, \"five\", 6);\n})();","language":"javascript"},{"title":"Variadic function","code":"function printAll(separator,argv..) {\n  if(argv.length)\n    stdout.print(argv[0]);\n  for (var i=1; i < argv.length; i++)\n    stdout.print(separator, argv[i]);\n}\nprintAll(\" \", 4, 3, 5, 6, 4, 3);\nprintAll(\",\", 4, 3, 5);\nprintAll(\"! \",\"Rosetta\", \"Code\", \"Is\", \"Awesome\");","language":"javascript"},{"title":"Variadic function","code":"function varar(...)\n  for i, v in ipairs{...} do print(v) end\nend","language":"lua"},{"title":"Variadic function","code":"local runtime_array = {1, \"bla\", 5, \"end\"};\n\nvarar(unpack(runtime_array));","language":"lua"},{"title":"Variadic function","code":"def print_all(*things):\n    for x in things:\n        print x","language":"python"},{"title":"Variadic function","code":"print_all(4, 3, 5, 6, 4, 3)\nprint_all(4, 3, 5)\nprint_all(\"Rosetta\", \"Code\", \"Is\", \"Awesome!\")","language":"python"},{"title":"Variadic function","code":"def print_all(*things)\n  puts things\nend","language":"ruby"},{"title":"Variadic function","code":"print_all(4, 3, 5, 6, 4, 3)\nprint_all(4, 3, 5)\nprint_all(\"Rosetta\", \"Code\", \"Is\", \"Awesome!\")","language":"ruby"},{"title":"Variadic function","code":"func print_all(*things) {\n    things.each { |x| say x };\n}","language":"ruby"},{"title":"Variadic function","code":"print_all(4, 3, 5, 6, 4, 3);\nprint_all(4, 3, 5);\nprint_all(\"Rosetta\", \"Code\", \"Is\", \"Awesome!\");","language":"ruby"},{"title":"Power set","code":"public IEnumerable<IEnumerable<T>> GetPowerSet<T>(IEnumerable<T> input) {\n    var seed = new List<IEnumerable<T>>() { Enumerable.Empty<T>() }\n      as IEnumerable<IEnumerable<T>>;\n\n    return input.Aggregate(seed, (a, b) =>\n      a.Concat(a.Select(x => x.Concat(new List<T>() { b }))));\n  }","language":"csharp"},{"title":"Power set","code":"{\n \"[1,2,3] ->\":[[], [3], [2], [2, 3], [1], [1, 3], [1, 2], [1, 2, 3]],\n \"empty set ->\":[[]],\n \"set which contains only the empty set ->\":[[], [[]]]\n}","language":"JavaScript"},{"title":"Power set","code":"{\"[1,2,3] ->\":[[], [3], [2], [2, 3], [1], [1, 3], [1, 2], [1, 2, 3]], \n\"empty set ->\":[[]], \n\"set which contains only the empty set ->\":[[], [[]]]}","language":"JavaScript"},{"title":"Power set","code":"def powersetlist(s):\n    r = [[]]\n    for e in s:\n        print \"r: %-55r e: %r\" % (r,e)\n        r += [x+[e] for x in r]\n    return r\n\ns= [0,1,2,3]    \nprint \"\\npowersetlist(%r) =\\n  %r\" % (s, powersetlist(s))","language":"python"},{"title":"Power set","code":"def p(l):\n    if not l: return [[]]\n    return p(l[1:]) + [[l[0]] + x for x in p(l[1:])]","language":"python"},{"title":"Power set","code":"var arr = %w(a b c)\nfor i in (0 .. arr.len) {\n    say arr.combinations(i)\n}","language":"ruby"},{"title":"Null object","code":"#include <stdio.h>\n\nint main()\n{\n        char *object = 0;\n\n        if (object == NULL) {\n                puts(\"object is null\");\n        }\n        return 0;\n}","language":"c"},{"title":"Null object","code":"#include <iostream>\n#include <cstdlib>\nif (object == 0) {\n   std::cout << \"object is null\";\n}","language":"cpp"},{"title":"Null object","code":"#include <boost/optional.hpp>\n#include <iostream>\n\nboost::optional<int> maybeInt()\n\nint main()\n{\n  boost::optional<int> maybe = maybeInt();\n\n  if(!maybe)\n    std::cout << \"object is null\\n\";\n}","language":"cpp"},{"title":"Null object","code":"int *p = nullptr;\n...\nif (p == nullptr){\n  // do some thing\n}\n//or just\nif (p){\n  // do some thing\n}","language":"cpp"},{"title":"Null object","code":"Console.WriteLine(name ?? \"Name not specified\");\n\n//Without the null coalescing operator, this would instead be written as:\n//if(name == null){\n//        Console.WriteLine(\"Name not specified\");\n//}else{\n//        Console.WriteLine(name);\n//}","language":"csharp"},{"title":"Null object","code":"// here \"object\" is a reference\nif (object == null) {\n   System.out.println(\"object is null\");\n}","language":"java"},{"title":"Null object","code":"if (object === null) {\n  alert(\"object is null\");\n  // The object is nothing\n}\n\ntypeof null === \"object\"; // This stands since the beginning of JavaScript","language":"javascript"},{"title":"Null object","code":"x = None\nif x is None:\n  print \"x is None\"\nelse:\n  print \"x is not None\"","language":"python"},{"title":"Null object","code":"puts \"@object is nil\" if @object.nil?                # instance variable\n\nputs \"$object is nil\" if $object.nil?                # global variable, too\n\n# It recognizes as the local variable even if it isn't executed.\nobject = 1  if false\nputs \"object is nil\" if object.nil?\n\n# nil itself is an object:\nputs nil.class  # => NilClass","language":"ruby"},{"title":"Null object","code":"var undefined;         # initialized with an implicit nil\nsay undefined==nil;    # true\nsay defined(nil)       # false","language":"ruby"},{"title":"Null object","code":"var null_obj = null;        # initialize with a null value  \nsay null_obj.is_a(null);    # true\nsay defined(null_obj);      # true","language":"ruby"},{"title":"Zig-zag matrix","code":"[[0, 1, 5, 6, 14],\n [2, 4, 7, 13, 15],\n [3, 8, 12, 16, 21],\n [9, 11, 17, 20, 22],\n [10, 18, 19, 23, 24]]","language":"JavaScript"},{"title":"Zig-zag matrix","code":"[[0, 1, 5, 6, 14],\n [2, 4, 7, 13, 15],\n [3, 8, 12, 16, 21],\n [9, 11, 17, 20, 22],\n [10, 18, 19, 23, 24]]","language":"JavaScript"},{"title":"Zig-zag matrix","code":"[[0, 1, 5, 6, 14],\n [2, 4, 7, 13, 15],\n [3, 8, 12, 16, 21],\n [9, 11, 17, 20, 22],\n [10, 18, 19, 23, 24]]","language":"python"},{"title":"Zig-zag matrix","code":"def zigzag(n)\n  (seq=*0...n).product(seq)\n    .sort_by {|x,y| [x+y, (x+y).even? ? y : -y]}\n    .each_with_index.sort.map(&:last).each_slice(n).to_a\nend\n\ndef print_matrix(m)\n  format = \"%#{m.flatten.max.to_s.size}d \" * m[0].size\n  puts m.map {|row| format % row}\nend\n\nprint_matrix zigzag(5)","language":"ruby"},{"title":"Spiral matrix","code":"def spiral_matrix(n):\n    m = [[0] * n for i in range(n)]\n    dx, dy = [0, 1, 0, -1], [1, 0, -1, 0]\n    x, y, c = 0, -1, 1\n    for i in range(n + n - 1):\n        for j in range((n + n - i) // 2):\n            x += dx[i % 4]\n            y += dy[i % 4]\n            m[x][y] = c\n            c += 1\n    return m\nfor i in spiral_matrix(5): print(*i)","language":"python"},{"title":"Spiral matrix","code":"def spiral_matrix(n)\n  x, y, dx, dy = -1, 0, 0, -1\n  fmt = \"%#{(n*n-1).to_s.size}d \" * n\n  n.downto(1).flat_map{|x| [x, x-1]}.flat_map{|run|\n    dx, dy = -dy, dx                    # turn 90\n    run.times.map { [y+=dy, x+=dx] }\n  }.each_with_index.sort.map(&:last).each_slice(n){|row| puts fmt % row}\nend\n\nspiral_matrix(5)","language":"ruby"},{"title":"Monty Hall problem","code":"montyhall(1000, 3)\nObject {stayWins: \"349 34.9%\", switchWins: \"651 65.1%\"}\nmontyhall(1000, 4)\nObject {stayWins: \"253 25.3%\", switchWins: \"384 38.4%\"}\nmontyhall(1000, 5)\nObject {stayWins: \"202 20.2%\", switchWins: \"265 26.5%\"}","language":"javascript"},{"title":"Monty Hall problem","code":"Playing 10000 games\nWins when not switching door 3326\nWins when switching door 6630","language":"javascript"},{"title":"Active Directory/Connect","code":"#include <ldap.h>\n...\nchar *name, *password;\n...\nLDAP *ld = ldap_init(\"ldap.somewhere.com\", 389);\nldap_simple_bind_s(ld, name, password);\n... after done with it...\nldap_unbind(ld);","language":"C"},{"title":"Active Directory/Connect","code":"import ldap\n\nl = ldap.initialize(\"ldap://ldap.example.com\")\ntry:\n    l.protocol_version = ldap.VERSION3\n    l.set_option(ldap.OPT_REFERRALS, 0)\n\n    bind = l.simple_bind_s(\"me@example.com\", \"password\")\nfinally:\n    l.unbind()","language":"python"},{"title":"Active Directory/Connect","code":"require 'rubygems'\nrequire 'net/ldap'\nldap = Net::LDAP.new(:host => 'ldap.example.com', :base => 'o=companyname')\nldap.authenticate('bind_dn', 'bind_pass')","language":"ruby"},{"title":"Factorial","code":"long factorial(int n) {\n    long result = 1;\n    do { \n        result *= n;\n    while(--n);\n    return result;\n}","language":"c"},{"title":"Factorial","code":"int factorial(int n) {\n    return n == 0 ? 1 : n * factorial(n - 1);\n}\n\n/*Handles negative n, Abhishek Ghosh, 1st November 2017*/\n\nint factorialSafe(int n) {\n    return n<0 ? -1 : n == 0 ? 1 : n * factorialRec(n - 1);\n}","language":"c"},{"title":"Factorial","code":"function factorial(n) {\n  //check our edge case\n  if (n < 0) { throw \"Number must be non-negative\"; }\n\n  var sum = 1;\n  //we skip zero and one since both are 1 and are identity\n  while (n > 1) {\n    sum *= n;\n    n--;\n  }\n  return sum;\n}","language":"javascript"},{"title":"Factorial","code":"(function(x) {\n\n  var memo = {};\n\n  function factorial(n) {\n    return n < 2 ? 1 : memo[n] || (memo[n] = n * factorial(n - 1));\n  }\n  \n  return factorial(x);\n  \n})(18);","language":"JavaScript"},{"title":"Factorial","code":"function fact(n)\n  return n > 0 and n * fact(n-1) or 1\nend","language":"lua"},{"title":"Factorial","code":"function fact(n, acc)\n  acc = acc or 1\n  if n == 0 then\n    return acc\n  end\n  return fact(n-1, n*acc)\nend","language":"lua"},{"title":"Factorial","code":"fact = setmetatable({[0] = 1}, {\n  __call = function(t,n)\n    if n < 0 then return 0 end\n    if not t[n] then t[n] = n * t(n-1) end\n    return t[n]\n  end\n})","language":"Lua"},{"title":"Factorial","code":"#include <order/interpreter.h>\n\n#define ORDER_PP_DEF_8fac                     \\\nORDER_PP_FN(8fn(8N,                           \\\n                8if(8less_eq(8N, 0),          \\\n                    1,                        \\\n                    8mul(8N, 8fac(8dec(8N))))))\n\nORDER_PP(8to_lit(8fac(8)))    // 40320","language":"c"},{"title":"Factorial","code":"def factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result","language":"python"},{"title":"Factorial","code":"from operator import mul\nfrom functools import reduce\n\ndef factorial(n):\n    return reduce(mul, range(1,n+1), 1)","language":"python"},{"title":"Factorial","code":"def factorial(n):\n    z=1\n    if n>1:\n        z=n*factorial(n-1)\n    return z","language":"python"},{"title":"Factorial","code":"func factorial_reduce(n) {\n    1..n -> reduce({|a,b| a * b }, 1)\n}","language":"ruby"},{"title":"Factorial","code":"func factorial_iterative(n) {\n    var f = 1\n    {|i| f *= i } << 2..n\n    return f\n}","language":"ruby"},{"title":"Factorial","code":"def (fact n)\n  if (n = 0)\n    1\n    (n * (fact n-1))","language":"python"},{"title":"Factorial","code":"def (fact n)\n  (n * (fact n-1))\n\ndef (fact 0)\n  1","language":"python"},{"title":"Factorial","code":"def (fact n)\n  ret result 1\n    for i 1 (i <= n) ++i\n      result <- result*i","language":"python"},{"title":"Factorial","code":"# a useful helper to generate all the natural numbers until n\ndef (nums n)\n  collect+for i 1 (i <= n) ++i\n    yield i\n\ndef (fact n)\n  (reduce (*) nums.n 1)","language":"python"},{"title":"Web scraping","code":"var req = new XMLHttpRequest();\nreq.onload = function () {\n  var re = /[JFMASOND].+ UTC/; //beginning of month name to 'UTC'\n  console.log(this.responseText.match(re)[0]);\n};\nreq.open('GET', 'http://tycho.usno.navy.mil/cgi-bin/timer.pl', true);\nreq.send();","language":"javascript"},{"title":"Web scraping","code":"import urllib\npage = urllib.urlopen('http://tycho.usno.navy.mil/cgi-bin/timer.pl')\nfor line in page:\n    if ' UTC' in line:\n        print line.strip()[4:]\n        break\npage.close()","language":"python"},{"title":"Web scraping","code":"require \"open-uri\"\n\nopen('http://tycho.usno.navy.mil/cgi-bin/timer.pl') do |p|\n  p.each_line do |line|\n    if line =~ /UTC/\n      puts line.match(/ (\\d{1,2}:\\d{1,2}:\\d{1,2}) /)\n      break\n    end\n  end\nend","language":"ruby"},{"title":"Web scraping","code":"var ua = frequire('LWP::Simple');\nvar url = 'http://tycho.usno.navy.mil/cgi-bin/timer.pl';\nvar match = /<BR>(.+? UTC)/.match(ua.get(url));\nsay match[0] if match;","language":"ruby"},{"title":"Perfect numbers","code":"public static boolean perf(int n){\n        int sum= 0;\n        for(int i= 1;i < n;i++){\n                if(n % i == 0){\n                        sum+= i;\n                }\n        }\n        return sum == n;\n}","language":"java"},{"title":"Perfect numbers","code":"import java.math.BigInteger;\n\npublic static boolean perf(BigInteger n){\n        BigInteger sum= BigInteger.ZERO;\n        for(BigInteger i= BigInteger.ONE;\n        i.compareTo(n) < 0;i=i.add(BigInteger.ONE)){\n                if(n.mod(i).equals(BigInteger.ZERO)){\n                        sum= sum.add(i);\n                }\n        }\n        return sum.equals(n);\n}","language":"java"},{"title":"Perfect numbers","code":"function isPerfect(x)\n    local sum = 0\n    for i = 1, x-1 do\n        sum = (x % i) == 0 and sum + i or sum\n    end\n    return sum == x\nend","language":"Lua"},{"title":"Perfect numbers","code":"def perf(n):\n    sum = 0\n    for i in xrange(1, n):\n        if n % i == 0:\n            sum += i\n    return sum == n","language":"python"},{"title":"Perfect numbers","code":"def perf(n)\n  sum = 0\n  for i in 1...n\n    sum += i  if n % i == 0\n  end\n  sum == n\nend","language":"ruby"},{"title":"Perfect numbers","code":"def perf(n)\n  n == (1...n).select {|i| n % i == 0}.inject(:+)\nend","language":"ruby"},{"title":"Perfect numbers","code":"def perf(n)\n  divisors = []\n  for i in 1..Math.sqrt(n)\n    divisors << i << n/i  if n % i == 0\n  end\n  divisors.uniq.inject(:+) == 2*n\nend","language":"ruby"},{"title":"Perfect numbers","code":"for n in 1..10000\n  puts n if perf(n)\nend","language":"ruby"},{"title":"Perfect numbers","code":"func is_perfect(n) {\n    var sum = 0;\n    for i in (1 ..^ n) {\n        i.divides(n) && (sum += i);\n    }\n    sum == n;\n}\n \n10000.times { |i|\n    is_perfect(i) && say i;\n}","language":"ruby"},{"title":"Sequence of non-squares","code":"{\n    \"first22\":[2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15,\n               17, 18, 19, 20, 21, 22, 23, 24, 26, 27], \n    \"firstMillionNotSquare\":true\n}","language":"JavaScript"},{"title":"Sequence of non-squares","code":"func nonsqr(n) { 0.5 + n.sqrt -> floor + n }\n{|i| nonsqr(i) }.map(1..22).join(' ').say\n\n{ |i|\n  if (nonsqr(i).is_sqr) {\n     die \"Found a square in the sequence: #{i}\"\n  }\n} << 1..1e6","language":"ruby"},{"title":"Ackermann function","code":"int Ackermann(int m, int n)\n        {\n                if (!m) return n + 1;\n                if (!n) return Ackermann(m - 1, 1);\n                return Ackermann(m - 1, Ackermann(m, n - 1));\n        }\n        \n        int main(int m, int n)\n        {\n                return Ackermann(m, n);\n        }","language":"C"},{"title":"Ackermann function","code":"function ack(m, n) {\n return m === 0 ? n + 1 : ack(m - 1, n === 0  ? 1 : ack(m, n - 1));\n}","language":"javascript"},{"title":"Ackermann function","code":"function ack(M,N)\n    if M == 0 then return N + 1 end\n    if N == 0 then return ack(M-1,1) end\n    return ack(M-1,ack(M, N-1))\nend","language":"lua"},{"title":"Ackermann function","code":"#include <order/interpreter.h>\n\n#define ORDER_PP_DEF_8ack ORDER_PP_FN(    \\\n8fn(8X, 8Y,                               \\\n    8cond((8is_0(8X), 8inc(8Y))           \\\n          (8is_0(8Y), 8ack(8dec(8X), 1))  \\\n          (8else, 8ack(8dec(8X), 8ack(8X, 8dec(8Y)))))))\n\nORDER_PP(8to_lit(8ack(3, 4)))      // 125","language":"c"},{"title":"Ackermann function","code":"int ackermann(int m, n)\n{\n   if (m == 0)\n      return n + 1;\n   else if (m > 0 && n == 0)\n      return ackermann(m - 1, 1);\n   else\n      return ackermann( m - 1, ackermann(m, n - 1) );\n}","language":"java"},{"title":"Ackermann function","code":"def ack1(M, N):\n   return (N + 1) if M == 0 else (\n      ack1(M-1, 1) if N == 0 else ack1(M-1, ack1(M, N-1)))","language":"python"},{"title":"Ackermann function","code":"def ack2(M, N):\n    if M == 0:\n        return N + 1\n    elif N == 0:\n        return ack2(M - 1, 1)\n    else:\n        return ack2(M - 1, ack2(M, N - 1))","language":"python"},{"title":"Ackermann function","code":"def ack2(M, N):\n   return (N + 1)   if M == 0 else (\n          (N + 2)   if M == 1 else (\n          (2*N + 3) if M == 2 else (\n          (8*(2**N - 1) + 5) if M == 3 else (\n          ack2(M-1, 1) if N == 0 else ack2(M-1, ack2(M, N-1))))))","language":"python"},{"title":"Ackermann function","code":"def ack(m, n)\n  if m == 0\n    n + 1\n  elsif n == 0\n    ack(m-1, 1)\n  else\n    ack(m-1, ack(m, n-1))\n  end\nend","language":"ruby"},{"title":"Ackermann function","code":"(0..3).each do |m|\n  puts (0..6).map { |n| ack(m, n) }.join(' ')\nend","language":"ruby"},{"title":"Ackermann function","code":"func A(m, n) {\n    m == 0 ? (n + 1)\n           : (n == 0 ? (A(m - 1, 1))\n                     : (A(m - 1, A(m, n - 1))));\n}","language":"ruby"},{"title":"Ackermann function","code":"func A((0), n) { n + 1 }\nfunc A(m, (0)) { A(m - 1, 1) }\nfunc A(m,  n)  { A(m-1, A(m, n-1)) }","language":"ruby"},{"title":"Monte Carlo methods","code":"import numpy as np\n\nn = input('Number of samples: ')\nprint np.sum(np.random.rand(n)**2+np.random.rand(n)**2<1)/float(n)*4","language":"python"},{"title":"Monte Carlo methods","code":"func monteCarloPi(nthrows) {\n    4 * (^nthrows -> count_by {\n        hypot(1.rand(2) - 1, 1.rand(2) - 1) < 1\n    }) / nthrows\n}\n\nfor n in [1e2, 1e3, 1e4, 1e5, 1e6] {\n    printf(\"%9d: %07f\\n\", n, monteCarloPi(n))\n}","language":"ruby"},{"title":"Anagrams","code":"func main(file) {\n    file.open_r(\\var fh, \\var err) ->\n        || die \"Can't open file `#{file}' for reading: #{err}\\n\";\n\n    var vls = fh.words.group_by{.sort}.values;\n    var max = vls.map{.len}.max;\n    vls.grep{.len == max}.each{.join(\"\\t\").say};\n}\n\nmain(%f'/tmp/unixdict.txt');","language":"ruby"},{"title":"HTTP","code":"#include <Web/Web.h>\n\nusing namespace Upp;\n\nCONSOLE_APP_MAIN\n{\n        Cout() << HttpClient(\"www.rosettacode.org\").ExecuteRedirect();\n}","language":"cpp"},{"title":"HTTP","code":"var req = new XMLHttpRequest();\nreq.onload = function() {\n  console.log(this.responseText);\n};\n\nreq.open('get', 'http://rosettacode.org', true);\nreq.send()","language":"JavaScript"},{"title":"HTTP","code":"fetch('http://rosettacode.org').then(function(response) {\n  return response.text();\n}).then(function(myText) {\n  console.log(myText);\n});","language":"JavaScript"},{"title":"HTTP","code":"$.get('http://rosettacode.org', function(data) {\n  console.log(data);\n};","language":"JavaScript"},{"title":"HTTP","code":"require 'open-uri'\n\nprint open(\"http://rosettacode.org\") {|f| f.read}","language":"ruby"},{"title":"HTTP","code":"require 'fileutils'\nrequire 'open-uri'\n\nopen(\"http://rosettacode.org/\") {|f| FileUtils.copy_stream(f, $stdout)}","language":"ruby"},{"title":"Search a list","code":"haystack=[\"Zig\",\"Zag\",\"Wally\",\"Ronald\",\"Bush\",\"Krusty\",\"Charlie\",\"Bush\",\"Bozo\"]\n\nfor needle in (\"Washington\",\"Bush\"):\n  try:\n    print haystack.index(needle), needle\n  except ValueError, value_error:\n    print needle,\"is not in haystack\"","language":"python"},{"title":"Search a list","code":"haystack = %w(Zig Zag Wally Ronald Bush Krusty Charlie Bush Bozo)\n\n%w(Bush Washington).each do |needle|\n  if (i = haystack.index(needle))\n    puts \"#{i} #{needle}\"\n  else\n    raise \"#{needle} is not in haystack\\n\"\n  end\nend","language":"ruby"},{"title":"Search a list","code":"haystack.each do |item| \n  last = haystack.rindex(item)\n  if last > haystack.index(item)\n    puts \"#{item} last appears at index #{last}\"\n    break\n  end\nend\n#=> Bush last appears at index 7","language":"ruby"},{"title":"Search a list","code":"var haystack = %w(Zig Zag Wally Ronald Bush Krusty Charlie Bush Bozo);\n\n%w(Bush Washington).each { |needle|\n    var i = haystack.first_index{|item| item == needle};\n    if (i >= 0) {\n        say \"#{i} #{needle}\";\n    } else {\n        die \"#{needle} is not in haystack\";\n    }\n}","language":"ruby"},{"title":"Search a list","code":"def (pos x (seq | (head ... tail)) n)\n  default n :to 0\n  if seq\n    if (head = x)\n      n\n      (pos x tail n+1)","language":"python"},{"title":"Host introspection","code":"#include <stdio.h>\n#include <arpa/inet.h>\n\nint main()\n{\n  if (htonl(1) == 1)\n    printf(\"big endian\\n\");\n  else\n    printf(\"little endian\\n\");\n}","language":"c"},{"title":"Host introspection","code":"static void Main()\n{\n  Console.WriteLine(\"Word size = {0} bytes,\",sizeof(int));\n\n  if (BitConverter.IsLittleEndian)\n    Console.WriteLine(\"Little-endian.\");\n  else\n    Console.WriteLine(\"Big-endian.\");\n}","language":"csharp"},{"title":"Host introspection","code":"import java.nio.ByteOrder;\n\npublic class ShowByteOrder {\n    public static void main(String[] args) {\n        // Print \"BIG_ENDIAN\" or \"LITTLE_ENDIAN\".\n        System.out.println(ByteOrder.nativeOrder());\n    }\n}","language":"java"},{"title":"Host introspection","code":"# We assume that a Fixnum occupies one machine word.\n# Fixnum#size returns bytes (1 byte = 8 bits).\nword_size = 42.size * 8\nputs \"Word size: #{word_size} bits\"\n\n# Array#pack knows the native byte order. We pack 1 as a 16-bit integer,\n# then unpack bytes: [0, 1] is big endian, [1, 0] is little endian.\nbytes = [1].pack('S').unpack('C*')\nbyte_order = (bytes[0] == 0 ? 'big' : 'little') + ' endian'\nputs \"Byte order: #{byte_order}\"","language":"ruby"},{"title":"Polymorphic copy","code":"function clone(obj){\n    if (obj == null || typeof(obj) != 'object')\n        return obj;\n\n    var temp = {};\n    for (var key in obj)\n        temp[key] = clone(obj[key]);\n    return temp;\n}","language":"javascript"},{"title":"Polymorphic copy","code":"import cPickle as pickle\n\nsource = {'a': [1, 2.0, 3, 4+6j],\n         'b': ('string', u'Unicode string'),\n         'c': None}\n\ntarget = pickle.loads(pickle.dumps(source))","language":"python"},{"title":"Polymorphic copy","code":"target = source.__class__()  # Create an object of the same type\nif hasattr(source, 'items') and callable(source.items):\n    for key,value in source.items:\n        target[key] = value\nelif hasattr(source, '__len__'):\n    target = source[:]\nelse:  # Following is not recommended. (see below).\n    target = source","language":"python"},{"title":"Align columns","code":"input =\n[[Given$a$text$file$of$many$lines,$where$fields$within$a$line$\nare$delineated$by$a$single$'dollar'$character,$write$a$program\nthat$aligns$each$column$of$fields$by$ensuring$that$words$in$each$\ncolumn$are$separated$by$at$least$one$space.\nFurther,$allow$for$each$word$in$a$column$to$be$either$left$\njustified,$right$justified,$or$center$justified$within$its$column.]]\n\n\noutputLeft = alignColumn(input)\noutputRight = alignColumn(input, \"right\")\nalignColumn(input, \"center\", \"output.txt\")","language":"lua"},{"title":"Character codes","code":"#include <iostream>\n\nint main() {\n  std::cout << (int)'a' << std::endl; // prints \"97\"\n  std::cout << (char)97 << std::endl; // prints \"a\"\n  return 0;\n}","language":"cpp"},{"title":"Character codes","code":"public class Foo {\n    public static void main(String[] args) {\n        System.out.println((int)'a'); // prints \"97\"\n        System.out.println((char)97); // prints \"a\"\n    }\n}","language":"java"},{"title":"Character codes","code":"[23383, 128024].map(function (x) {\n        return String.fromCodePoint(x);\n})","language":"JavaScript"},{"title":"Character codes","code":"> ?a\n=> 97\n> \"a\"[0]\n=> 97\n> 97.chr\n=> \"a\"","language":"ruby"},{"title":"Character codes","code":"> \"a\".ord\n=> 97\n> 97.chr\n=> \"a\"","language":"ruby"},{"title":"Abstract type","code":"#ifndef SILLY_H\n#define SILLY_H\n#include \"intefaceAbs.h\"\n\ntypedef struct sillyStruct *Silly;\nextern Silly NewSilly( double, const char *);\nextern AbsCls Silly_Instance(void *); \n\n#endif","language":"c"},{"title":"Abstract type","code":"abstract class Class1\n{\n   public abstract void method1();\n\n   public int method2()\n   {\n      return 0;\n   }\n}","language":"csharp"},{"title":"Abstract type","code":"class Abs {\npublic:\n        virtual int method1(double value) = 0;\n        virtual int add(int a, int b){\n                return a+b;\n        }\n};","language":"cpp"},{"title":"Abstract type","code":"public abstract class Abs {\n    public abstract int method1(double value);\n    protected abstract int method2(String name);\n    int add(int a, int b) {\n        return a + b;\n    }\n}","language":"java"},{"title":"Abstract type","code":"public interface Inter {\n    int method1(double value);\n    int method2(String name);\n    int add(int a, int b);\n}","language":"java"},{"title":"Abstract type","code":"A = class()         -- New class A inherits BaseClass by default\nAA = A:class()      -- New class AA inherits from existing class A\nB = abstractClass() -- New abstract class B\nBB = B:class()      -- BB is not abstract\nA:new()             -- Okay: New class instance\nAA:new()            -- Okay: New class instance\nB:new()             -- Error: B is abstract\nBB:new()            -- Okay: BB is not abstract","language":"lua"},{"title":"Jensen's Device","code":"import java.util.function.*;\nimport java.util.stream.*;\n\npublic class Jensen {\n    static double sum(int lo, int hi, IntToDoubleFunction f) {\n        return IntStream.rangeClosed(lo, hi).mapToDouble(f).sum();\n    }\n        \n    public static void main(String args[]) {\n        System.out.println(sum(1, 100, (i -> 1.0/i)));\n    }\n}","language":"java"},{"title":"Jensen's Device","code":"var obj;\n\nfunction sum(o, lo, hi, term) {\n  var tmp = 0;\n  for (o.val = lo; o.val <= hi; o.val++)\n    tmp += term();\n  return tmp;\n}\n\nobj = {val: 0};\nalert(sum(obj, 1, 100, function() {return 1 / obj.val}));","language":"javascript"},{"title":"Jensen's Device","code":"function sum(var, a, b, str)\n  local ret = 0\n  for i = a, b do\n    ret = ret + setfenv(loadstring(\"return \"..str), {[var] = i})()\n  end\n  return ret\nend\nprint(sum(\"i\", 1, 100, \"1/i\"))","language":"Lua"},{"title":"Jensen's Device","code":"def sum(var, lo, hi, term, context)\n  sum = 0.0\n  lo.upto(hi) do |n|\n    sum += eval \"#{var} = #{n}; #{term}\", context\n  end\n  sum\nend\np sum \"i\", 1, 100, \"1.0 / i\", binding   # => 5.18737751763962","language":"ruby"},{"title":"Jensen's Device","code":"def sum2(lo, hi)\n  lo.upto(hi).inject(0.0) {|sum, n| sum += yield n}\nend\np sum2(1, 100) {|i| 1.0/i}  # => 5.18737751763962","language":"ruby"},{"title":"Jensen's Device","code":"var i;\nfunc sum (i, lo, hi, term) {\n    var temp = 0;\n    for (*i = lo; *i <= hi; (*i)++) {\n        temp += term.run;\n    };\n    return temp;\n};\nsay sum(\\i, 1, 100, { 1 / i });","language":"ruby"},{"title":"Sorting algorithms/Cocktail sort","code":"list = { 5, 6, 1, 2, 9, 14, 2, 15, 6, 7, 8, 97 }\ncocktailSort(list)\nfor i=1,#list do\n    print(list[i]j)\nend","language":"lua"},{"title":"Sorting algorithms/Cocktail sort","code":"def cocktailSort(A):\n    up = range(len(A)-1)\n    while True:\n        for indices in (up, reversed(up)):\n            swapped = False\n            for i in indices:\n                if A[i] > A[i+1]:  \n                    A[i], A[i+1] =  A[i+1], A[i]\n                    swapped = True\n            if not swapped:\n                return","language":"python"},{"title":"Sorting algorithms/Cocktail sort","code":"test1 = [7, 6, 5, 9, 8, 4, 3, 1, 2, 0]\ncocktailSort(test1)\nprint test1\n#>>> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\ntest2=list('big fjords vex quick waltz nymph')\ncocktailSort(test2)\nprint ''.join(test2)\n#>>>      abcdefghiijklmnopqrstuvwxyz","language":"python"},{"title":"Sorting algorithms/Cocktail sort","code":"ary = [7,6,5,9,8,4,3,1,2,0]\np ary.cocktailsort!\nary = [\"John\", \"Kate\", \"Zerg\", \"Alice\", \"Joe\", \"Jane\"]\np ary.cocktailsort!","language":"ruby"},{"title":"Sorting algorithms/Cocktail sort","code":"var numbers = [7,6,5,9,8,4,3,1,2,0]\nsay cocktailsort(numbers)\n\nvar strs = [\"John\", \"Kate\", \"Zerg\", \"Alice\", \"Joe\", \"Jane\"]\nsay cocktailsort(strs)","language":"ruby"},{"title":"Roots of a quadratic function","code":"#include <stdio.h>\n#include <math.h>\n#include <complex.h>\n\nvoid roots_quadratic_eq(double a, double b, double c, complex double *x)\n{\n  double delta;\n\n  delta = b*b - 4.0*a*c;\n  x[0] = (-b + csqrt(delta)) / (2.0*a);\n  x[1] = (-b - csqrt(delta)) / (2.0*a);\n}","language":"c"},{"title":"Palindrome detection","code":"#include <string.h>\n\nint palindrome(const char *s)\n{\n   int i,l;\n   l = strlen(s);\n   for(i=0; i<l/2; i++)\n   {\n     if ( s[i] != s[l-i-1] ) return 0; \n   }\n   return 1;\n}","language":"c"},{"title":"Palindrome detection","code":"int palindrome(const char *s)\n{\n   const char *t; /* t is a pointer that traverses backwards from the end */\n   for (t = s; *t != '\\0'; t++) ; t--; /* set t to point to last character */\n   while (s < t)\n   {\n     if ( *s++ != *t-- ) return 0; \n   }\n   return 1;\n}","language":"c"},{"title":"Palindrome detection","code":"int palindrome_r(const char *s, int b, int e)\n{\n   if ( (e - 1) <= b ) return 1;\n   if ( s[b] != s[e-1] ) return 0;\n   return palindrome_r(s, b+1, e-1);\n}","language":"c"},{"title":"Palindrome detection","code":"#include <string>\n#include <algorithm>\n\nbool is_palindrome(std::string const& s)\n{\n  return std::equal(s.begin(), s.end(), s.rbegin());\n}","language":"cpp"},{"title":"Palindrome detection","code":"#include <string>\n#include <algorithm>\n\nbool is_palindrome(std::string const& s)\n{\n  return std::equal(s.begin(), s.begin()+s.length()/2, s.rbegin());\n}","language":"cpp"},{"title":"Palindrome detection","code":"public static boolean pali(String testMe){\n        StringBuilder sb = new StringBuilder(testMe);\n        return testMe.equals(sb.reverse().toString());\n}","language":"java"},{"title":"Palindrome detection","code":"public static boolean rPali(String testMe){\n        if(testMe.length()<=1){\n                return true;\n        }\n        if(!(testMe.charAt(0)+\"\").equals(testMe.charAt(testMe.length()-1)+\"\")){\n                return false;\n        }\n        return rPali(testMe.substring(1, testMe.length()-1));\n}","language":"java"},{"title":"Palindrome detection","code":"function isPalindrome(str) {\n  return str === str.split(\"\").reverse().join(\"\");\n}\n\nconsole.log(isPalindrome(\"ingirumimusnocteetconsumimurigni\"));","language":"javascript"},{"title":"Palindrome detection","code":"def is_palindrome_r(s):\n  if len(s) <= 1:\n    return True\n  elif s[0] != s[-1]:\n    return False\n  else:\n    return is_palindrome_r(s[1:-1])","language":"python"},{"title":"Palindrome detection","code":"def test(f, good, bad):\n  assert all(f(x) for x in good)\n  assert not any(f(x) for x in bad)\n  print '%s passed all %d tests' % (f.__name__, len(good)+len(bad))\n\npals = ('', 'a', 'aa', 'aba', 'abba')\nnotpals = ('aA', 'abA', 'abxBa', 'abxxBa')\nfor ispal in is_palindrome, is_palindrome_r, is_palindrome_r2:\n  test(ispal, pals, notpals)","language":"python"},{"title":"Palindrome detection","code":"def palindrome?(s)\n  s == s.reverse\nend","language":"ruby"},{"title":"Palindrome detection","code":"def r_palindrome?(s)\n  if s.length <= 1\n    true\n  elsif s[0] != s[-1]\n    false\n  else\n    r_palindrome?(s[1..-2])\n  end\nend","language":"ruby"},{"title":"Palindrome detection","code":"func palindrome(s) {\n    s == s.reverse\n}","language":"ruby"},{"title":"Palindrome detection","code":"func palindrome(s) {\n    if (s.len <= 1) {\n        true\n    }\n    elsif (s.first != s.last) {\n        false\n    }\n    else {\n        __FUNC__(s.ft(1, -2))\n    }\n}","language":"ruby"},{"title":"Constrained genericity","code":"interface IEatable\n{\n    void Eat();\n}","language":"csharp"},{"title":"Constrained genericity","code":"using System.Collections.Generic;\n\nclass FoodBox<T> where T : IEatable\n{\n    List<T> food;\n}","language":"csharp"},{"title":"Constrained genericity","code":"class Apple : IEatable\n{\n    public void Eat()\n    {\n        System.Console.WriteLine(\"Apple has been eaten\");\n    }\n}","language":"csharp"},{"title":"Bitmap","code":"bitmap = Allocate_Bitmap( 100, 50 )\nFill_Bitmap( bitmap, { 15, 200, 80 } )\npixel = Get_Pixel( bitmap, 20, 25 )\nprint( pixel[1], pixel[2], pixel[3] )","language":"lua"},{"title":"Bitmap/Bézier curves/Quadratic","code":"void quad_bezier(\n        image img,\n        unsigned int x1, unsigned int y1,\n        unsigned int x2, unsigned int y2,\n        unsigned int x3, unsigned int y3,\n        color_component r,\n        color_component g,\n        color_component b );","language":"c"},{"title":"Bitmap/Write a PPM file","code":"#include \"imglib.h\"\n\nvoid output_ppm(FILE *fd, image img)\n{\n  unsigned int n;\n  (void) fprintf(fd, \"P6\\n%d %d\\n255\\n\", img->width, img->height);\n  n = img->width * img->height;\n  (void) fwrite(img->buf, sizeof(pixel), n, fd);\n  (void) fflush(fd);\n}","language":"c"},{"title":"Bitmap/PPM conversion through a pipe","code":"#include \"imglib.h\"\n\nint main()\n{\n      image img;\n      \n      img = alloc_img(100,100);\n      fill_img(img, 50, 20, 200);\n      draw_line(img, 0, 0, 80, 80, 255, 0, 0);\n      print_jpg(img, 75);\n      free_img(img);\n}","language":"c"},{"title":"Bitmap/Midpoint circle algorithm","code":"void raster_circle(\n        image img,\n        unsigned int x0,\n        unsigned int y0,\n        unsigned int radius,\n        color_component r,\n        color_component g,\n        color_component b );","language":"c"},{"title":"Bitmap/Bézier curves/Cubic","code":"void cubic_bezier(\n               image img,\n        unsigned int x1, unsigned int y1,\n        unsigned int x2, unsigned int y2,\n        unsigned int x3, unsigned int y3,\n        unsigned int x4, unsigned int y4,\n        color_component r,\n        color_component g,\n        color_component b );","language":"c"},{"title":"Grayscale image","code":"typedef unsigned char luminance;\ntypedef luminance pixel1[1];\ntypedef struct {\n   unsigned int width;\n   unsigned int height;\n   luminance *buf;\n} grayimage_t;\ntypedef grayimage_t *grayimage;\n\ngrayimage alloc_grayimg(unsigned int, unsigned int);\ngrayimage tograyscale(image);\nimage tocolor(grayimage);","language":"c"},{"title":"Grayscale image","code":"grayimage alloc_grayimg(unsigned int width, unsigned int height)\n{\n     grayimage img;\n     img = malloc(sizeof(grayimage_t));\n     img->buf = malloc(width*height*sizeof(pixel1));\n     img->width = width;\n     img->height = height;\n     return img;\n}","language":"c"},{"title":"Bitmap/Histogram","code":"typedef unsigned int histogram_t;\ntypedef histogram_t *histogram;\n\n#define GET_LUM(IMG, X, Y) ( (IMG)->buf[ (Y) * (IMG)->width + (X)][0] )\n\nhistogram get_histogram(grayimage im);\nluminance histogram_median(histogram h);","language":"c"},{"title":"Image convolution","code":"#!/bin/python\nfrom PIL import Image, ImageFilter\n\nif __name__==\"__main__\":\n        im = Image.open(\"test.jpg\")\n\n        kernelValues = [-2,-1,0,-1,1,1,0,1,2] #emboss\n        kernel = ImageFilter.Kernel((3,3), kernelValues)\n\n        im2 = im.filter(kernel)\n\n        im2.show()","language":"python"},{"title":"Median filter","code":"import Image, ImageFilter\nim = Image.open('image.ppm')\n\nmedian = im.filter(ImageFilter.MedianFilter(3))\nmedian.save('image2.ppm')","language":"python"},{"title":"Day of the week","code":"for (var year = 2008; year <= 2121; year++){\n    var xmas = new Date(year, 11, 25)\n    if ( xmas.getDay() === 0 )\n        console.log(year)\n}","language":"javascript"},{"title":"Day of the week","code":"require(\"date\")\n\nfor year=2008,2121 do\n   if date(year, 12, 25):getweekday() == 1 then\n      print(year)\n   end\nend","language":"Lua"},{"title":"Day of the week","code":"local dTab = {day = 25, month = 12}\nfor year = 2008, 2121 do\n    dTab.year = year\n    if os.date(\"%A\", os.time(dTab)) == \"Sunday\" then\n        print(year)\n    end\nend","language":"Lua"},{"title":"Day of the week","code":"from calendar import weekday, SUNDAY\n\n[year for year in range(2008, 2122) if weekday(year, 12, 25) == SUNDAY]","language":"python"},{"title":"String concatenation","code":"#include <string>\n#include <iostream>\n\nint main() {\n   std::string s = \"hello\";\n   std::cout << s << \" literal\" << std::endl;\n   std::string s2 = s + \" literal\";\n   std::cout << s2 << std::endl;\n   return 0;\n}","language":"cpp"},{"title":"String concatenation","code":"using System;\n\nclass Program {\n    static void Main(string[] args) {\n        var s = \"hello\";\n        Console.Write(s);\n        Console.WriteLine(\" literal\");\n        var s2 = s + \" literal\";\n        Console.WriteLine(s2);\n    }\n}","language":"csharp"},{"title":"String concatenation","code":"a = \"hello \"\nprint(a .. \"world\")\nc = a .. \"world\"\nprint(c)","language":"lua"},{"title":"String concatenation","code":"s1 = \"hello\"\nprint s1 + \" world\"\n\ns2 = s1 + \" world\"\nprint s2","language":"python"},{"title":"String concatenation","code":"s1 = \"hello\"\nprint \", \".join([s1, \"world\", \"mom\"])\n\ns2 = \", \".join([s1, \"world\", \"mom\"])\nprint s2","language":"python"},{"title":"String concatenation","code":"s = \"hello\"\np s + \" literal\"        #=> \"hello literal\"\ns1 = s + \" literal\"\np s1                    #=> \"hello literal\"\ns1 << \" another\" # append to s1\np s1                    #=> \"hello literal another\"\n\ns = \"hello\"\np s.concat(\" literal\")  #=> \"hello literal\"\np s                     #=> \"hello literal\"","language":"ruby"},{"title":"String concatenation","code":"var s = 'hello';\nsay s+' literal';\nvar s1 = s+' literal';\nsay s1;","language":"ruby"},{"title":"Bitwise IO","code":"import sys\nimport bitio\n\no = bitio.BitWriter(sys.stdout)\nc = sys.stdin.read(1)\nwhile len(c) > 0:\n    o.writebits(ord(c), 7)\n    c = sys.stdin.read(1)","language":"python"},{"title":"Bitwise IO","code":"import sys\nimport bitio\n\nr = bitio.BitReader(sys.stdin)\nwhile True:\n    x = r.readbits(7)\n    if not r.read:  # nothing read\n        break\n    sys.stdout.write(chr(x))","language":"python"},{"title":"Environment variables","code":"#include <stdlib.h>\n#include <stdio.h>\n\nint main() {\n  puts(getenv(\"HOME\"));\n  return 0;\n}","language":"c"},{"title":"Environment variables","code":"using System;\n\nnamespace RosettaCode {\n    class Program {\n        static void Main() {\n            string temp = Environment.GetEnvironmentVariable(\"TEMP\");\n            Console.WriteLine(\"TEMP is \" + temp);\n        }\n    }\n}","language":"csharp"},{"title":"Environment variables","code":"#include <cstdlib>\n#include <cstdio>\n\nint main()\n{\n   puts(getenv(\"HOME\"));\n   return 0;\n}","language":"cpp"},{"title":"Environment variables","code":"var shell = new ActiveXObject(\"WScript.Shell\");\nvar env = shell.Environment(\"PROCESS\");\nWScript.echo('SYSTEMROOT=' + env.item('SYSTEMROOT'));","language":"javascript"},{"title":"Hello world/Standard error","code":"#include <stdio.h>\n\nint main()\n{\n        fprintf(stderr, \"Goodbye, \");\n        fputs(\"World!\\n\", stderr);\n\n        return 0;\n}","language":"c"},{"title":"Hello world/Standard error","code":"static class StdErr\n{\n    static void Main(string[] args)\n    {\n        Console.Error.WriteLine(\"Goodbye, World!\");\n    }\n}","language":"csharp"},{"title":"Hello world/Standard error","code":"#include <iostream>\n\nint main() {\n  std::cerr << \"Goodbye, World!\\n\";\n}","language":"cpp"},{"title":"Hello world/Standard error","code":"public class Err{\n   public static void main(String[] args){\n      System.err.println(\"Goodbye, World!\");\n   }\n}","language":"java"},{"title":"Hello world/Standard error","code":"import sys\n\nprint >> sys.stderr, \"Goodbye, World!\"","language":"python"},{"title":"Hello world/Standard error","code":"import sys\n\nprint(\"Goodbye, World!\", file=sys.stderr)","language":"python"},{"title":"Hello world/Standard error","code":"import sys\n\nsys.stderr.write(\"Goodbye, World!\\n\")","language":"python"},{"title":"Non-decimal radices/Output","code":"#include <stdio.h>\n\nint main()\n{\n  int i;\n\n  for(i=1; i <= 33; i++)\n    printf(\"%6d %6x %6o\\n\", i, i, i);\n\n  return 0;\n}","language":"c"},{"title":"Non-decimal radices/Output","code":"#include <iostream>\n#include <iomanip>\n\nint main()\n{\n  for (int i = 0; i <= 33; i++)\n    std::cout << std::setw(6) << std::dec << i << \" \"\n              << std::setw(6) << std::hex << i << \" \"\n              << std::setw(6) << std::oct << i << std::endl;\n\n  return 0;\n}","language":"cpp"},{"title":"Non-decimal radices/Output","code":"var bases = [2, 8, 10, 16, 24];\nfor (var n = 0; n <= 33; n++) {\n    var row = [];\n    for (var i = 0; i < bases.length; i++)\n        row.push( n.toString(bases[i]) );\n    print(row.join(', '));\n}","language":"javascript"},{"title":"Non-decimal radices/Output","code":"for i = 1, 33 do\n    print( string.format( \"%o \\t %d \\t %x\", i, i, i ) )\nend","language":"lua"},{"title":"Non-decimal radices/Output","code":"n = 33\n#Python 3.x:\nprint(bin(n), oct(n), n, hex(n)) # bin() only available in Python 3.x and 2.6\n# output: 0b100001 0o41 33 0x21\n\n#Python 2.x:\n#print oct(n), n, hex(n)\n# output: 041 33 0x21","language":"python"},{"title":"Non-decimal radices/Output","code":"for n in 0..33\n  puts \" %6b %3o %2d %2X\" % [n, n, n, n]\nend\nputs\n[2,8,10,16,36].each {|i| puts \" 100.to_s(#{i}) => #{100.to_s(i)}\"}","language":"ruby"},{"title":"Non-decimal radices/Output","code":"range(0, 33).each { |n|\n    printf(\" %6b %3o %2d %2X\\n\", ([n]*4)...);\n}","language":"ruby"},{"title":"Assertions","code":"using System.Diagnostics;\n\nDebug.Assert(a == 42);","language":"csharp"},{"title":"Assertions","code":"a = 5\n#...input or change a here\nassert a == 42 # throws an AssertionError when a is not 42\nassert a == 42, \"Error message\" # throws an AssertionError\n       # when a is not 42 with \"Error message\" for the message\n       # the error message can be any expression","language":"python"},{"title":"Assertions","code":"require \"test/unit/assertions\"\ninclude Test::Unit::Assertions\n\nn = 5\nbegin\n  assert_equal(42, n)\nrescue Exception => e\n  # Ruby 1.8: e is a Test::Unit::AssertionFailedError\n  # Ruby 1.9: e is a MiniTest::Assertion\n  puts e\nend","language":"ruby"},{"title":"File input/output","code":"using System.IO;\n\nusing (var reader = new StreamReader(\"input.txt\"))\nusing (var writer = new StreamWriter(\"output.txt\"))\n{\n    var text = reader.ReadToEnd();\n    writer.Write(text);\n}","language":"csharp"},{"title":"File input/output","code":"using System.IO;\n\nvar text = File.ReadAllText(\"input.txt\");\nFile.WriteAllText(\"output.txt\", text);","language":"csharp"},{"title":"File input/output","code":"# include <algorithm>\n# include <fstream>\n\nint main() {\n  std::ifstream ifile(\"input.txt\");\n  std::ofstream ofile(\"output.txt\");\n  std::copy(std::istreambuf_iterator<char>(ifile),\n            std::istreambuf_iterator<char>(),\n            std::ostreambuf_iterator<char>(ofile));\n}","language":"cpp"},{"title":"File input/output","code":"#include <fstream>\n\nint main()\n{\n  std::ifstream input(\"input.txt\");\n  std::ofstream output(\"output.txt\");\n  output << input.rdbuf();\n}","language":"cpp"},{"title":"File input/output","code":"inFile  = io.open(\"input.txt\", \"r\")\ndata = inFile:read(\"*all\") -- may be abbreviated to \"*a\";\n                           -- other options are \"*line\", \n                           -- or the number of characters to read.\ninFile:close()\n\noutFile = io.open(\"output.txt\", \"w\")\noutfile:write(data)\noutfile:close()\n\n-- Oneliner version:\nio.open(\"output.txt\", \"w\"):write(io.open(\"input.txt\", \"r\"):read(\"*a\"))","language":"lua"},{"title":"File input/output","code":"infile = open('input.txt', 'r')\noutfile = open('output.txt', 'w')\nfor line in infile:\n   outfile.write(line)\noutfile.close()\ninfile.close()","language":"python"},{"title":"File input/output","code":"import sys\ntry:\n    with open('input.txt') as infile:\n        with open('output.txt', 'w') as outfile:\n            for line in infile:\n                outfile.write(line)\nexcept IOError:\n    print >> sys.stderr, \"Some I/O Error occurred\"\n    sys.exit(1)","language":"python"},{"title":"File input/output","code":"# Only if 'input.txt' is a text file!\n# Only if pipe '|' is not first character of path!\nstr = IO.read('input.txt')\nopen('output.txt', 'w') {|f| f.write str}","language":"ruby"},{"title":"File input/output","code":"var in = %f'input.txt'.open_r;\nvar out = %f'output.txt'.open_w;\n\nin.each { |line|\n    out.print(line);\n};","language":"ruby"},{"title":"Window creation","code":"#include <QApplication>\n#include <QMainWindow>\n\nint main(int argc, char *argv[])\n{\n QApplication app(argc, argv);\n QMainWindow window;\n window.show();\n return app.exec();\n}","language":"cpp"},{"title":"Window creation","code":"import javax.swing.JFrame;\n\npublic class Main {\n     public static void main(String[] args) throws Exception {\n         JFrame w = new JFrame(\"Title\");\n         w.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n         w.setSize(800,600);\n         w.setVisible(true);\n     }\n}","language":"java"},{"title":"Window creation","code":"local iup = require \"iuplua\"\n\niup.dialog{\n  title = \"Window\";\n  iup.vbox{\n    margin = \"10x10\";\n    iup.label{title = \"A window\"}\n  }\n}:show()\n\niup.MainLoop()","language":"lua"},{"title":"Window creation","code":"import Tkinter\n  \n  w = Tkinter.Tk()\n  w.mainloop()","language":"python"},{"title":"Window creation","code":"from wxPython.wx import *\n  \n  class MyApp(wxApp):\n    def OnInit(self):\n      frame = wxFrame(NULL, -1, \"Hello from wxPython\")\n      frame.Show(true)\n      self.SetTopWindow(frame)\n      return true\n  \n  app = MyApp(0)\n  app.MainLoop()","language":"python"},{"title":"Window creation","code":"import win32ui\n  from pywin.mfc.dialog import Dialog\n  \n  d = Dialog(win32ui.IDD_SIMPLE_INPUT)\n  d.CreateWindow()","language":"python"},{"title":"Window creation","code":"import gtk\n  \n  window = gtk.Window()\n  window.show()\n  gtk.main()","language":"python"},{"title":"Window creation","code":"from PyQt4.QtGui import *\n\n  app = QApplication([])\n  win = QWidget()\n  win.show()\n\n  app.exec_()","language":"python"},{"title":"Window creation","code":"require 'tk'\n \n window = TkRoot::new()\n window::mainloop()","language":"ruby"},{"title":"Window creation","code":"require 'gtk2'\n \n window = Gtk::Window.new.show\n Gtk.main","language":"ruby"},{"title":"Window creation","code":"var tk = require('Tk');\n%s'MainWindow'.new;\ntk.MainLoop;","language":"ruby"},{"title":"Window creation","code":"var gtk2 = require('Gtk2') -> init;\nvar window = %s'Gtk2::Window'.new;\nwindow.signal_connect(destroy => func(*_) { gtk2.main_quit });\nwindow.show_all;\ngtk2.main;","language":"ruby"},{"title":"Empty program","code":"main()\n{\n  return 0;\n}","language":"c"},{"title":"Empty program","code":"public class EmptyApplet extends java.applet.Applet {\n    @Override public void init() {\n    }\n}","language":"java"},{"title":"Empty program","code":"public class EmptyMainClass {\n    public static void main(String... args) {\n    }\n}","language":"java"},{"title":"Empty program","code":"public class EmptyMainClass {\n    public static void main(String[] args) {\n    }\n}","language":"java"},{"title":"Empty program","code":"public class EmptyApplet extends java.applet.Applet {\n    public void init() {\n    }\n}","language":"java"},{"title":"Determine if a string is numeric","code":"#include <ctype.h>\n#include <stdlib.h>\nint isNumeric (const char * s)\n{\n    if (s == NULL || *s == '\\0' || isspace(*s))\n      return 0;\n    char * p;\n    strtod (s, &p);\n    return *p == '\\0';\n}","language":"c"},{"title":"Determine if a string is numeric","code":"bool isNumeric(const std::string& input) {\n    return std::all_of(input.begin(), input.end(), ::isdigit);\n}","language":"cpp"},{"title":"Determine if a string is numeric","code":"public static bool IsNumeric(string s)\n{\n  try\n  {\n    Double.Parse(s);\n    return true;\n  }\n  catch\n  {\n    return false;\n  }\n}","language":"csharp"},{"title":"Determine if a string is numeric","code":"public boolean isNumeric(String input) {\n  try {\n    Integer.parseInt(input);\n    return true;\n  }\n  catch (NumberFormatException e) {\n    // s is not numeric\n    return false;\n  }\n}","language":"java"},{"title":"Determine if a string is numeric","code":"private static final boolean isNumeric(final String s) {\n  if (s == null || s.isEmpty()) return false;\n  for (int x = 0; x < s.length(); x++) {\n    final char c = s.charAt(x);\n    if (x == 0 && (c == '-')) continue;  // negative\n    if ((c >= '0') && (c <= '9')) continue;  // 0 - 9\n    return false; // invalid\n  }\n  return true; // valid\n}","language":"java"},{"title":"Determine if a string is numeric","code":"public static boolean isNumeric(String inputData) {\n  return inputData.matches(\"[-+]?\\\\d+(\\\\.\\\\d+)?\");\n}","language":"java"},{"title":"Determine if a string is numeric","code":"public static boolean isNumeric(String inputData) {\n  NumberFormat formatter = NumberFormat.getInstance();\n  ParsePosition pos = new ParsePosition(0);\n  formatter.parse(inputData, pos);\n  return inputData.length() == pos.getIndex();\n}","language":"java"},{"title":"Determine if a string is numeric","code":"public static boolean isNumeric(String inputData) {\n  Scanner sc = new Scanner(inputData);\n  return sc.hasNextInt();\n}","language":"java"},{"title":"Determine if a string is numeric","code":"if tonumber(a) ~= nil then\n   --it's a number\nend;","language":"lua"},{"title":"Determine if a string is numeric","code":"def is_numeric(s):\n    try:\n        float(s)\n        return True\n    except (ValueError, TypeError):\n        return False\n\nis_numeric('123.0')","language":"python"},{"title":"Determine if a string is numeric","code":"def is_numeric?(s)\n  begin\n    Float(s)\n  rescue\n    false # not numeric\n  else\n    true # numeric\n  end\nend","language":"ruby"},{"title":"Determine if a string is numeric","code":"def is_numeric?(s)\n    !!Float(s) rescue false\nend","language":"ruby"},{"title":"Determine if a string is numeric","code":"strings = %w(0 0.0 -123 abc 0x10 0xABC 123a -123e3 0.1E-5 50e)\nstrings.each do |str|\n  puts \"%9p => %s\" % [str, is_numeric?(str)]\nend","language":"ruby"},{"title":"Determine if a string is numeric","code":"var strings = %w(0 0.0 -123 abc 0x10 0xABC 123a -123e3 0.1E-5 50e);\nfor str in strings {\n    say (\"%9s => %s\" % (str, is_numeric(str)))\n}","language":"ruby"},{"title":"Sorting algorithms/Bubble sort","code":"if (comparable[a].compareTo(comparable[b]) < 0){\n   //same swap code as before\n}","language":"java"},{"title":"Sorting algorithms/Bubble sort","code":"var my_arr = [\"G\", \"F\", \"C\", \"A\", \"B\", \"E\", \"D\"];\nmy_arr.bubblesort();\nprint(my_arr);","language":"javascript"},{"title":"Sorting algorithms/Bubble sort","code":"list = { 5, 6, 1, 2, 9, 14, 2, 15, 6, 7, 8, 97 }\nbubbleSort(list)\nfor i, j in pairs(list) do\n    print(j)\nend","language":"lua"},{"title":"Towers of Hanoi","code":"public void move(int n, int from, int to, int via) {\n  if (n == 1) {\n    System.out.println(\"Move disk from pole \" + from + \" to pole \" + to);\n  } else {\n    move(n - 1, from, via, to);\n    move(1, from, to, via);\n    move(n - 1, via, to, from);\n  }\n}","language":"java"},{"title":"Towers of Hanoi","code":"function move(n, a, b, c) {\n  if (n > 0) {\n    move(n-1, a, c, b);\n    console.log(\"Move disk from \" + a + \" to \" + c);\n    move(n-1, b, a, c);\n  }\n}\nmove(4, \"A\", \"B\", \"C\");","language":"javascript"},{"title":"Towers of Hanoi","code":"[\"left -> right\", \"left -> mid\",\n \"right -> mid\", \"left -> right\", \n \"mid -> left\", \"mid -> right\", \n \"left -> right\"]","language":"JavaScript"},{"title":"Towers of Hanoi","code":"function move(n, src, dst, via)\n    if n > 0 then\n        move(n - 1, src, via, dst)\n        print(src, 'to', dst)\n        move(n - 1, via, dst, src)\n    end\nend\n\nmove(4, 1, 2, 3)","language":"Lua"},{"title":"Towers of Hanoi","code":"proc hanoi(disks: int, fromTower: string, toTower: string, viaTower: string) =\n  if disks != 0:\n    hanoi(disks - 1, fromTower, viaTower, toTower)\n    echo(\"Move disk \", disks, \" from \", fromTower, \" to \", toTower)\n    hanoi(disks - 1, viaTower, toTower, fromTower)\n    \nhanoi(4, \"1\", \"2\", \"3\")","language":"Python"},{"title":"Towers of Hanoi","code":"def hanoi(ndisks, startPeg=1, endPeg=3):\n    if ndisks:\n        hanoi(ndisks-1, startPeg, 6-startPeg-endPeg)\n        print \"Move disk %d from peg %d to peg %d\" % (ndisks, startPeg, endPeg)\n        hanoi(ndisks-1, 6-startPeg-endPeg, endPeg)\n\nhanoi(ndisks=4)","language":"python"},{"title":"Towers of Hanoi","code":"func hanoi(n, from=1, to=2, via=3) {\n    if (n == 1) {\n        say \"Move disk from pole #{from} to pole #{to}.\";\n    } else {\n        hanoi(n-1, from, via,   to);\n        hanoi(  1, from,  to,  via);\n        hanoi(n-1,  via,  to, from);\n    }\n}\n\nhanoi(4);","language":"ruby"},{"title":"Collections","code":"int* ar;                  /* Collection<Integer> ar; */\nint arSize;\narSize = (rand() % 6) + 1; \nar = calloc(arSize, sizeof(int) ); /* ar = new ArrayList<Integer>(arSize); */\nar[0] = 1;                /* ar.set(0, 1); */\n\nint* p;                   /* Iterator<Integer> p; Integer pValue; */\nfor (p=ar;                /* p=ar.itereator(); for( pValue=p.next(); */\n       p<(ar+arSize);     /*                         p.hasNext(); */\n       p++) {             /*                         pValue=p.next() ) { */\n  printf(\"%d\\n\",*p);      /*   System.out.println(pValue); */\n}                         /* }    */","language":"c"},{"title":"Collections","code":"#include <vector>\n\nstd::vector<int> v;       // empty vector\nv.push_back(5);           // insert a 5 at the end\nv.insert(v.begin(), 7);   // insert a 7 at the beginning","language":"cpp"},{"title":"Collections","code":"#include <deque>\n\nstd::deque<int> d;        // empty deque\nd.push_back(5);           // insert a 5 at the end\nd.push_front(7);          // insert a 7 at the beginning\nd.insert(v.begin()+1, 6); // insert a 6 in the middle","language":"cpp"},{"title":"Collections","code":"#include <list>\n\nstd::list<int> l;         // empty list\nl.push_back(5);           // insert a 5 at the end\nl.push_front(7);          // insert a 7 at the beginning\nstd::list::iterator i = l.begin();\n++l;\nl.insert(i, 6);           // insert a 6 in the middle","language":"cpp"},{"title":"Collections","code":"#include <set>\n\nstd::set<int> s;          // empty set\ns.insert(5);              // insert a 5\ns.insert(7);              // insert a 7 (automatically placed after the 5)\ns.insert(5);              // try to insert another 5 (will not change the set)","language":"cpp"},{"title":"Collections","code":"// Creates and initializes a new integer Array\nint[] intArray = new int[5] { 1, 2, 3, 4, 5 };\n//same as\nint[] intArray = new int[]{ 1, 2, 3, 4, 5 };\n//same as\nint[] intArray = { 1, 2, 3, 4, 5 };\n\n//Arrays are zero-based\nstring[] stringArr = new string[5];\nstringArr[0] = \"string\";","language":"csharp"},{"title":"Collections","code":"//Create and initialize ArrayList\nArrayList myAl = new ArrayList { \"Hello\", \"World\", \"!\" };\n\n//Create ArrayList and add some values\nArrayList myAL = new ArrayList();\n      myAL.Add(\"Hello\");\n      myAL.Add(\"World\");\n      myAL.Add(\"!\");","language":"csharp"},{"title":"Collections","code":"//Create and initialize List\nList<string> myList = new List<string> { \"Hello\", \"World\", \"!\" };\n\n//Create List and add some values\nList<string> myList2 = new List<string>();\n            myList2.Add(\"Hello\");\n            myList2.Add(\"World\");\n            myList2.Add(\"!\");","language":"csharp"},{"title":"Collections","code":"//Create an initialize Hashtable\nHashtable myHt = new Hashtable() { { \"Hello\", \"World\" }, { \"Key\", \"Value\" } };\n\n//Create Hashtable and add some Key-Value pairs.\nHashtable myHt2 = new Hashtable();\n        myHt2.Add(\"Hello\", \"World\");\n        myHt2.Add(\"Key\", \"Value\");","language":"csharp"},{"title":"Collections","code":"var array = [];\narray.push('abc');\narray.push(123);\narray.push(new MyClass);\nconsole.log( array[2] );","language":"javascript"},{"title":"Collections","code":"var obj = {};\nobj['foo'] = 'xyz'; //equivalent to: obj.foo = 'xyz';\nobj['bar'] = new MyClass; //equivalent to: obj.bar = new MyClass;\nobj['1x; ~~:-b'] = 'text'; //no equivalent\nconsole.log(obj['1x; ~~:-b']);","language":"javascript"},{"title":"Collections","code":"collection = {0, '1'}\nprint(collection[1]) -- prints 0\n\ncollection = {[\"foo\"] = 0, [\"bar\"] = '1'} -- a collection of key/value pairs\nprint(collection[\"foo\"]) -- prints 0\nprint(collection.foo) -- syntactic sugar, also prints 0\n\ncollection = {0, '1', [\"foo\"] = 0, [\"bar\"] = '1'}","language":"lua"},{"title":"Collections","code":"# creating an empty array and adding values\na = []              #=> []\na[0] = 1            #=> [1]\na[3] = \"abc\"        #=> [1, nil, nil, \"abc\"]\na << 3.14           #=> [1, nil, nil, \"abc\", 3.14]\n\n# creating an array with the constructor\na = Array.new               #=> []\na = Array.new(3)            #=> [nil, nil, nil]\na = Array.new(3, 0)         #=> [0, 0, 0]\na = Array.new(3){|i| i*2}   #=> [0, 2, 4]","language":"ruby"},{"title":"Collections","code":"# creating an empty array and adding values\nvar a = []          #=> []\na[0] = 1            #=> [1]\na[3] = \"abc\"        #=> [1, nil, nil, \"abc\"]\na << 3.14           #=> [1, nil, nil, \"abc\", 3.14]","language":"ruby"},{"title":"Collections","code":"# creating an empty hash\nvar h = Hash()    #=> Hash()\nh{:foo} = 1       #=> Hash(\"foo\"=>1)\nh{:bar} = 2.4     #=> Hash(\"foo\"=>1, \"bar\"=>2.4)\nh{:bar} += 3      #=> Hash(\"foo\"=>1, \"bar\"=>5.4)","language":"ruby"},{"title":"Hash from two arrays","code":"for( int i = 0; i < arg_length; i++ ){\n  h[ arg_keys[i] ] = arg_values[i]; \n}","language":"csharp"},{"title":"Hash from two arrays","code":"import java.util.HashMap;\npublic static void main(String[] args){\n        String[] keys= {\"a\", \"b\", \"c\"};\n        int[] vals= {1, 2, 3};\n        HashMap<String, Integer> hash= new HashMap<String, Integer>();\n\n        for(int i= 0; i < keys.length; i++){\n           hash.put(keys[i], vals[i]);\n        }\n}","language":"java"},{"title":"Hash from two arrays","code":"var keys = ['a', 'b', 'c'];\nvar values = [1, 2, 3];\nvar map = {};\nfor(var i = 0; i < keys.length; i += 1) {\n  map[ keys[i] ] = values[i];\n}","language":"javascript"},{"title":"Hash from two arrays","code":"function arrToObj(keys, vals) {\n  var map = {};\n  keys.forEach(function (key, index) {\n    map[key] = val[index];\n  });\n  return map;\n}","language":"javascript"},{"title":"Hash from two arrays","code":"function arrToObj(keys, vals) {\n  return keys.reduce(function(map, key, index) {\n    map[key] = vals[index];\n    return map;\n  }, {});\n}","language":"javascript"},{"title":"Hash from two arrays","code":"function(keys,values)\n  local t = {}\n  for i=1, #keys do\n    t[keys[i]] = values[i]\n  end\nend","language":"lua"},{"title":"Hash from two arrays","code":"keys = ['a', 'b', 'c']\nvalues = [1, 2, 3]\nhash = {key: value for key, value in zip(keys, values)}","language":"python"},{"title":"Hash from two arrays","code":"keys = ['a', 'b', 'c']\nvalues = [1, 2, 3]\nhash = dict(zip(keys, values))\n\n# Lazily, Python 2.3+, not 3.x:\nfrom itertools import izip\nhash = dict(izip(keys, values))","language":"python"},{"title":"Hash from two arrays","code":"keys = ['a', 'b', 'c']\nvalues = [1, 2, 3]\nhash = {}\nfor k,v in zip(keys, values):\n    hash[k] = v","language":"python"},{"title":"Hash from two arrays","code":"keys = ['hal',666,[1,2,3]]\nvals = ['ibm','devil',123]\n\nhash = Hash[keys.zip(vals)]\n\np hash  # => {\"hal\"=>\"ibm\", 666=>\"devil\", [1, 2, 3]=>123}\n\n#retrieve the value linked to the key [1,2,3]\nputs hash[ [1,2,3] ]  # => 123","language":"ruby"},{"title":"Hash from two arrays","code":"class Array\n  def zip_hash(other)\n    Hash[self.zip(other)]\n  end\nend\n\nhash = %w{ a b c }.zip_hash( %w{ 1 2 3 } )\np hash  # => {\"a\"=>\"1\", \"b\"=>\"2\", \"c\"=>\"3\"}","language":"ruby"},{"title":"Hash from two arrays","code":"keys = ['hal', 666, [1,2,3]]\nvals = ['ibm', 'devil', 123]\n\nkeys.zip(vals).to_h","language":"ruby"},{"title":"Hash from two arrays","code":"var keys = %w(a b c)\nvar vals = [1, 2, 3]\n\nvar hash = Hash()\nhash{keys...} = vals...\nsay hash","language":"ruby"},{"title":"Apply a callback to an array","code":"int[] intArray = { 1, 2, 3, 4, 5 };\n// Simplest method:  LINQ, functional\nint[] squares1 = intArray.Select(x => x * x).ToArray();\n\n// Slightly fancier: LINQ, query expression\nint[] squares2 = (from x in intArray\n                  select x * x).ToArray();\n\n// Or, if you only want to call a function on each element, just use foreach\nforeach (var i in intArray)\n    Console.WriteLine(i * i);","language":"csharp"},{"title":"Apply a callback to an array","code":"function map(a, func) {\n  var ret = [];\n  for (var i = 0; i < a.length; i++) {\n    ret[i] = func(a[i]);\n  }\n  return ret;\n}\n\nmap([1, 2, 3, 4, 5], function(v) { return v * v; });","language":"javascript"},{"title":"Apply a callback to an array","code":"map = function(f, data)\n   local result = {}\n   for k,v in ipairs(data) do\n      result[k] = f(v)\n   end\n   return result\nend","language":"lua"},{"title":"Apply a callback to an array","code":"myFunc = function(x) return x*x end\n\nprint(unpack( map(myFunc, myArray) ))\n--> 1   4   9   16  25","language":"lua"},{"title":"Apply a callback to an array","code":"#include <order/interpreter.h>\n\nORDER_PP( 8tuple_map(8fn(8X, 8times(8X, 8X)), 8tuple(1, 2, 3, 4, 5)) )\n// -> (1,4,9,16,25)\n\nORDER_PP( 8seq_map(8fn(8X, 8times(8X, 8X)), 8seq(1, 2, 3, 4, 5)) )\n// -> (1)(4)(9)(16)(25)\n\nORDER_PP( 8seq_for_each(8fn(8X, 8print(8X 8comma)), 8seq(1, 2, 3, 4, 5)) )\n// prints 1,2,3,4,5, and returns 8nil","language":"c"},{"title":"Apply a callback to an array","code":"for i in [1,2,3,4,5] do\n   puts i**2\nend","language":"ruby"},{"title":"Associative array/Creation","code":"int myKey = 7;\ndouble myValue = 3.14;\nexampleMap[myKey] = myValue;","language":"cpp"},{"title":"Associative array/Creation","code":"double myValue = 0.0;\nstd::map<int, double>::iterator myIterator = exampleMap.find(myKey);\nif(exampleMap.end() != myIterator)\n{\n  // Return the value for that key.\n  myValue = myIterator->second;\n}","language":"cpp"},{"title":"Associative array/Creation","code":"hash = {}\nhash[ \"key-1\" ] = \"val1\"\nhash[ \"key-2\" ] = 1\nhash[ \"key-3\" ] = {}","language":"lua"},{"title":"Associative array/Creation","code":"hash = dict()  # 'dict' is the dictionary type.\nhash = dict(red=\"FF0000\", green=\"00FF00\", blue=\"0000FF\")\nhash = { 'key1':1, 'key2':2, }\nvalue = hash[key]","language":"python"},{"title":"Associative array/Creation","code":"hash={}\nhash[666]='devil'\nhash[777]  # => nil\nhash[666]  # => 'devil'","language":"ruby"},{"title":"Associative array/Creation","code":"hash=Hash.new('unknown key')\nhash[666]='devil'\nhash[777]  # => 'unknown key'\nhash[666]  # => 'devil'","language":"ruby"},{"title":"Associative array/Creation","code":"hash=Hash.new{|h,k| \"unknown key #{k}\"}\nhash[666]='devil'\nhash[777]  # => 'unknown key 777'\nhash[666]  # => 'devil'","language":"ruby"},{"title":"Associative array/Creation","code":"hash=Hash.new{|h,k|h[k]=\"key #{k} was added at #{Time.now}\"}\nhash[777]  # => 'key 777 was added at Sun Apr 03 13:49:57 -0700 2011'\nhash[555]  # => 'key 555 was added at Sun Apr 03 13:50:01 -0700 2011'\nhash[777]  # => 'key 777 was added at Sun Apr 03 13:49:57 -0700 2011'","language":"ruby"},{"title":"Associative array/Creation","code":"var hash = Hash.new(\n    key1 => 'value1',\n    key2 => 'value2',\n);\n\n# Add a new key-value pair\nhash{:key3} = 'value3';","language":"ruby"},{"title":"XML/XPath","code":"require('XML::XPath');\n\nvar x = %s'XML::XPath'.new(ARGF.slurp);\n\n[x.findnodes('//item[1]')][0];\nsay [x.findnodes('//price')].map{x.getNodeText(_)};\n[x.findnodes('//name')];","language":"ruby"},{"title":"Remove duplicate elements","code":"int[] nums = { 1, 1, 2, 3, 4, 4 };\nList<int> unique = new List<int>();\nforeach (int n in nums)\n    if (!unique.Contains(n))\n        unique.Add(n);","language":"csharp"},{"title":"Remove duplicate elements","code":"Array.prototype.unique = function() {\n    var u = this.concat().sort();\n    for (var i = 1; i < u.length; ) {\n        if (u[i-1] === u[i])\n            u.splice(i,1);\n        else\n            i++;\n    }\n    return u;\n}\nvar uniq = [1, 2, 3, \"a\", \"b\", \"c\", 2, 3, 4, \"b\", \"c\", \"d\"].unique();","language":"javascript"},{"title":"Remove duplicate elements","code":"Array.prototype.unique = function() {\n    return [... new Set(this)]\n}","language":"javascript"},{"title":"Remove duplicate elements","code":"items = {1,2,3,4,1,2,3,4,\"bird\",\"cat\",\"dog\",\"dog\",\"bird\"}\nflags = {}\nio.write('Unique items are:')\nfor i=1,#items do\n   if not flags[items[i]] then\n      io.write(' ' .. items[i])\n      flags[items[i]] = true\n   end\nend\nio.write('\\n')","language":"Lua"},{"title":"Remove duplicate elements","code":"items = [1, 2, 3, 'a', 'b', 'c', 2, 3, 4, 'b', 'c', 'd']\nunique = []\nhelperset = set()\nfor x in items:\n    if x not in helperset:\n        unique.append(x)\n        helperset.add(x)","language":"python"},{"title":"Remove duplicate elements","code":"import itertools\nitems = [1, 2, 3, 'a', 'b', 'c', 2, 3, 4, 'b', 'c', 'd']\nunique = [k for k,g in itertools.groupby(sorted(items))]","language":"python"},{"title":"Remove duplicate elements","code":"items = [1, 2, 3, 'a', 'b', 'c', 2, 3, 4, 'b', 'c', 'd']\nunique = []\nfor x in items:\n    if x not in unique:\n        unique.append(x)","language":"python"},{"title":"Remove duplicate elements","code":"var ary = [1,1,2,1,'redundant',[1,2,3],[1,2,3],'redundant'];\nsay ary.uniq.dump;\nsay ary.last_uniq.dump;","language":"ruby"},{"title":"Remove duplicate elements","code":"def (dedup l)\n  let exists (table)\n    collect+each x l\n      unless exists.x\n        yield x\n      exists.x <- 1","language":"python"},{"title":"Filter","code":"ArrayList array = new ArrayList( new int[] { 1, 2, 3, 4, 5 } );\nArrayList evens = new ArrayList();\nforeach( int i in array )\n{\n        if( (i%2) == 0 )\n                evens.Add( i );\n}\nforeach( int i in evens )\n       System.Console.WriteLine( i.ToString() );","language":"csharp"},{"title":"Filter","code":"List<int> array = new List<int>( new int[] { 1, 2, 3, 4, 5 } );\nList<int> evens = array.FindAll( delegate( int i ) { return (i%2)==0; } );\nforeach( int i in evens )\n       System.Console.WriteLine( i.ToString() );","language":"csharp"},{"title":"Filter","code":"IEnumerable<int> array = new List<int>( new int[] { 1, 2, 3, 4, 5 } );\nIEnumerable<int> evens = array.Where( delegate( int i ) { return (i%2)==0; } );\nforeach( int i in evens )\n       System.Console.WriteLine( i.ToString() );","language":"csharp"},{"title":"Filter","code":"int[] array = { 1, 2, 3, 4, 5 };\nint[] evens = array.Where(i => (i % 2) == 0).ToArray();\n\nforeach (int i in evens)\n    Console.WriteLine(i);","language":"csharp"},{"title":"Filter","code":"int[] array = {1, 2, 3, 4, 5 };\nList<Integer> evensList = new ArrayList<Integer>();\nfor (int  i: array) {\n    if (i % 2 == 0) evensList.add(i);\n}\nint[] evens = evensList.toArray(new int[0]);","language":"java"},{"title":"Filter","code":"var arr = [1,2,3,4,5];\nvar evens = [];\nfor (var i=0, ilen=arr.length; i<ilen; i++)\n      if (arr[i] % 2 == 0)\n              evens.push(arr[i]);","language":"javascript"},{"title":"Filter","code":"var numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar evens = [i for (i in numbers) if (i % 2 == 0)];\n\nfunction range(limit) {\n  for(var i = 0; i < limit; i++) {\n    yield i;\n  }\n}\n\nvar evens2 = [i for (i in range(100)) if (i % 2 == 0)];","language":"javascript"},{"title":"Filter","code":"function filter(t, func)\n  local ret = {}\n  for i, v in ipairs(t) do\n    ret[#ret+1] = func(v) and v or nil\n  end\n  return ret\nend\n\nfunction even(a) return a % 2 == 0 end\n\nprint(unpack(filter({1, 2, 3, 4 ,5, 6, 7, 8, 9, 10}, even)))","language":"lua"},{"title":"Filter","code":"function filter(t, func)\n  for i, v in ipairs(t) do\n    if not func(v) then table.remove(t, i) end\n  end\nend\n\nfunction even(a) return a % 2 == 0 end\n\nlocal values = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nfilter(values, even)\nprint(unpack(values))","language":"lua"},{"title":"Filter","code":"values = range(10)\nevens = [x for x in values if not x & 1]\nievens = (x for x in values if not x & 1) # lazy\n# alternately but less idiomatic:\nevens = filter(lambda x: not x & 1, values)","language":"python"},{"title":"Filter","code":"values = range(10)\nvalues[::2] = [11,13,15,17,19]\nprint values\n11, 1, 13, 3, 15, 5, 17, 7, 19, 9","language":"python"},{"title":"Filter","code":"# Enumerable#select returns a new array.\nary = [1, 2, 3, 4, 5, 6]\neven_ary = ary.select {|elem| elem.even?}\np even_ary # => [2, 4, 6]\n\n# Enumerable#select also works with Range.\nrange = 1..6\neven_ary = range.select {|elem| elem.even?}\np even_ary # => [2, 4, 6]","language":"ruby"},{"title":"Filter","code":"ary = [1, 2, 3, 4, 5, 6]\nary.select! {|elem| elem.even?}\np ary # => [2, 4, 6]","language":"ruby"},{"title":"Filter","code":"var arr = [1,2,3,4,5];\n\n# Creates a new array\nvar new = arr.grep {|i| i %% 2};\nsay new.dump;     # => [2, 4]\n\n# Destructive (at variable level)\narr.grep! {|i| i %% 2};\nsay arr.dump;    # => [2, 4]","language":"ruby"},{"title":"Table creation/Postal addresses","code":"require 'pstore'\nrequire 'set'\n\nAddress = Struct.new :id, :street, :city, :state, :zip\n\ndb = PStore.new(\"addresses.pstore\")\ndb.transaction do\n  db[:next] ||= 0       # Next available Address#id\n  db[:ids] ||= Set[]    # Set of all ids in db\nend","language":"ruby"},{"title":"Table creation/Postal addresses","code":"db.transaction do\n  id = (db[:next] += 1)\n  db[id] = Address.new(id,\n                       \"1600 Pennsylvania Avenue NW\",\n                       \"Washington\", \"DC\", 20500)\n  db[:ids].add id\nend","language":"ruby"},{"title":"Table creation/Postal addresses","code":"require 'sqlite3'\n\ndb = SQLite3::Database.new(':memory:')\ndb.execute(\"\n    CREATE TABLE address (\n        addrID     INTEGER PRIMARY KEY AUTOINCREMENT,\n        addrStreet TEXT NOT NULL,\n        addrCity   TEXT NOT NULL,\n        addrState  TEXT NOT NULL,\n        addrZIP    TEXT NOT NULL\n    )\n\")","language":"ruby"},{"title":"SOAP","code":"from SOAPpy import WSDL \nproxy = WSDL.Proxy(\"http://example.com/soap/wsdl\")\nresult = proxy.soapFunc(\"hello\")\nresult = proxy.anotherSoapFunc(34234)","language":"python"},{"title":"SOAP","code":"require 'soap/wsdlDriver'\n\nwsdl = SOAP::WSDLDriverFactory.new(\"http://example.com/soap/wsdl\")\nsoap = wsdl.create_rpc_driver\n\nresponse1 = soap.soapFunc(:elementName => \"value\")\nputs response1.soapFuncReturn\n\nresponse2 = soap.anotherSoapFunc(:aNumber => 42)\nputs response2.anotherSoapFuncReturn","language":"ruby"},{"title":"Regular expressions","code":"import java.util.regex.*;\nPattern p = Pattern.compile(\"a*b\");\nMatcher m = p.matcher(str);\nwhile (m.find()) {\n  // use m.group() to extract matches\n}","language":"java"},{"title":"Regular expressions","code":"String orig = \"I am the original string\";\nString result = orig.replaceAll(\"original\", \"modified\");\n// result is now \"I am the modified string\"","language":"java"},{"title":"Regular expressions","code":"var subject = \"Hello world!\";\n\n// Perform a string replacement\n//    newSubject == \"Replaced!\"\nvar newSubject = subject.replace(re_PatternToMatch, \"Replaced\");","language":"javascript"},{"title":"Regular expressions","code":"test = \"My name is Lua.\"\npattern = \".*name is (%a*).*\"\n\nif test:match(pattern) then\n    print(\"Name found.\")\nend\n\nsub, num_matches = test:gsub(pattern, \"Hello, %1!\")\nprint(sub)","language":"lua"},{"title":"Regular expressions","code":"import re\n\nstring = \"This is a string\"\n\nif re.search('string$', string):\n    print(\"Ends with string.\")\n\nstring = re.sub(\" a \", \" another \", string)\nprint(string)","language":"python"},{"title":"Regular expressions","code":"str = \"I am a string\"\np \"Ends with 'string'\" if str =~ /string$/\np \"Does not start with 'You'\" unless str =~ /^You/","language":"ruby"},{"title":"Regular expressions","code":"str.sub(/ a /, ' another ') #=> \"I am another string\"\n# Or:\nstr[/ a /] = ' another '    #=> \"another\"\nstr                         #=> \"I am another string\"","language":"ruby"},{"title":"Regular expressions","code":"var str = \"I am a string\";\nif (str =~ /string$/) {\n    print \"Ends with 'string'\\n\";\n}","language":"ruby"},{"title":"Regular expressions","code":"var str = <<'EOF';\n    x:Foo\n    y:Bar\nEOF\n\nwhile (var m = str=~/(\\w+):(\\S+)/g) {\n    say \"#{m[0]} -> #{m[1]}\";\n}","language":"ruby"},{"title":"Higher-order functions","code":"void myFuncSimple( void (*funcParameter)(void) )\n{\n    /* ... */\n   \n    (*funcParameter)();  /* Call the passed function. */\n    funcParameter();     /* Same as above with slight different syntax. */\n\n    /* ... */\n}","language":"c"},{"title":"Higher-order functions","code":"void funcToBePassed(void);\n\n/* ... */\n\nmyFuncSimple(&funcToBePassed);","language":"c"},{"title":"Higher-order functions","code":"double* funcToBePassed(long* parameter);\n\n/* ... */\n\nint* outInt;  \n\noutInt = myFuncComplex(&funcToBePassed);","language":"c"},{"title":"Higher-order functions","code":"int* (*funcPointer)( double* (*funcParameter)(long* parameter) );\n\n/* ... */\n\nfuncPointer = &myFuncComplex;","language":"c"},{"title":"Higher-order functions","code":"function first (func) {\n  return func();\n}\n\nfunction second () {\n  return \"second\";\n}\n\nvar result = first(second);\nresult = first(function () { return \"third\"; });","language":"javascript"},{"title":"Higher-order functions","code":"a = function() return 1 end\nb = function(r) print( r() ) end\nb(a)","language":"lua"},{"title":"Higher-order functions","code":"def first(function):\n    return function()\n\ndef second():\n    return \"second\"\n\nresult = first(second)","language":"python"},{"title":"Higher-order functions","code":"succ = proc{|x| x+1}\ndef to2(&f)\n  f[2]\nend\n\nto2(&succ) #=> 3\nto2{|x| x+1} #=> 3","language":"ruby"},{"title":"Higher-order functions","code":"def succ(n)\n  n+1\nend\ndef to2(m)\n  m[2]\nend\n\nmeth = method(:succ)\nto2(meth) #=> 3","language":"ruby"},{"title":"Higher-order functions","code":"func first(f) {\n  return f();\n}\n\nfunc second {\n  return \"second\";\n}\n\nsay first(second);              # => \"second\"\nsay first(func { \"third\" });    # => \"third\"","language":"ruby"},{"title":"XML/DOM serialization","code":"var doc = document.implementation.createDocument( null, 'root', null );\nvar root = doc.documentElement;\nvar element = doc.createElement( 'element' );\nroot.appendChild( element );\nelement.appendChild( document.createTextNode('Some text here') );\nvar xmlString = new XMLSerializer().serializeToString( doc );","language":"javascript"},{"title":"XML/DOM serialization","code":"var xml = <root>\n  <element>Some text here</element>\n</root>;\nvar xmlString = xml.toXMLString();","language":"javascript"},{"title":"XML/DOM serialization","code":"XML.ignoreProcessingInstructions = false;\nvar xml = <?xml version=\"1.0\"?>  \n<root>\n  <element>Some text here</element>\n</root>;\nvar xmlString = xml.toXMLString();","language":"javascript"},{"title":"XML/DOM serialization","code":"require(\"LuaXML\")\nlocal dom = xml.new(\"root\")\nlocal element = xml.new(\"element\")\ntable.insert(element, \"Some text here\")\ndom:append(element)\ndom:save(\"dom.xml\")","language":"Lua"},{"title":"XML/DOM serialization","code":"from xml.dom.minidom import getDOMImplementation\n\ndom = getDOMImplementation()\ndocument = dom.createDocument(None, \"root\", None)\n\ntopElement = document.documentElement\nfirstElement = document.createElement(\"element\")\ntopElement.appendChild(firstElement)\ntextNode = document.createTextNode(\"Some text here\")\nfirstElement.appendChild(textNode)\n\nxmlString = document.toprettyxml(\" \" * 4)","language":"python"},{"title":"XML/DOM serialization","code":"from xml.etree import ElementTree as et\n\nroot = et.Element(\"root\")\net.SubElement(root, \"element\").text = \"Some text here\"\nxmlString = et.tostring(root)","language":"python"},{"title":"XML/DOM serialization","code":"require(\"rexml/document\")\ninclude REXML\n(doc = Document.new) << XMLDecl.new\nroot = doc.add_element('root')\nelement = root.add_element('element')\nelement.add_text('Some text here')\n\n# save to a string \n# (the first argument to write() needs an object that understands \"<<\")\nserialized = String.new\ndoc.write(serialized, 4)\nputs serialized","language":"ruby"},{"title":"XML/DOM serialization","code":"require('XML::Simple');\nprint %S'XML::Simple'.XMLout(\n    :(root => :( element => 'Some text here' )),\n    NoAttr => 1, RootName => '',\n);","language":"ruby"},{"title":"Walk a directory/Non-recursively","code":"File dir = new File(\"/foo/bar\");\n\nString[] contents = dir.list();\nfor (String file : contents)\n    if (file.endsWith(\".mp3\"))\n        System.out.println(file);","language":"java"},{"title":"Walk a directory/Non-recursively","code":"import glob\nfor filename in glob.glob('/foo/bar/*.mp3'):\n    print(filename)","language":"python"},{"title":"Walk a directory/Non-recursively","code":"import os\nfor filename in os.listdir('/foo/bar'):\n    if filename.endswith('.mp3'):\n        print(filename)","language":"python"},{"title":"Walk a directory/Non-recursively","code":"# Files under this directory:\nDir.glob('*') { |file| puts file }\n\n# Files under path '/foo/bar':\nDir.glob( File.join('/foo/bar', '*') ) { |file| puts file }\n\n# As a method\ndef file_match(pattern=/\\.txt/, path='.')\n  Dir[File.join(path,'*')].each do |file|\n    puts file if file =~ pattern\n  end\nend","language":"ruby"},{"title":"Pointers and references","code":"int array[10];\npointer = array;\n/* or alternatively: */\npointer = &array[0];","language":"c"},{"title":"Pointers and references","code":"v = pointer[3]; /* accesses third-next object, i.e. array[4] */\nv = pointer[-1]; /* accesses previous object, i.e. array[0] */\n/* or alternatively */\nv = *(pointer + 3); /* array[4] */\nv = *(pointer - 1); /* array[0] */","language":"c"},{"title":"Pointers and references","code":"int var = 3;\nint& ref = var;\n// or alternatively:\nint& ref2(var);","language":"cpp"},{"title":"Pointers and references","code":"local table1 = {1,2,3}\nlocal table2 = table1\ntable2[3] = 4\nprint(unpack(table1))","language":"Lua"},{"title":"Pointers and references","code":"func assign2ref(ref, value) {\n    *ref = value;\n}\n\nvar x = 10;\nassign2ref(\\x, 20);\nsay x;      # x is now 20","language":"ruby"},{"title":"Greatest subsequential sum","code":"private static int BiggestSubsum(int[] t) {\n    int sum = 0;\n    int maxsum = 0;\n\n    for (int i : t) {\n        sum += i;\n        if (sum < 0)\n            sum = 0;\n        maxsum = sum > maxsum ? sum : maxsum;\n    }        \n    return maxsum;\n}","language":"java"},{"title":"Greatest subsequential sum","code":"def maxsubseq(seq):\n  return max((seq[begin:end] for begin in xrange(len(seq)+1)\n                             for end in xrange(begin, len(seq)+1)),\n             key=sum)","language":"python"},{"title":"Greatest subsequential sum","code":"def subarray_sum(arr)\n  max, slice = 0, []\n  arr.each_index do |i|\n    (i...arr.length).each do |j|\n      sum = arr[i..j].inject(0, :+)\n      max, slice = sum, arr[i..j]  if sum > max\n    end\n  end\n  [max, slice]\nend","language":"ruby"},{"title":"Greatest subsequential sum","code":"[ [1, 2, 3, 4, 5, -8, -9, -20, 40, 25, -5],\n  [-1, -2, 3, 5, 6, -2, -1, 4, -4, 2, -1],\n  [-1, -2, -3, -4, -5],\n  []\n].each do |input|\n  puts \"\\nInput seq: #{input}\"\n  puts \"  Max sum: %d\\n   Subseq: %s\" % subarray_sum(input)\nend","language":"ruby"},{"title":"FizzBuzz","code":"int i = 0 ;  char B[88] ;\n  while ( i++ < 100 )\n    !sprintf( B, \"%s%s\", i%3 ? \"\":\"Fizz\", i%5 ? \"\":\"Buzz\" )\n    ? sprintf( B, \"%d\", i ):0, printf( \", %s\", B );","language":"c"},{"title":"FizzBuzz","code":"int i = 0 ;  char B[88] ;\n  while ( i++ < 100 )\n    !sprintf( B, \"%s%s%s%s\", \n       i%3 ? \"\":\"Fiz\", i%5 ? \"\":\"Buz\", i%7 ? \"\":\"Goz\", i%11 ? \"\":\"Kaz\" )\n    ? sprintf( B, \"%d\", i ):0, printf( \", %s\", B );","language":"c"},{"title":"FizzBuzz","code":"#include<stdio.h>\n \nint main ()\n{\n        int i;\n        const char *s[] = { \"%d\\n\", \"Fizz\\n\", s[3] + 4, \"FizzBuzz\\n\" };\n        for (i = 1; i <= 100; i++)\n                printf(s[!(i % 3) + 2 * !(i % 5)], i);\n\n        return 0;\n}","language":"c"},{"title":"FizzBuzz","code":"#include <stdio.h>\n\nint main(void)\n{\n    for (int i = 1; i <= 100; ++i) {\n        if (i % 3 == 0) printf(\"fizz\");\n        if (i % 5 == 0) printf(\"buzz\");\n        if (i * i * i * i % 15 == 1) printf(\"%d\", i);\n        puts(\"\");\n    }\n}","language":"c"},{"title":"FizzBuzz","code":"#include <stdio.h>\nint main()\n{\n    for (int i=0;++i<101;puts(\"\"))\n    {\n        char f[] = \"FizzBuzz%d\";\n        f[8-i%5&12]=0;\n        printf (f+(-i%3&4+f[8]/8), i);\n    }\n}","language":"c"},{"title":"FizzBuzz","code":"1.upto(100) do |v|\n  p fizz_buzz(v)\nend\n\ndef fizz_buzz(value)\n  word = \"\"\n  word += \"fizz\" if value % 3 == 0\n  word += \"buzz\" if value % 5 == 0\n  word += value.to_s if word.empty?\n  word\nend","language":"ruby"},{"title":"FizzBuzz","code":"var fizzBuzz = function () {\n  var i, output;\n  for (i = 1; i < 101; i += 1) {\n    output = '';\n    if (!(i % 3)) { output += 'Fizz'; }\n    if (!(i % 5)) { output += 'Buzz'; }\n    console.log(output || i);//empty string is false, so we short-circuit\n  }\n};","language":"javascript"},{"title":"FizzBuzz","code":"for (var i = 1; i <= 100; i++) {\n  console.log({\n    truefalse: 'Fizz', \n    falsetrue: 'Buzz', \n    truetrue: 'FizzBuzz'\n  }[(i%3==0) + '' + (i%5==0)] || i)\n}","language":"javascript"},{"title":"FizzBuzz","code":"(function rng(i) {\n    return i ? rng(i - 1).concat(i) : []\n})(100).map(\n    function (n) {\n        return n % 3 ? (\n            n % 5 ? n : \"Buzz\"\n        ) : (\n            n % 5 ? \"Fizz\" : \"FizzBuzz\"\n        )\n    }\n).join(' ')","language":"javascript"},{"title":"FizzBuzz","code":"for i = 1, 100 do\n        if i % 15 == 0 then\n                print(\"FizzBuzz\")\n        elseif i % 3 == 0 then\n                print(\"Fizz\")\n        elseif i % 5 == 0 then\n                print(\"Buzz\")\n        else\n                print(i)\n        end\nend","language":"Lua"},{"title":"FizzBuzz","code":"word = {\"Fizz\", \"Buzz\", \"FizzBuzz\"}\n\nfor i = 1, 100 do\n        print(word[(i % 3 == 0 and 1 or 0) + (i % 5 == 0 and 2 or 0)] or i)\nend","language":"Lua"},{"title":"FizzBuzz","code":"1 to 100 (a):\n  if (a % 15 == 0):\n    'FizzBuzz'.\n  elsif (a % 3 == 0):\n    'Fizz'.\n  elsif (a % 5 == 0):\n    'Buzz'.\n  else: a. string print\n  \"\\n\" print.","language":"lua"},{"title":"FizzBuzz","code":"for i in xrange(1, 101):\n    if i % 15 == 0:\n        print \"FizzBuzz\"\n    elif i % 3 == 0:\n        print \"Fizz\"\n    elif i % 5 == 0:\n        print \"Buzz\"\n    else:\n        print i","language":"python"},{"title":"FizzBuzz","code":"1.upto(100) do |n|\n  print \"Fizz\" if a = (n % 3).zero?\n  print \"Buzz\" if b = (n % 5).zero?\n  print n unless (a || b)\n  puts\nend","language":"ruby"},{"title":"FizzBuzz","code":"(1..100).each do |n|\n  puts if (n % 15).zero?\n    \"FizzBuzz\"\n  elsif (n % 5).zero?\n    \"Buzz\"\n  elsif (n % 3).zero?\n    \"Fizz\"\n  else\n    n\n  end\nend","language":"ruby"},{"title":"FizzBuzz","code":"(1..100).each do |n|\n  v = \"#{\"Fizz\" if n % 3 == 0}#{\"Buzz\" if n % 5 == 0}\"\n  puts v.empty? ? n : v\nend","language":"ruby"},{"title":"FizzBuzz","code":"1.upto 100 do |n|\n  r = ''\n  r << 'Fizz' if n % 3 == 0\n  r << 'Buzz' if n % 5 == 0\n  r << n.to_s if r.empty?\n  puts r\nend","language":"ruby"},{"title":"FizzBuzz","code":"f = [nil, nil, :Fizz].cycle\nb = [nil, nil, nil, nil, :Buzz].cycle\n(1..100).each do |i|\n  puts \"#{f.next}#{b.next}\"[/.+/] || i\nend","language":"ruby"},{"title":"FizzBuzz","code":"seq = *0..100\n{Fizz:3, Buzz:5, FizzBuzz:15}.each{|k,n| n.step(100,n){|i|seq[i]=k}}\nputs seq.drop(1)","language":"ruby"},{"title":"FizzBuzz","code":"class Integer\n  def fizzbuzz\n    v = \"#{\"Fizz\" if self % 3 == 0}#{\"Buzz\" if self % 5 == 0}\"\n    v.empty? ? self : v\n  end\nend\n\nputs *(1..100).map(&:fizzbuzz)","language":"ruby"},{"title":"FizzBuzz","code":"fizzbuzz = ->(i) do\n  (i%15).zero? and next \"FizzBuzz\"\n  (i%3).zero?  and next \"Fizz\"\n  (i%5).zero?  and next \"Buzz\"\n  i\nend\n\nputs (1..100).map(&fizzbuzz).join(\"\\n\")","language":"ruby"},{"title":"FizzBuzz","code":"{ |i|\n    if (i %% 3) {\n        print \"Fizz\"\n        i %% 5 && print \"Buzz\"\n        print \"\\n\"\n    }\n    elsif (i %% 5) { say \"Buzz\" }\n    else  { say i }\n} * 100","language":"ruby"},{"title":"FizzBuzz","code":"func fizzbuzz({ _ %% 15 }) { \"FizzBuzz\" }\nfunc fizzbuzz({ _ %%  5 }) {     \"Buzz\" }\nfunc fizzbuzz({ _ %%  3 }) {     \"Fizz\" }\nfunc fizzbuzz(        n  ) {          n }\n\nfor n in (1..100) { say fizzbuzz(n) }","language":"ruby"},{"title":"FizzBuzz","code":"1.to 100\n  [\n  println(\n    if idx.mod(15) = 0 [\"FizzBuzz\"]\n      idx.mod(3) = 0 [\"Fizz\"]\n      idx.mod(5) = 0 [\"Buzz\"]\n      else [idx])\n  ]","language":"javascript"},{"title":"FizzBuzz","code":"1.to 100\n  [\n  !str: \"\"\n  if idx.mod(3) = 0 [str += \"Fizz\"]\n  if idx.mod(5) = 0 [str += \"Buzz\"]\n  println(if str.empty? [idx] else [str])\n  ]","language":"javascript"},{"title":"FizzBuzz","code":"1.to 100\n  [\n  !str: if idx.mod(3) = 0 [\"Fizz\"] else [\"\"]\n  if idx.mod(5) = 0 [str += \"Buzz\"]\n  println(if str.empty? [idx] else [str])\n  ]","language":"javascript"},{"title":"100 doors","code":"var doors = falses 100\nfor a in [:101]:\n    for b in [a:a:101]: doors[b] = !doors[b]\n    print \"Door $a is $('open.' if doors[a] else 'closed.')\"","language":"python"},{"title":"100 doors","code":"#include <stdio.h>\n\nint main()\n{\n        int i;\n        for (i = 1; i * i <= 100; i++)\n                printf(\"door %d open\\n\", i * i);\n\n        return 0;\n}","language":"C"},{"title":"100 doors","code":"#include <iostream> //compiled with \"Dev-C++\" , from RaptorOne\n\nint main()\n{\n    for(int i=1; i*i<=100; i++)\n            std::cout<<\"Door \"<<i*i<<\" is open!\"<<std::endl;\n}","language":"cpp"},{"title":"100 doors","code":"doors = Array.new(100, false)\n\n1.upto(100) do |i|\n  i.step(by: i, limit: 100) do |j|\n    doors[j - 1] = !doors[j - 1]\n  end\nend\n\ndoors.each_with_index do |open, i|\n  puts \"Door #{i + 1} is #{open ? \"open\" : \"closed\"}\"\nend","language":"ruby"},{"title":"100 doors","code":"class HundredDoors {\n    public static void main(String[] args) {\n        for (int i = 1; i <= 10; i++)\n            System.out.printf(\"Door %d is open.%n\", i * i);\n    }\n}","language":"java"},{"title":"100 doors","code":"import java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\nclass HundredDoors {\n    public static void main(String args[]) {\n        String openDoors = IntStream.rangeClosed(1, 100)\n                .filter(i -> Math.pow((int) Math.sqrt(i), 2) == i)\n                .mapToObj(Integer::toString)\n                .collect(Collectors.joining(\", \"));\n        System.out.printf(\"Open doors: %s%n\", openDoors);\n    }\n}","language":"java"},{"title":"100 doors","code":"var doors=[];\nfor(var i=0;i<100;i++)\n doors[i]=false;             //create doors\nfor(var i=1;i<=100;i++)\n for(var i2=i-1,g;i2<100;i2+=i)\n  doors[i2]=!doors[i2];      //toggle doors\nfor(var i=1;i<=100;i++)      //read doors\n console.log(\"Door %d is %s\",i,doors[i-1]?\"open\":\"closed\")","language":"javascript"},{"title":"100 doors","code":"for (var door = 1; door <= 100; door++) {\n  var sqrt = Math.sqrt(door);\n  if (sqrt === (sqrt | 0)) {\n    console.log(\"Door %d is open\", door);\n  }\n}","language":"javascript"},{"title":"100 doors","code":"for(var door=1;i<10/*Math.sqrt(100)*/;i++){\n console.log(\"Door %d is open\",i*i);\n}","language":"javascript"},{"title":"100 doors","code":"Array.apply(null, { length: 100 })\n  .map((v, i) => i + 1)\n    .forEach(door => { \n      var sqrt = Math.sqrt(door); \n\n      if (sqrt === (sqrt | 0)) {\n        console.log(\"Door %d is open\", door);\n      } \n    });","language":"javascript"},{"title":"100 doors","code":"// Array comprehension style\n[ for (i of Array.apply(null, { length: 100 })) i ].forEach((_, i) => { \n  var door = i + 1\n  var sqrt = Math.sqrt(door); \n\n  if (sqrt === (sqrt | 0)) {\n    console.log(\"Door %d is open\", door);\n  } \n});","language":"javascript"},{"title":"100 doors","code":"local is_open = {}\n\nfor pass = 1,100 do\n    for door = pass,100,pass do\n        is_open[door] = not is_open[door]\n    end\nend\n\nfor i,v in next,is_open do\n    print ('Door '..i..':',v and 'open' or 'close')\nend","language":"lua"},{"title":"100 doors","code":"doors = [False] * 100\nfor i in range(100):\n   for j in range(i, 100, i+1):\n       doors[j] = not doors[j]\n   print(\"Door %d:\" % (i+1), 'open' if doors[i] else 'close')","language":"python"},{"title":"100 doors","code":"for i in xrange(1, 101):\n    root = i ** 0.5\n    print \"Door %d:\" % i, 'open' if root == int(root) else 'close'","language":"python"},{"title":"100 doors","code":"for i in range(1, 101):\n    if i**0.5 % 1:\n        state='open'\n    else:\n        state='close'\n    print(\"Door {}:{}\".format(i, state))","language":"python"},{"title":"100 doors","code":"n = 100\n(1..n).each do |i| \n  puts \"Door #{i} is #{i**0.5 == (i**0.5).round ? \"open\" : \"closed\"}\"\nend","language":"ruby"},{"title":"100 doors","code":"doors = [false] * 100\n100.times do |i|\n  (i ... doors.length).step(i + 1) do |j|\n    doors[j] = !doors[j]\n  end\nend\nputs doors.map.with_index(1){|d,i| \"Door #{i} is #{d ? 'open' : 'closed'}.\"}","language":"ruby"},{"title":"100 doors","code":"def (doors n)\n  let door (table)\n    for step 1 (step <= n) ++step\n      for j 0 (j < n) (j <- j+step)\n        zap! not door.j\n\n    for j 0 (j < n) ++j\n      when door.j\n        pr j\n        pr \" \"","language":"python"},{"title":"Quine","code":"#include<cstdio>\nint main(){char n[]=R\"(#include<cstdio>\nint main(){char n[]=R\"(%s%c\";printf(n,n,41);})\";printf(n,n,41);}","language":"cpp"},{"title":"Quine","code":"(function f() {\n \n    return '(' + f.toString() + ')();';\n    \n})();","language":"javascript"},{"title":"Quine","code":"(function f() {\n\n    return '(' + f.toString() + ')();';\n    \n})();","language":"javascript"},{"title":"Quine","code":"(function f() {\n\n    console.log('(' + f.toString() + ')();');\n\n})();","language":"javascript"},{"title":"Quine","code":"x = \"\"\"x = {0}{1}{0}\nprint x.format(chr(34)*3,x)\"\"\"\nprint x.format(chr(34)*3,x)","language":"python"},{"title":"Quine","code":"a = 'YSA9ICcnCmIgPSBhLmRlY29kZSgnYmFzZTY0JykKcHJpbnQgYls6NV0rYStiWzU6XQ=='\nb = a.decode('base64')\nprint b[:5]+a+b[5:]","language":"python"},{"title":"Quine","code":"puts <<e*2,'e'\nputs <<e*2,'e'\ne","language":"ruby"},{"title":"Quine","code":"f = File.open __FILE__\nf.each_line do |line|\n puts line\nf.close","language":"ruby"},{"title":"Quine","code":"say(<<e*2, 'e')\nsay(<<e*2, 'e')\ne","language":"ruby"},{"title":"Longest common subsequence","code":"int main () {\n    char a[] = \"thisisatest\";\n    char b[] = \"testing123testing\";\n    int n = sizeof a - 1;\n    int m = sizeof b - 1;\n    char *s = NULL;\n    int t = lcs(a, n, b, m, &s);\n    printf(\"%.*s\\n\", t, s); // tsitest\n    return 0;\n}","language":"c"},{"title":"Longest common subsequence","code":"LCS lcs;\n    auto s = lcs.Correspondence(s1, s2);\n    cout << s << endl;","language":"cpp"},{"title":"Longest common subsequence","code":"def lcs(xstr, ystr):\n    \"\"\"\n    >>> lcs('thisisatest', 'testing123testing')\n    'tsitest'\n    \"\"\"\n    if not xstr or not ystr:\n        return \"\"\n    x, xs, y, ys = xstr[0], xstr[1:], ystr[0], ystr[1:]\n    if x == y:\n        return x + lcs(xs, ys)\n    else:\n        return max(lcs(xstr, ys), lcs(xs, ystr), key=len)","language":"python"},{"title":"Arithmetic/Rational","code":"from fractions import Fraction\n\nfor candidate in range(2, 2**19):\n  sum = Fraction(1, candidate)\n  for factor in range(2, int(candidate**0.5)+1):\n    if candidate % factor == 0:\n      sum += Fraction(1, factor) + Fraction(1, candidate // factor)\n  if sum.denominator == 1:\n    print(\"Sum of recipr. factors of %d = %d exactly %s\" %\n           (candidate, int(sum), \"perfect!\" if sum == 1 else \"\"))","language":"python"},{"title":"Runtime evaluation/In an environment","code":"function evalWithX(expr, a, b) {\n    var x = a;\n    var atA = eval(expr);\n    x = b;\n    var atB = eval(expr);\n    return atB - atA;\n}","language":"javascript"},{"title":"Runtime evaluation/In an environment","code":"code = loadstring\"return x^2\" --this doesn't really need to be input, does it?\nval1 = setfenv(code, {x = io.read() + 0})()\nval2 = setfenv(code, {x = io.read() + 0})()\nprint(val2 - val1)","language":"lua"},{"title":"Runtime evaluation/In an environment","code":"env = {}\nf = load(\"return x\", nil, nil, env)\nenv.x = tonumber(io.read()) -- user enters 2\na = f()\nenv.x = tonumber(io.read()) -- user enters 3\nb = f()\nprint(a + b) --> outputs 5","language":"lua"},{"title":"Runtime evaluation/In an environment","code":"def bind_x_to_value(x)\n  binding\nend\n\ndef eval_with_x(code, a, b)\n  eval(code, bind_x_to_value(b)) - eval(code, bind_x_to_value(a))\nend\n\nputs eval_with_x('2 ** x', 3, 5) # Prints \"24\"","language":"ruby"},{"title":"Runtime evaluation/In an environment","code":"func eval_with_x(code, x, y) {\n    var f = eval(code);\n    x = y;\n    eval(code) - f;\n}\n\nsay eval_with_x(x: 3, y: 5, code: '2 ** x');   # => 24","language":"ruby"},{"title":"Runtime evaluation","code":"f = loadstring(s) -- load a string as a function. Returns a function.\n\none = loadstring\"return 1\" -- one() returns 1\n\ntwo = loadstring\"return ...\" -- two() returns the arguments passed to it","language":"lua"},{"title":"Runtime evaluation","code":"var foo = eval('{value: 42}');\neval('var bar = \"Hello, world!\";');\n\ntypeof foo; // 'object'\ntypeof bar; // 'string'","language":"javascript"},{"title":"Runtime evaluation","code":"var (a, b) = (-5, 7);\nsay eval '(a * b).abs';  # => 35\nsay (a * b -> abs);      # => 35","language":"ruby"},{"title":"Bitmap/Flood fill","code":"/* #include <sys/queue.h> */\ntypedef struct {\n  color_component red, green, blue;\n} rgb_color;\ntypedef rgb_color *rgb_color_p;\n\nvoid floodfill(image img, int px, int py,\n               rgb_color_p bankscolor,\n               rgb_color_p rcolor);","language":"c"},{"title":"Interactive programming","code":"public static void main(String[] args) {\n    System.out.println(concat(\"Rosetta\", \"Code\", \":\"));\n}\n\npublic static String concat(String a, String b, String c) {\n   return a + c + c + b;\n}\n\nRosetta::Code","language":"java"},{"title":"Interactive programming","code":"$ java -cp js.jar org.mozilla.javascript.tools.shell.Main\nRhino 1.7 release 2 2009 03 22\njs> function f(a,b,s) {return a + s + s + b;}\njs> f('Rosetta', 'Code', ':')\nRosetta::Code\njs> quit()\n$","language":"javascript"},{"title":"Interactive programming","code":"$ lua\nLua 5.1.2  Copyright (C) 1994-2007 Lua.org, PUC-Rio\n> function conc(a, b, c)\n>> return a..c..c..b\n>> end\n> print(conc(\"Rosetta\", \"Code\", \":\"))\nRosetta::Code\n>","language":"lua"},{"title":"Interactive programming","code":"$ irb\nirb(main):001:0> def f(string1, string2, separator)\nirb(main):002:1>     [string1, '', string2].join(separator)\nirb(main):003:1> end\n=> :f\nirb(main):004:0> f('Rosetta', 'Code', ':')\n=> \"Rosetta::Code\"\nirb(main):005:0> exit\n$","language":"ruby"},{"title":"Interactive programming","code":"$ sidef -i\n>>> func f(s1, s2, sep) { s1 + sep*2 + s2 };\nf\n>>> f('Rosetta', 'Code', ':')\n\"Rosetta::Code\"\n>>>","language":"ruby"},{"title":"Long multiplication","code":"using System;\nusing System.Numerics;\n\nclass Program {\n    static void Main() {\n        BigInteger pow2_64 = BigInteger.Pow(2, 64);\n        BigInteger result = BigInteger.Multiply(pow2_64, pow2_64);\n        Console.WriteLine(result);\n    }\n}","language":"csharp"},{"title":"Y combinator","code":"function Y(f) {\n    return (function(h) {\n        return h(h);\n    })(function(h) {\n        return f(function() {\n            return h(h).apply(this, arguments);\n        });\n    });\n}","language":"javascript"},{"title":"Y combinator","code":"function Y(f) {\n    return function() {\n            return f(Y(f)).apply(this, arguments);\n    };\n}","language":"javascript"},{"title":"Y combinator","code":"function Y(f) {\n    return function() {\n            return f(arguments.callee).apply(this, arguments);\n    };\n}","language":"javascript"},{"title":"Y combinator","code":"y = ->(f) {->(g) {g.(g)}.(->(g) { f.(->(*args) {g.(g).(*args)})})}\n             \nfac = ->(f) { ->(n) { n < 2 ? 1 : n * f.(n-1) } }\n\np 10.times.map {|i| y.(fac).(i)}\n\nfib = ->(f) { ->(n) { n < 2 ? n : f.(n-2) + f.(n-1) } }\n\np 10.times.map {|i| y.(fib).(i)}","language":"ruby"},{"title":"Y combinator","code":"y = lambda do |f|\n  lambda {|*args| f[y[f]][*args]}\nend","language":"ruby"},{"title":"Function composition","code":"function compose(f, g) {\n  return function(x) {\n    return f(g(x));\n  };\n}","language":"javascript"},{"title":"Function composition","code":"#include <order/interpreter.h>\n\n#define ORDER_PP_DEF_8comp ORDER_PP_FN( \\\n8fn(8F, 8G, 8fn(8X, 8ap(8F, 8ap(8G, 8X)))) )","language":"c"},{"title":"Function composition","code":"def compose(f,g)\n  lambda {|x| f[g[x]]}\nend\ns = compose(Math.method(:sin), Math.method(:cos))\np s[0.5]  # => 0.769196354841008\n\n# verify\np Math.sin(Math.cos(0.5))  # => 0.769196354841008","language":"ruby"},{"title":"Function composition","code":"func compose(f, g) {\n    func(x) { f(g(x)) }\n}\n\nvar fg = compose(func(x){ sin(x) }, func(x){ cos(x) })\nsay fg(0.5)      # => 0.76919635484100842185251475805107","language":"ruby"},{"title":"Xiaolin Wu's line algorithm","code":"void draw_line_antialias(\n        image img,\n        unsigned int x0, unsigned int y0,\n        unsigned int x1, unsigned int y1,\n        color_component r,\n        color_component g,\n        color_component b );","language":"c"},{"title":"Call a function in a shared library","code":"#include <stdio.h>\n/* gcc -shared -nostartfiles fakeimglib.c -o fakeimglib.so */\nint openimage(const char *s)\n{\n  static int handle = 100;\n  fprintf(stderr, \"opening %s\\n\", s);\n  return handle++;\n}","language":"c"},{"title":"Call a function in a shared library","code":"using System.Runtime.InteropServices;\n\nclass Program {\n    [DllImport(\"fakelib.dll\")]\n    public static extern int fakefunction(int args);\n\n    static void Main(string[] args) {\n        int r = fakefunction(10);\n    }\n}","language":"csharp"},{"title":"Call a function in a shared library","code":"double add_n(double* a, double* b)\n{\nreturn *a + *b;\n}","language":"c"},{"title":"Call a function in a shared library","code":"#include <stdio.h>\n/* gcc -shared -nostartfiles fakeimglib.c -o fakeimglib.so */\nint openimage(const char *s)\n{\n  static int handle = 100;\n  fprintf(stderr, \"opening %s\\n\", s);\n  return handle++;\n}","language":"c"},{"title":"Call a function in a shared library","code":"import ctypes\n  \nuser32_dll = ctypes.cdll.LoadLibrary('User32.dll')\nprint user32_dll.GetDoubleClickTime()","language":"python"},{"title":"Mandelbrot set","code":"main(k){float i,j,r,x,y=-16;while(puts(\"\"),y++<15)for(x\n=0;x++<84;putchar(\" .:-;!/>)|&IH%*#\"[k&15]))for(i=k=r=0;\nj=r*r-i*i-2+x/25,i=2*r*i+y/10,j*j+i*i<11&&k++<111;r=j);}","language":"C"},{"title":"Mandelbrot set","code":"require 'complex'\n\ndef mandelbrot(a)\n  Array.new(50).inject(0) { |z,c| z*z + a }\nend\n\n(1.0).step(-1,-0.05) do |y|\n  (-2.0).step(0.5,0.0315) do |x|\n    print mandelbrot(Complex(x,y)).abs < 2 ? '*' : ' '\n  end\n  puts\nend","language":"ruby"},{"title":"Look-and-say sequence","code":"import re\n\ndef lookandsay(str):\n    return re.sub(r'(.)\\1*', lambda m: str(len(m.group(0))) + m.group(1), str)\n\nnum = \"1\"\nfor i in range(10):\n    print num\n    num = lookandsay(num)","language":"python"},{"title":"Look-and-say sequence","code":"class String\n  def look_and_say\n    gsub(/(.)\\1*/){|s| s.size.to_s + s[0]}\n  end\nend\n\nss = '1'\n12.times {puts ss; ss = ss.look_and_say}","language":"ruby"},{"title":"Look-and-say sequence","code":"def lookandsay(str)\n  str.gsub(/(.)\\1*/) {$&.length.to_s + $1}\nend\n\nnum = \"1\"\n10.times do\n  puts num\n  num = lookandsay(num)\nend","language":"ruby"},{"title":"Look-and-say sequence","code":"def lookandsay(str)\n  str.chars.chunk{|c| c}.map{|c,x| [x.size, c]}.join\nend\n\nputs num = \"1\"\n9.times do\n  puts num = lookandsay(num)\nend","language":"ruby"},{"title":"Look-and-say sequence","code":"def print_sequence(input_sequence, seq=10)\n  return unless seq > 0\n  puts input_sequence.join\n  result_array = input_sequence.cluster.map do |cluster|\n    [cluster.count, cluster.first]\n  end\n  print_sequence(result_array.flatten, seq-1)\nend\n\nprint_sequence([1])","language":"ruby"},{"title":"Look-and-say sequence","code":"func lookandsay(str) {\n    str.gsub(/((.)\\2*)/, {|a,b| a.len.to_s + b });\n}\n\nvar num = \"1\";\n{\n  say num;\n  num = lookandsay(num);\n} * 10;","language":"ruby"},{"title":"Mutual recursion","code":"local m,n\nfunction m(n) return n > 0 and n - f(m(n-1)) or 0 end\nfunction f(n) return n > 0 and n - m(f(n-1)) or 1 end","language":"lua"},{"title":"Mutual recursion","code":"def F(n): return 1 if n == 0 else n - M(F(n-1))\ndef M(n): return 0 if n == 0 else n - F(M(n-1))\n\nprint ([ F(n) for n in range(20) ])\nprint ([ M(n) for n in range(20) ])","language":"python"},{"title":"Mutual recursion","code":"def F(n)\n  n == 0 ? 1 : n - M(F(n-1))\nend\ndef M(n)\n  n == 0 ? 0 : n - F(M(n-1))\nend\n\np (Array.new(20) {|n| F(n) })\np (Array.new(20) {|n| M(n) })","language":"ruby"},{"title":"Binary strings","code":"s1 = \"A 'string' literal \\n\"\ns2 = 'You may use any of \\' or \" as delimiter'\ns3 = \"\"\"This text \n   goes over several lines\n       up to the closing triple quote\"\"\"","language":"python"},{"title":"Binary strings","code":"s = \"Hello \"\nt = \"world!\"\nu = s + t   # + concatenates","language":"python"},{"title":"Binary strings","code":"assert \"Hello\" == 'Hello'\nassert '\\t' == '\\x09'\nassert \"one\" < \"two\"\nassert \"two\" >= \"three\"","language":"python"},{"title":"Binary strings","code":"txt = \"Some text\"\ntxt += '\\x07'\n# txt refers now to a new string having \"Some text\\x07\"","language":"python"},{"title":"Binary strings","code":"txt = \"Some more text\"\nassert txt[4] == \" \"\nassert txt[0:4] == \"Some\"\nassert txt[:4] == \"Some\" # you can omit the starting index if 0\nassert txt[5:9] == \"more\"\nassert txt[5:] == \"more text\" # omitting the second index means \"to the end\"","language":"python"},{"title":"Binary strings","code":"txt = \"Some more text\"\nassert txt[-1] == \"t\"\nassert txt[-4:] == \"text\"","language":"python"},{"title":"Binary strings","code":"v1 = \"hello world\"\nv2 = v1.replace(\"l\", \"L\")\nprint v2 # prints heLLo worLd","language":"python"},{"title":"Binary strings","code":"v1 = \"hello\" \nv2 = \"world\"\nmsg = v1 + \" \" + v2","language":"python"},{"title":"Binary strings","code":"items = [\"Smith\", \"John\", \"417 Evergreen Av\", \"Chimichurri\", \"481-3172\"]\njoined = \",\".join(items)\nprint joined\n# output:\n# Smith,John,417 Evergreen Av,Chimichurri,481-3172","language":"python"},{"title":"Binary strings","code":"line = \"Smith,John,417 Evergreen Av,Chimichurri,481-3172\"\nfields = line.split(',')\nprint fields\n# output:\n# ['Smith', 'John', '417 Evergreen Av', 'Chimichurri', '481-3172']","language":"python"},{"title":"Binary strings","code":"s1 = b\"A 'byte string' literal \\n\"\ns2 = b'You may use any of \\' or \" as delimiter'\ns3 = b\"\"\"This text \n   goes over several lines\n       up to the closing triple quote\"\"\"","language":"python"},{"title":"Binary strings","code":"x = b'abc'\nlist(x) # evaluates to [97, 98, 99]\nbytes([97, 98, 99]) # evaluates to b'abc'","language":"python"},{"title":"Run-length encoding","code":"from itertools import groupby\ndef encode(input_string):\n    return [(len(list(g)), k) for k,g in groupby(input_string)]\n\ndef decode(lst):\n    return ''.join(c * n for n,c in lst)\n\nencode(\"aaaaahhhhhhmmmmmmmuiiiiiiiaaaaaa\")\ndecode([(5, 'a'), (6, 'h'), (7, 'm'), (1, 'u'), (7, 'i'), (6, 'a')])","language":"python"},{"title":"Run-length encoding","code":"def encode(string)\n  string.scan(/(.)(\\1*)/).collect do |char, repeat|\n    [1 + repeat.length, char] \n  end.join\nend\n\ndef decode(string)\n  string.scan(/(\\d+)(\\D)/).collect {|length, char| char * length.to_i}.join\nend","language":"ruby"},{"title":"Run-length encoding","code":"def encode(string)\n  string.scan(/(.)(\\1*)/).inject(\"\") do |encoding, (char, repeat)|\n    encoding << (1 + repeat.length).to_s << char\n  end\nend\n\ndef decode(string)\n  string.scan(/(\\d+)(\\D)/).inject(\"\") do |decoding, (length, char)|\n    decoding << char * length.to_i\n  end\nend","language":"ruby"},{"title":"Run-length encoding","code":"def encode(str)\n    str.gsub(/(.)\\1*/) {$&.length.to_s + $1}\nend\n\ndef decode(str)\n    str.gsub(/(\\d+)(\\D)/) {$2 * $1.to_i}\nend","language":"ruby"},{"title":"Run-length encoding","code":"orig = \"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW\"\np enc = encode(orig)\np dec = decode(enc)\nputs \"success!\" if dec == orig","language":"ruby"},{"title":"Run-length encoding","code":"func encode(str) {\n  str.gsub(/((.)(\\2*))/, {|a,b| \"#{a.len}#{b}\" });\n}\n\nfunc decode(str) {\n  str.gsub(/(\\d+)(.)/, {|a,b| b * a.to_i });\n}","language":"ruby"},{"title":"Run-length encoding","code":"func encode(str) {\n    str.gsub(/(.)(\\1{0,254})/, {|a,b| b.len+1 -> chr + a});\n}\n\nfunc decode(str) {\n     var chars = str.chars;\n     var r = '';\n     (chars.len/2 -> int).range.each { |i|\n         r += (chars[2*i + 1] * chars[2*i].ord);\n     }\n     return r;\n}","language":"ruby"},{"title":"Sorting algorithms/Gnome sort","code":"list = { 5, 6, 1, 2, 9, 14, 2, 15, 6, 7, 8, 97 }\ngnomeSort(list)\nfor i, j in pairs(list) do\n    print(j)\nend","language":"lua"},{"title":"Miller–Rabin primality test","code":"#ifndef _MILLER_RABIN_H_\n#define _MILLER_RABIN_H\n#include <gmp.h>\nbool miller_rabin_test(mpz_t n, int j);\n#endif","language":"c"},{"title":"Happy numbers","code":"def print_happy\n  happy_numbers = []\n\n  1.step do |i|\n    break if happy_numbers.length >= 8\n    happy_numbers << i if happy?(i)\n  end\n\n  p happy_numbers\nend\n\nprint_happy","language":"ruby"},{"title":"Closest-pair problem","code":"Segment Closest_BruteForce(List<PointF> points)\n{\n    int n = points.Count;\n    var result = Enumerable.Range( 0, n-1)\n        .SelectMany( i => Enumerable.Range( i+1, n-(i+1) )\n            .Select( j => new Segment( points[i], points[j] )))\n            .OrderBy( seg => seg.LengthSquared())\n            .First();\n\n    return result;\n}","language":"csharp"},{"title":"Date manipulation","code":"import datetime\n\ndef mt():\n        datime1=\"March 7 2009 7:30pm EST\"\n        formatting = \"%B %d %Y %I:%M%p \"\n        datime2 = datime1[:-3]  # format can't handle \"EST\" for some reason\n        tdelta = datetime.timedelta(hours=12)                # twelve hours..\n        s3 = datetime.datetime.strptime(datime2, formatting)\n        datime2 = s3+tdelta\n        print datime2.strftime(\"%B %d %Y %I:%M%p %Z\") + datime1[-3:]\n\nmt()","language":"python"},{"title":"Date manipulation","code":"new = t + 12.hours\nnew = t.in(12.hours)\nnew = t.advance(:hours => 12)","language":"ruby"},{"title":"Date manipulation","code":"require \"date\"\n\nputs d1 = DateTime.parse(\"March 7 2009 7:30pm EST\")  \n# d1 + 1 would add a day, so add half a day:\nputs d2 = d1 + 1/2r # 1/2r is a rational; 0.5 would also work\nputs d3 = d2.new_offset('+09:00')","language":"Ruby"},{"title":"Date manipulation","code":"var dt = frequire('DateTime::Format::Strptime')\n\nvar input =  'March 7 2009 7:30pm EST'\ninput.sub!('EST', 'America/New_York')\n\nsay dt.strptime('%b %d %Y %I:%M%p %O', input)   \\\n      .add(hours => 12)                         \\\n      .set_time_zone('America/Edmonton')        \\\n      .format_cldr('MMMM d yyyy h:mma zzz')","language":"ruby"},{"title":"Stack traces","code":"try {\n  throw new Error;\n} catch(e) {\n  alert(e.stack);\n}","language":"javascript"},{"title":"Stack traces","code":"function foo () {\n  var stack = \"Stack trace:\";\n  for (var f = arguments.callee // current function\n       ; f; f = f.caller) {\n    stack += \"\\n\" + f.name;\n  }\n  alert(stack);\n}\nfoo();","language":"javascript"},{"title":"Stack traces","code":"import traceback\n\ndef f(): return g()\ndef g(): traceback.print_stack()\n\nf()","language":"python"},{"title":"Sorting algorithms/Counting sort","code":"#define N 100\n#define MAX_AGE 140\nint main()\n{\n  int ages[N], i;\n\n  for(i=0; i < N; i++) ages[i] = rand()%MAX_AGE;\n  counting_sort_mm(ages, N, 0, MAX_AGE);\n  for(i=0; i < N; i++) printf(\"%d\\n\", ages[i]);\n  return EXIT_SUCCESS;\n}","language":"c"},{"title":"Sorting algorithms/Counting sort","code":"def countingSort(a, min, max):\n    cnt = [0] * (max - min + 1)\n    for x in a:\n        cnt[x - min] += 1\n \n    return [x for x, n in enumerate(cnt, start=min)\n              for i in xrange(n)]","language":"python"},{"title":"Knuth shuffle","code":"from random import randrange\n\ndef knuth_shuffle(x):\n    for i in range(len(x)-1, 0, -1):\n        j = randrange(i + 1)\n        x[i], x[j] = x[j], x[i]\n\nx = list(range(10))\nknuth_shuffle(x)\nprint(\"shuffled:\", x)","language":"python"},{"title":"Knuth shuffle","code":"class Array\n  def knuth_shuffle!\n    (length - 1).downto(1) do |i|\n      j = rand(i + 1)\n      self[i], self[j] = self[j], self[i]\n    end\n    self\n  end\nend","language":"ruby"},{"title":"Knuth shuffle","code":"func knuth_shuffle(a) {\n    for i (a.len ^.. 1) {\n        var j = i.irand\n        a[i, j] = a[j, i]\n    }\n    return a\n}\n\nsay knuth_shuffle(@(1..10))","language":"ruby"},{"title":"Optional parameters","code":"function sorter(table, options) {\n    opts = {}\n    opts.ordering = options.ordering || 'lexicographic';\n    opts.column   = options.column || 0;\n    opts.reverse  = options.reverse || false;\n    \n    // ...\n}\n\nsorter(the_data, {reverse: true, ordering: 'numeric'});","language":"javascript"},{"title":"Optional parameters","code":"/*\nGP;install(\"test_func\", \"vDG\", \"test\", \"path/to/test.gp.so\");\n*/\nvoid\ntest_func(GEN x) {\n  if (x == NULL)\n    pari_printf(\"Argument omitted.\\n\");\n  else\n    pari_printf(\"Argument was: %Ps\\n\", x);\n}","language":"C"},{"title":"Optional parameters","code":"def table_sort(table, opts = {})\n  defaults = {:ordering => :<=>, :column => 0, :reverse => false}\n  opts = defaults.merge(opts)\n\n  c = opts[:column]\n  p = opts[:ordering].to_proc\n  if opts[:reverse]\n    table.sort {|a, b| p.call(b[c], a[c])}\n  else\n    table.sort {|a, b| p.call(a[c], b[c])}\n  end\nend","language":"ruby"},{"title":"Optional parameters","code":"class String {\n    method my_sort(arg) {\n           (self.len <=> arg.len) ->\n        || (self.lc <=> arg.lc)   ->\n        || (self <=> arg)\n    }\n}\n \nsay table_sort(table, column: 1, ordering: 'my_sort');","language":"ruby"},{"title":"Memory allocation","code":"#include <alloca.h>\nint *funcA()\n{\n  int *ints = alloca(SIZEOF_MEMB*NMEMB);\n  ints[0] = 0;                                  /* use it */\n  return ints; /* BUT THIS IS WRONG! It is not like malloc: the memory\n                  does not \"survive\"! */\n}","language":"c"},{"title":"Memory allocation","code":"int main()\n{\n  void* memory = operator new(20); // allocate 20 bytes of memory\n  operator delete(memory);         // deallocate it\n}","language":"cpp"},{"title":"Memory allocation","code":"#include <new>\n\nint main()\n{\n  union\n  {\n    int alignment_dummy; // make sure the block is correctly aligned for ints\n    char data[2*sizeof(int)]; // enough space for 10 ints\n  };\n  int* p = new(&data) int(3); // construct an int at the beginning of data\n  new(p+1) int(5); // construct another int directly following\n}","language":"cpp"},{"title":"Memory allocation","code":"#include <new>\n\nint* p = new(std::nothrow) int(3);","language":"cpp"},{"title":"Memory allocation","code":"public class Blah{\n   //...other methods/data members...\n   protected void finalize() throws Throwable{\n      //Finalization code here\n   }\n   //...other methods/data members...\n}","language":"java"},{"title":"Memory allocation","code":"public class NoFinalize {\n    public static final void main(String[] params) {\n        NoFinalize nf = new NoFinalize();\n    }\n    public NoFinalize() {\n        System.out.println(\"created\");\n    }\n    @Override\n    protected void finalize() {\n        System.out.println(\"finalized\");\n    }\n}","language":"java"},{"title":"Memory allocation","code":"class Thingamajig\n  def initialize\n    fail 'not yet implemented'\n  end\nend\nt = Thingamajig.allocate","language":"ruby"},{"title":"Mouse position","code":"using System;\nusing System.Windows.Forms;\nstatic class Program\n{\n    [STAThread]\n    static void Main()\n    {\n        Console.WriteLine(Control.MousePosition.X);\n        Console.WriteLine(Control.MousePosition.Y);\n    }\n}","language":"csharp"},{"title":"Mouse position","code":"document.addEventListener('mousemove', function(e){\n  var position = { x: e.clientX, y: e.clientY }\n}","language":"javascript"},{"title":"Mouse position","code":"Shoes.app(:title => \"Mouse Position\", :width => 400, :height => 400) do\n  @position = para \"Position : ?, ?\", :size => 12, :margin => 10\n  \n  motion do |x, y|\n    @position.text = \"Position : #{x}, #{y}\"\n  end\nend","language":"Ruby"},{"title":"Keyboard macros","code":"document.onkeydown = function(evt) {\n  if (evt.keyCode === 118) {\n    alert(\"You pressed F7!\");\n    return false;\n  }\n}","language":"javascript"},{"title":"Keyboard macros","code":"Shoes.app do\n  @info = para \"NO KEY is PRESSED.\"\n  keypress do |k|\n    @info.replace \"#{k.inspect} was PRESSED.\"\n  end\nend","language":"ruby"},{"title":"Color of a screen pixel","code":"public static Color getColorAt(int x, int y){\n   return new Robot().getPixelColor(x, y);\n}","language":"java"},{"title":"Color of a screen pixel","code":"def get_pixel_colour(i_x, i_y):\n        import PIL.ImageGrab\n        return PIL.ImageGrab.grab().load()[i_x, i_y]\n\nprint get_pixel_colour(0, 0)","language":"python"},{"title":"Test a function","code":"#include <assert.h>\nint IsPalindrome(char *Str);\n\nint main()\n{\n    assert(IsPalindrome(\"racecar\"));\n    assert(IsPalindrome(\"alice\"));\n}","language":"C"},{"title":"HTTPS/Client-authenticated","code":"import httplib\n\nconnection = httplib.HTTPSConnection('www.example.com',cert_file='myCert.PEM')\nconnection.request('GET','/index.html')\nresponse = connection.getresponse()\ndata = response.read()","language":"python"},{"title":"Dynamic variable names","code":"var varname = 'foo';  // pretend a user input that\nvar value = 42;\neval('var ' + varname + '=' + value);","language":"javascript"},{"title":"Dynamic variable names","code":"var varname = prompt('Variable name:');\nvar value = 42;\nthis[varname] = value;","language":"javascript"},{"title":"Dynamic variable names","code":"p \"Enter a variable name\"\nx = \"@\" + gets.chomp!\ninstance_variable_set x, 42\np \"The value of #{x} is #{instance_variable_get x}\"","language":"ruby"},{"title":"Dynamic variable names","code":"var name = read(\"Enter a variable name: \", String);     # type in 'foo'\n\nclass DynamicVar(name, value) {\n    method init {\n        DynamicVar.def_method(name, ->(_) { value })\n    }\n}\n\nvar v = DynamicVar(name, 42);       # creates a dynamic variable\nsay v.foo;                          # retrieves the value","language":"ruby"},{"title":"Menu","code":"function choice(choices)\n  for i, v in ipairs(choices) do print(i, v) end\n\n  print\"Enter your choice\"\n  local selection = io.read() + 0\n\n  if choices[selection] then print(choices[selection])\n  else choice(choices)\n  end\nend\n\nchoice{\"fee fie\", \"huff and puff\", \"mirror mirror\", \"tick tock\"}","language":"lua"},{"title":"Loops/Break","code":"import java.util.Random;\n\nRandom rand = new Random();\nwhile(true){\n    int a = rand.nextInt(20);\n    System.out.println(a);\n    if(a == 10) break;\n    int b = rand.nextInt(20);\n    System.out.println(b);\n}","language":"java"},{"title":"Loops/Break","code":"for (;;) {\n  var a = Math.floor(Math.random() * 20);\n  print(a);\n  if (a == 10) \n    break;\n  a = Math.floor(Math.random() * 20);\n  print(a);\n}","language":"javascript"},{"title":"Loops/Break","code":"repeat\n  k = math.random(19)\n  print(k)\n  if k == 10 then break end\n  print(math.random(19)\nuntil false","language":"lua"},{"title":"Loops/Break","code":"from random import randrange\n\nwhile True:\n    a = randrange(20)\n    print(a)\n    if a == 10:\n        break\n    b = randrange(20)\n    print(b)","language":"python"},{"title":"Loops/Break","code":"loop do\n  a = rand(20)\n  print a\n  if a == 10\n    puts\n    break\n  end\n  b = rand(20)\n  puts \"\\t#{b}\"\nend","language":"ruby"},{"title":"Loops/Break","code":"loop do\n  print a = rand(20)\n  puts or break if a == 10\n  puts \"\\t#{rand(20)}\"\nend","language":"ruby"},{"title":"Loops/Break","code":"var lim = 20;\nloop {\n    say (var n = lim.rand.int);\n    n == 10 && break;\n    say lim.rand.int;\n}","language":"ruby"},{"title":"Sort stability","code":"var table = [\n  <UK  London>,\n  <US  New\\ York>,\n  <US  Birmingham>,\n  <UK  Birmingham>,\n];\n\ntable.sort {|a,b| a[0] <=> b[0]}.each { |col|\n    say \"#{col[0]} #{col[1]}\"\n}","language":"ruby"},{"title":"Non-decimal radices/Input","code":"Integer.decode(\"0xabcf123\"); // hex\nInteger.decode(\"07651\");     // octal\nInteger.decode(\"123459\");    // decimal","language":"java"},{"title":"Non-decimal radices/Input","code":"+\"0123459\"; // 123459\n+\"0xabcf123\"; // 180154659\n\n// also supports negative numbers, but not for hex:\n+\"-0123459\"; // -123459\n+\"-0xabcf123\"; // NaN","language":"javascript"},{"title":"Non-decimal radices/Input","code":"parseInt(\" 0xF\", 16);\nparseInt(\" F\", 16);\nparseInt(\"17\", 8);\nparseInt(021, 8);\nparseInt(\"015\", 10);\nparseInt(15.99, 10);\nparseInt(\"FXX123\", 16);\nparseInt(\"1111\", 2);\nparseInt(\"15*3\", 10);\nparseInt(\"15e2\", 10);\nparseInt(\"15px\", 10);\nparseInt(\"12\", 13);","language":"javascript"},{"title":"Non-decimal radices/Input","code":"parseInt(\"-F\", 16);\nparseInt(\"-0F\", 16);\nparseInt(\"-0XF\", 16);\nparseInt(-10, 16);\nparseInt(-15.1, 10)\nparseInt(\" -17\", 8);\nparseInt(\" -15\", 10);\nparseInt(\"-1111\", 2);\nparseInt(\"-15e1\", 10);\nparseInt(\"-12\", 13);","language":"javascript"},{"title":"Non-decimal radices/Input","code":"print( tonumber(\"123\") )\nprint( tonumber(\"a5b0\", 16) )\nprint( tonumber(\"011101\", 2) )\nprint( tonumber(\"za3r\", 36) )","language":"lua"},{"title":"Non-decimal radices/Input","code":"dec1 = \"0123459\"\nhex2 = \"abcf123\"\noct3 = \"7651\"\nbin4 = \"101011001\"\n\np dec1.to_i   # => 123459\np hex2.hex    # => 180154659\np oct3.oct    # => 4009\n# nothing for binary","language":"ruby"},{"title":"Non-decimal radices/Input","code":"p dec1.to_i(10)         # => 123459\np hex2.to_i(16)         # => 180154659\np oct3.to_i(8)          # => 4009\np bin4.to_i(2)          # => 345\np \"xyz9\".to_i(10)       # => 0  If there is not a valid letter, 0 is returned.","language":"ruby"},{"title":"Non-decimal radices/Input","code":"p dec1.to_i(0)      # => 5349 (which is 12345 in octal, the 9 is discarded)\np (\"0d\" + dec1).to_i(0)        # => 123459\np (\"0x\" + hex2).to_i(0)        # => 180154659\np (\"0\"  + oct3).to_i(0)        # => 4009\np (\"0o\" + oct3).to_i(0)        # => 4009\np (\"0b\" + bin4).to_i(0)        # => 345","language":"ruby"},{"title":"Non-decimal radices/Input","code":"require 'scanf'\np dec1.scanf(\"%d\")  # => [123459]\np hex2.scanf(\"%x\")  # => [180154659]\np oct3.scanf(\"%o\")  # => [4009]\n# no scanf specifier for binary numbers.","language":"ruby"},{"title":"Events","code":"YUI().use('event-custom', function(Y) {\n    // add a custom event:\n    Y.on('my:event', function () {\n        alert(\"Event fired\");\n    });\n    // fire the event after one second:\n    setTimeout(function () {\n        Y.fire('my:event');\n    }, 1000);\n});","language":"javascript"},{"title":"Events","code":"YUI().use('node-event-simulate', function(Y) {\n    // add a click event handler to a DOM node with id \"button\":\n    Y.one(\"#button\").on(\"click\", function (e) {\n        alert(\"Button clicked\");\n    });\n    // simulate the click after one second:\n    setTimeout(function () {\n        Y.one(\"#button\").simulate(\"click\");\n    }, 1000);\n});","language":"javascript"},{"title":"Scope modifiers","code":"class Demo\n  #public methods here\n  \n  protected\n  #protect methods here\n\n  private\n  #private methods\nend","language":"ruby"},{"title":"Play recorded sounds","code":"import time\nfrom pygame import mixer\nfrom pygame.mixer import music\n\nmixer.init()\nmusic.load('test.mp3')\n\nmusic.play()\ntime.sleep(10)\n\nmusic.stop()\nmixer.quit()","language":"python"},{"title":"Loops/Nested","code":"p slices = [*1..20].shuffle.each_slice(4)\n\nslices.any? do |slice|\n  puts\n  slice.any? do |element|\n    print \"#{element} \"\n    element == 20\n  end\nend\nputs \"done\"","language":"ruby"},{"title":"Loops/Nested","code":"var arr = 10.of{ 10.of{ 20.irand + 1 } }\n\nfor row in arr {\n    for num in row {\n        \"%3d\".printf(num);\n        num == 20 && goto :OUT\n    }\n    print \"\\n\"\n} @:OUT\n\nprint \"\\n\"","language":"ruby"},{"title":"Averages/Median","code":"length: 992021\nmedian: 0.000473\n<: 496010\n>: 496010\n=: 1","language":"c"},{"title":"Averages/Median","code":"[\n  null,\n  4,\n  3.5,\n  2.1\n]","language":"JavaScript"},{"title":"Averages/Median","code":"def median(aray):\n    srtd = sorted(aray)\n    alen = len(srtd)\n    return 0.5*( srtd[(alen-1)//2] + srtd[alen//2])\n\na = (4.1, 5.6, 7.2, 1.7, 9.3, 4.4, 3.2)\nprint a, median(a)\na = (4.1, 7.2, 1.7, 9.3, 4.4, 3.2)\nprint a, median(a)","language":"python"},{"title":"Averages/Median","code":"def median(aray)\n    srtd = aray.sort\n    alen = srtd.length\n    (srtd[(alen-1)/2] + srtd[alen/2]) / 2.0\nend","language":"ruby"},{"title":"Averages/Median","code":"func median(arry) {\n    var srtd = arry.sort;\n    var alen = srtd.length;\n    srtd[(alen-1)/2]+srtd[alen/2] / 2;\n}","language":"ruby"},{"title":"Averages/Mode","code":"def one_mode(ary)\n  ary.max_by { |x| ary.count(x) }\nend","language":"ruby"},{"title":"Averages/Mode","code":"func mode(array) {\n    var c = Hash.new;\n    array.each{|i| c{i} := 0 ++};\n    var max = c.values.max;\n    c.keys.grep{|i| c{i} == max};\n}","language":"ruby"},{"title":"Averages/Mode","code":"func one_mode(arr) {\n    arr.max_by{|i| arr.count(i)};\n}","language":"ruby"},{"title":"Animation","code":"Shoes.app do\n  @direction = 1\n  @label = para \"Hello World! \", :family => 'monospace'\n\n  click {|button, left, top| @direction *= -1 if button == 1}\n\n  animate(8) do |f| \n    t = @label.text\n    @label.text = @direction > 0 ? t[-1] + t[0..-2] : t[1..-1] + t[0]\n  end\nend","language":"ruby"},{"title":"Cumulative standard deviation","code":"function stdev()\n  local sum, sumsq, k = 0,0,0\n  return function(n)\n    sum, sumsq, k = sum + n, sumsq + n^2, k+1\n    return math.sqrt((sumsq / k) - (sum/k)^2)\n  end\nend\n\nldev = stdev()\nfor i, v in ipairs{2,4,4,4,5,5,7,9} do\n  print(ldev(v))\nend","language":"lua"},{"title":"Cumulative standard deviation","code":"def sdaccum\n  n, sum, sum2 = 0, 0.0, 0.0\n  lambda do |num|\n    n += 1\n    sum += num\n    sum2 += num**2\n    Math.sqrt( (sum2 / n) - (sum / n)**2 )\n  end\nend\n\nsd = sdaccum\n[2,4,4,4,5,5,7,9].each {|n| print sd.call(n), \", \"}","language":"ruby"},{"title":"Named parameters","code":"function_with_named_parameters(1, 10.0);\nfunction_with_named_parameters(7, _bar = 3.14);\nfunction_with_named_parameters( _bar = 0.0, _foo = 42);\nfunction_with_named_parameters( _bar = 2.5, _bonk= \"Hello\", _foo = 9);\nfunction_with_named_parameters(9, 2.5, true, \"Hello\");","language":"cpp"},{"title":"Named parameters","code":"function CreatePet(options)\n  local name=options.name\n  local species=options.species\n  local breed=options.breed\n  print('Created a '..breed..' '..species..' named '..name)\nend\nCreatePet{name='Rex',species='Dog',breed='Irish Setter'}\n--position does not matter here.","language":"Lua"},{"title":"Named parameters","code":"def subtract(x, y):\n    return x - y\n\nsubtract(5, 3)         # used as positional parameters; evaluates to 2\nsubtract(y = 3, x = 5) # used as named parameters;      evaluates to 2","language":"python"},{"title":"Named parameters","code":"def example(foo: 0, bar: 1, grill: \"pork chops\")\n  puts \"foo is #{foo}, bar is #{bar}, and grill is #{grill}\"\nend\n\n# Note that :foo is omitted and :grill precedes :bar\nexample(grill: \"lamb kebab\", bar: 3.14)","language":"ruby"},{"title":"Named parameters","code":"def example(opts = {})\n  # Hash#merge raises TypeError if _opts_ is not a Hash.\n  # Nothing checks if _opts_ contains unknown keys.\n  defaults = {foo: 0, bar: 1, grill: \"pork chops\"}\n  opts = defaults.merge(opts)\n\n  printf(\"foo is %s, bar is %s, and grill is %s\\n\",\n         opts[:foo], opts[:bar], opts[:grill])\nend\n\nexample(grill: \"lamb kebab\", bar: 3.14)","language":"ruby"},{"title":"Named parameters","code":"def example(opts = {})\n  defaults = {:foo => 0, :bar => 1, :grill => \"pork chops\"}\n  opts = defaults.merge(opts)\n  printf(\"foo is %s, bar is %s, and grill is %s\\n\",\n         opts[:foo], opts[:bar], opts[:grill])\nend\n\nexample(:grill => \"lamb kebab\", :bar => 3.14)","language":"ruby"},{"title":"Named parameters","code":"func example(foo: 0, bar: 1, grill: \"pork chops\") {\n    say \"foo is #{foo}, bar is #{bar}, and grill is #{grill}\";\n}\n\n# Note that :foo is omitted and :grill precedes :bar\nexample(grill: \"lamb kebab\", bar: 3.14);","language":"ruby"},{"title":"Multiple regression","code":"import numpy as np\n\nheight = [1.47, 1.50, 1.52, 1.55, 1.57, 1.60, 1.63,\n    1.65, 1.68, 1.70, 1.73, 1.75, 1.78, 1.80, 1.83]\nweight = [52.21, 53.12, 54.48, 55.84, 57.20, 58.57, 59.93,\n    61.29, 63.11, 64.47, 66.28, 68.10, 69.92, 72.19, 74.46]\n\nX = np.mat(height**np.arange(3)[:, None])\ny = np.mat(weight)\n\nprint(y * X.T * (X*X.T).I)","language":"python"},{"title":"Multiple regression","code":"import numpy as np\n\nheight = [1.47, 1.50, 1.52, 1.55, 1.57, 1.60, 1.63,\n    1.65, 1.68, 1.70, 1.73, 1.75, 1.78, 1.80, 1.83]\nweight = [52.21, 53.12, 54.48, 55.84, 57.20, 58.57, 59.93,\n    61.29, 63.11, 64.47, 66.28, 68.10, 69.92, 72.19, 74.46]\n\nX = np.array(height)[:, None]**range(3)\ny = weight\n\nprint(np.linalg.lstsq(X, y)[0])","language":"python"},{"title":"Multiple regression","code":"require 'matrix'\n\ndef regression_coefficients y, x\n  y = Matrix.column_vector y.map { |i| i.to_f }\n  x = Matrix.columns x.map { |xi| xi.map { |i| i.to_f }}\n\n  (x.t * x).inverse * x.t * y\nend","language":"ruby"},{"title":"Variables","code":"int a = 4;\nint b;\nint c = Func(a);\n\nb = 5;","language":"csharp"},{"title":"Variables","code":"int a;\ndouble b;\nAClassNameHere c;","language":"java"},{"title":"Variables","code":"int a = 5;\ndouble b;\nint c = 5, d = 6, e, f;\nString x = \"test\";\nString y = x;\nb = 3.14;","language":"java"},{"title":"Variables","code":"final String x = \"blah\";\nfinal String y;\nfinal double[] nums = new double[15];\ny = \"test\";\nx = \"blahblah\"; //not legal\nnums[5] = 2.5; //legal\nnums = new double[10]; //not legal\nfinal Date now = new java.util.Date();\nnow.setTime(1234567890); //legal\nnow = new Date(1234567890); //not legal","language":"java"},{"title":"Variables","code":"a = 1    -- Here we declare a numeric variable\nfruit = \"banana\"    -- Here we declare a string datatype\nneedspeeling = True    -- This is a boolean\nlocal b = 2    -- This variable declaration is prefixed with a scope modifier","language":"lua"},{"title":"Variables","code":"$a_global_var = 5\nclass Demo\n  @@a_class_var = 6\n  A_CONSTANT = 8\n  def initialize\n    @an_instance_var = 7\n  end\n  def incr(a_local_var)\n    @an_instance_var += a_local_var\n  end\nend","language":"ruby"},{"title":"User input/Graphical","code":"#include <QApplication>\n#include \"task.h\"\n\nint main( int argc , char *argv[ ] ) {\n   QApplication app( argc , argv ) ;\n   EntryWidget theWidget ;\n   theWidget.show( ) ;\n   return app.exec( ) ;\n}","language":"cpp"},{"title":"User input/Graphical","code":"import javax.swing.*;\n\npublic class GetInputSwing {\n    public static void main(String[] args) throws Exception {\n        int number = Integer.parseInt(\n                JOptionPane.showInputDialog (\"Enter an Integer\"));\n        String string = JOptionPane.showInputDialog (\"Enter a String\");\n    }\n}","language":"java"},{"title":"User input/Graphical","code":"var str = prompt(\"Enter a string\");\nvar value = 0;\nwhile (value != 75000) {\n    value = parseInt( prompt(\"Enter the number 75000\") );\n}","language":"javascript"},{"title":"User input/Graphical","code":"import Tkinter,tkSimpleDialog\n\nroot = Tkinter.Tk()\nroot.withdraw()\n\nnumber = tkSimpleDialog.askinteger(\"Integer\", \"Enter a Number\")\nstring = tkSimpleDialog.askstring(\"String\", \"Enter a String\")","language":"python"},{"title":"User input/Graphical","code":"Shoes.app do\n  string = ask('Enter a string:')\n  begin\n    number = ask('Enter the number 75000:')\n  end while number.to_i != 75000\n  para %Q{you entered the string \"#{string}\" and the number #{number}}\nend","language":"ruby"},{"title":"User input/Text","code":"import java.util.Scanner;\n\npublic class GetInput {\n    public static void main(String[] args) throws Exception {\n        Scanner s = new Scanner(System.in);\n        System.out.print(\"Enter a string: \");\n        String str = s.nextLine();\n        System.out.print(\"Enter an integer: \");\n        int i = Integer.parseInt(s.next());\n    }\n}","language":"java"},{"title":"User input/Text","code":"import java.util.Scanner;\n\npublic class GetInput {\n    public static void main(String[] args) {\n        Scanner stdin = new Scanner(System.in);\n        String string = stdin.nextLine();\n        int number = stdin.nextInt();\n    }\n}","language":"java"},{"title":"User input/Text","code":"WScript.Echo(\"Enter a string\");\nvar str = WScript.StdIn.ReadLine();\n\nvar val = 0;\nwhile (val != 75000) {\n    WScript.Echo(\"Enter the integer 75000\");\n    val = parseInt( WScript.StdIn.ReadLine() );\n}","language":"javascript"},{"title":"User input/Text","code":"print(\"Enter a string\");\nvar str = readline();\n\nvar val = 0;\nwhile (val != 75000) {\n    print(\"Enter the integer 75000\");\n    val = parseInt( readline() );\n}","language":"javascript"},{"title":"User input/Text","code":"print('Enter a string: ')\ns = io.stdin:read()\nprint('Enter a number: ')\ni = tonumber(io.stdin:read())","language":"Lua"},{"title":"User input/Text","code":"print \"Enter a string: \"\ns = gets\nprintf \"Enter an integer: \"\ni = gets.to_i   # If string entered, will return zero\nprintf \"Enter a real number: \"\nf = Float(gets) rescue nil   # converts a floating point number or returns nil\nputs \"String  = #{s}\"\nputs \"Integer = #{i}\"\nputs \"Float   = #{f}\"","language":"ruby"},{"title":"Tree traversal","code":"[[\"Traversal\",\"Nodes visited\"],\n[\"preorder\",[1,2,4,7,5,3,6,8,9]],[\"inorder\",[7,4,2,5,1,8,6,9,3]],\n[\"postorder\",[7,4,5,2,8,9,6,3,1]],[\"levelorder\",[1,2,3,4,5,6,7,8,9]]]","language":"JavaScript"},{"title":"Tree traversal","code":"{\"preorder\":[1, 2, 4, 7, 5, 3, 6, 8, 9], \n\"inorder\":[7, 4, 2, 5, 1, 8, 6, 9, 3], \n\"postorder\":[7, 4, 5, 2, 8, 9, 6, 3, 1], \n\"level-order\":[1, 2, 3, 4, 5, 6, 7, 8, 9]}","language":"JavaScript"},{"title":"Boolean values","code":"int a = 0;\nint b = 1;\nint c;\nstring str1 = \"initialized string\";\nstring str2; //  \"uninitialized string\";\n\nif (a) {puts(\"first test a is false\");}         // This should not print\nif (b) {puts(\"second test b is true\");}         // This should print\nif (c) {puts(\"third test b is false\");}         // This should not print\nif (!defined(c)) {puts(\"fourth test is true\");} // This should print\nif (str1) {puts(\"fifth test str1 is true\");}    // This should print\nif (str2) {puts(\"sixth test str2 is false\");}   // This should not print","language":"C"},{"title":"Boolean values","code":"if 0 then print \"0\" end             -- This prints\nif \"\" then print\"empty string\" end  -- This prints\nif {} then print\"empty table\" end   -- This prints\nif nil then print\"this won't print\" end\nif true then print\"true\" end\nif false then print\"false\" end      -- This does not print","language":"lua"},{"title":"Boolean values","code":"if (0 || \"0\" || false || nil || \"\" || [] || :()) {\n    say \"true\"\n} else {\n    say \"false\";\n}","language":"ruby"},{"title":"Loops/For with a specified step","code":"int i;\nfor(i = 1; i < 10; i += 2)\n  printf(\"%d\\n\", i);","language":"c"},{"title":"Loops/For with a specified step","code":"SinOsc s => dac;\n\nfor (0 => int i; i < 2000; 5 +=> i )\n{\n    i => s.freq;\n    100::ms => now;\n}","language":"c"},{"title":"Loops/For with a specified step","code":"for (0 => int i; i < 2000; 5 +=> i )\n{\n    <<< i >>>;\n}","language":"c"},{"title":"Loops/For with a specified step","code":"using System;\n \nclass Program {\n    static void Main(string[] args) {    \n        for (int i = 2; i <= 8; i+= 2) {        \n            Console.Write(\"{0}, \", i);\n        }\n\n        Console.WriteLine(\"who do we appreciate?\");\n    }\n}","language":"csharp"},{"title":"Loops/For with a specified step","code":"for(int i = 2; i <= 8;i += 2){\n   System.out.print(i + \", \");\n}\nSystem.out.println(\"who do we appreciate?\");","language":"java"},{"title":"Loops/For with a specified step","code":"var output = '',\n    i;\nfor (i = 2; i <= 8; i += 2) {\n   output += i + ', ';\n}\noutput += 'who do we appreciate?';\ndocument.write(output);","language":"javascript"},{"title":"Loops/For with a specified step","code":"for i=2,9,2 do\n  print(i)\nend","language":"lua"},{"title":"Loops/For with a specified step","code":"for i in xrange(2, 9, 2):\n    print \"%d,\" % i,\nprint \"who do we appreciate?\"","language":"python"},{"title":"Loops/For with a specified step","code":"for i in range(2, 9, 2):\n    print(\"%d, \" % i, end=\"\")\nprint(\"who do we appreciate?\")","language":"python"},{"title":"Loops/For with a specified step","code":"for n in (2..8).step(2)\n  print \"#{n}, \"\nend\nputs \"who do we appreciate?\"","language":"ruby"},{"title":"Loops/For with a specified step","code":"for (var i = 2; i <= 8; i += 2) {\n    say i\n}","language":"ruby"},{"title":"Loops/For with a specified step","code":"for i in (2 .. (8, 2)) {\n    say i\n}","language":"ruby"},{"title":"Loops/For with a specified step","code":"2.to(8).by(2).each { |i|\n    say i\n}","language":"ruby"},{"title":"Ethiopian multiplication","code":"function ethMult(m, n) {\n  var o = !isNaN(m) ? 0 : ''; // same technique works with strings\n  if (n < 1) return o;\n  while (n > 1) {\n    if (n & 1) o += m;  // 3. integer odd/even? (bit-wise and 1)\n    n >>= 1;            // 1. integer halved (by right-shift)\n    m += m;             // 2. integer doubled (addition to self)\n  }\n  return o + m;\n}\n\nethMult(17, 34)","language":"javascript"},{"title":"Arrays","code":"long a2D_Array[3][5];    /* 3 rows, 5 columns. */\nfloat my2Dfloats[][3] = { \n   1.0, 2.0, 0.0,\n   5.0, 1.0, 3.0 };\n#define FLOAT_ROWS (sizeof(my2Dfloats)/sizeof(my2dFloats[0]))","language":"c"},{"title":"Arrays","code":"int numElements = 10;\nint *myArray = malloc(sizeof(int) * numElements);  /* array of 10 integers */\nif ( myArray != NULL )   /* check to ensure allocation succeeded. */\n{\n  /* allocation succeeded */\n  /* at the end, we need to free the allocated memory */\n  free(myArray);\n}\n                    /* calloc() additionally pre-initializes to all zeros */\nshort *myShorts = calloc( numElements, sizeof(short)); /* array of 10 */ \nif (myShorts != NULL)....","language":"c"},{"title":"Arrays","code":"*(array + index) = 1;\nprintf(\"%d\\n\", *(array + index));\n3[array] = 5;","language":"c"},{"title":"Arrays","code":"#define XSIZE 20\ndouble *kernel = malloc(sizeof(double)*2*XSIZE+1);\nif (kernel) {\n   kernel += XSIZE;\n   for (ix=-XSIZE; ix<=XSIZE; ix++) {\n       kernel[ix] = f(ix);\n   ....\n   free(kernel-XSIZE);\n   }\n}","language":"c"},{"title":"Arrays","code":"int *array = malloc (sizeof(int) * 20);\n....\narray = realloc(array, sizeof(int) * 40);","language":"c"},{"title":"Arrays","code":"int array[0]; // instantiate int array\narray << 1; // append item\narray << 2 << 3; // append items\n4 => array[3]; // assign element(4) to index(3)\n5 => array.size; // resize\narray.clear(); // clear elements\n<<<array.size()>>>; // print in cosole array size\n[1,2,3,4,5,6,7] @=> array;\narray.popBack(); // Pop last element","language":"c"},{"title":"Arrays","code":"int[] array = new int[10];\n\narray[0] = 1;\narray[1] = 3;\n\nConsole.WriteLine(array[0]);","language":"csharp"},{"title":"Arrays","code":"using System;\nusing System.Collections.Generic;\n\nList<int> list = new List<int>();\n\nlist.Add(1);\nlist.Add(3);\n\nlist[0] = 2;\n\nConsole.WriteLine(list[0]);","language":"csharp"},{"title":"Arrays","code":"puts(fruit[0]);\nputs(fruit[1]);\nputs(fruit[END]);\nfruit[END+1] = \"banana\";","language":"C"},{"title":"Arrays","code":"l = {}\nl[1] = 1      -- Index starts with 1, not 0.\nl[0] = 'zero' -- But you can use 0 if you want\nl[10] = 2     -- Indexes need not be continuous\nl.a = 3       -- Treated as l['a']. Any object can be used as index\nl[l] = l      -- Again, any object can be used as an index. Even other tables\nfor i,v in next,l do print (i,v) end","language":"lua"},{"title":"Arrays","code":"array = []\n\narray.append(1)\narray.append(3)\n\narray[0] = 2\n\nprint array[0]","language":"python"},{"title":"Arrays","code":"myArray = list()\nfor x in range(height):\n   myArray.append([0] * width)","language":"python"},{"title":"Arrays","code":"try:\n    # This will cause an exception, which will then be caught.\n    print array[len(array)]\nexcept IndexError as e:\n    # Print the exception. \n    print e","language":"python"},{"title":"Nth root","code":"double NthRoot(double value, double degree)\n{\n    return pow(value, (double)(1 / degree));\n};","language":"cpp"},{"title":"Nth root","code":"function nthRoot(num, nArg, precArg) {\n  var n = nArg || 2;\n  var prec = precArg || 12;\n  \n  var x = 1; // Initial guess.\n  for (var i=0; i<prec; i++) {\n    x = 1/n * ((n-1)*x + (num / Math.pow(x, n-1)));\n  }\n  \n  return x;\n}","language":"javascript"},{"title":"Nth root","code":"function nroot(root, num)\n  return num^(1/root)\nend","language":"Lua"},{"title":"Nth root","code":"print nthroot(5, 34, 10)\nprint nthroot(10,42, 20)\nprint nthroot(2, 5, 400)","language":"python"},{"title":"Nth root","code":"def nthroot(n, a, precision = 1e-5)\n  x = Float(a)\n  begin\n    prev = x\n    x = ((n - 1) * prev + a / (prev ** (n - 1))) / n\n  end while (prev - x).abs > precision\n  x \nend\n\np nthroot(5,34)  # => 2.02439745849989","language":"ruby"},{"title":"Nth root","code":"func nthroot(n, a, precision=1e-5) {\n  var x = 1;\n  var prev = 0;\n  while ((prev-x).abs > precision) {\n    prev = x;\n    x = (((n-1)*prev + a/(prev**(n-1))) / n);\n  };\n  return x;\n}\n\nsay nthroot(5, 34);  # => 2.024397458501034082599817835297912829678","language":"ruby"},{"title":"Nth root","code":"func nthroot_fast(n, a, precision=1e-5) {\n  { a = nthroot(2, a, precision) } * int(n-1);\n  a ** (2**int(n-1) / n);\n}\n\nsay nthroot_fast(5, 34, 1e-64);  # => 2.024397458499885042510817245541937419115","language":"ruby"},{"title":"Associative array/Iteration","code":"dict = { 'def' => 1, 'abc' => 2 }\n\nfor( keyvalue in dict ) io.writeln( keyvalue );\nfor( key in dict.keys(); value in dict.values() ) io.writeln( key, value )\ndict.iterate { [key, value]\n    io.writeln( key, value )\n}","language":"ruby"},{"title":"Associative array/Iteration","code":"local t = {\n    [\"foo\"] = \"bar\",\n    [\"baz\"] = 6,\n    fortytwo = 7\n}\n\nfor key,val in pairs(t) do\n    print(string.format(\"%s: %s\", key, val))\nend","language":"lua"},{"title":"Associative array/Iteration","code":"for key, value in my_dict\n  puts \"key = #{key}, value = #{value}\"\nend\n\nfor key in my_dict.keys\n  puts \"key = #{key}\"\nend\n\nfor value in my_dict.values\n  puts \"value = #{value}\"\nend","language":"ruby"},{"title":"Substring","code":"String x = \"testing123\";\nSystem.out.println(x.substring(n, n + m));\nSystem.out.println(x.substring(n));\nSystem.out.println(x.substring(0, x.length() - 1));\nint index1 = x.indexOf('i');\nSystem.out.println(x.substring(index1, index1 + m));\nint index2 = x.indexOf(\"ing\");\nSystem.out.println(x.substring(index2, index2 + m));\n//indexOf methods also have an optional \"from index\" argument which will\n//make indexOf ignore characters before that index","language":"java"},{"title":"Substring","code":"str = 'abcdefgh'\nn = 2\nm = 3\nputs str[n, m]                  #=> cde\nputs str[n..m]                  #=> cd\nputs str[n..-1]                 #=> cdefgh\nputs str[0..-2]                 #=> abcdefg\nputs str[str.index('d'), m]     #=> def\nputs str[str.index('de'), m]    #=> def\nputs str[/a.*d/]                #=> abcd","language":"ruby"},{"title":"Substring","code":"var str = 'abcdefgh';\nvar n = 2;\nvar m = 3;\nsay str.substr(n, m);                   #=> cde\nsay str.substr(n);                      #=> cdefgh\nsay str.substr(0, -1);                  #=> abcdefg\nsay str.substr(str.index('d'), m);      #=> def\nsay str.substr(str.index('de'), m);     #=> def","language":"ruby"},{"title":"First-class functions/Use numbers analogously","code":"multiplier = proc {|n1, n2| proc {|m| n1 * n2 * m}}\nnumlist = [x=2, y=4, x+y]\ninvlist = [0.5, 0.25, 1.0/(x+y)]\np numlist.zip(invlist).map {|n, invn| multiplier[invn, n][0.5]}\n# => [0.5, 0.5, 0.5]","language":"ruby"},{"title":"Loop over multiple arrays simultaneously","code":"#include <stdio.h>\n\nchar a1[] = {'a','b','c'};\nchar a2[] = {'A','B','C'};\nint a3[] = {1,2,3};\n\nint main(void) {\n    for (int i = 0; i < 3; i++) {\n        printf(\"%c%c%i\\n\", a1[i], a2[i], a3[i]);\n    }\n}","language":"c"},{"title":"Loop over multiple arrays simultaneously","code":"int[] numbers = { 1, 2, 3, 4 };\nstring[] words = { \"one\", \"two\", \"three\" };\nConsole.WriteLine(numbers.Zip(words, (first, second) => first + \" \" +\n second));","language":"csharp"},{"title":"Loop over multiple arrays simultaneously","code":"String[] a = {\"a\",\"b\",\"c\"};\nString[] b = {\"A\",\"B\",\"C\"};\nint[] c = {1,2,3};\nfor(int i = 0;i < a.length;i++){\n    System.out.println(a[i] + b[i] + c[i]);\n}","language":"java"},{"title":"Loop over multiple arrays simultaneously","code":"var a = [\"a\",\"b\",\"c\"],\n    b = [\"A\",\"B\",\"C\"],\n    c = [1,2,3],\n    output = \"\",\n    i;\nfor (i = 0; i < a.length; i += 1) {\n    output += a[i] + b[i] + c[i] + \"\\n\";\n}","language":"javascript"},{"title":"Loop over multiple arrays simultaneously","code":"aA1\nbB2\ncC3","language":"JavaScript"},{"title":"Loop over multiple arrays simultaneously","code":"function iter(a, b, c)\n  local i = 0\n  return function()\n    i = i + 1\n    return a[i], b[i], c[i]\n  end\nend\n\nfor u, v, w in iter(a1, a2, a3) do print(u..v..w) end","language":"lua"},{"title":"Loop over multiple arrays simultaneously","code":"from itertools import imap\n\ndef join3(a,b,c):\n   print a+b+c\n\nimap(join3,'abc','ABC','123')","language":"python"},{"title":"Loop over multiple arrays simultaneously","code":"irb(main):001:0> ['a','b','c'].zip(['A','B'], [1,2,3,4]) {|a| puts a.join}\naA1\nbB2\nc3\n=> nil\nirb(main):002:0> ['a','b','c'].zip(['A','B'], [1,2,3,4])\n=> [[\"a\", \"A\", 1], [\"b\", \"B\", 2], [\"c\", nil, 3]]","language":"ruby"},{"title":"Loop over multiple arrays simultaneously","code":"[%w(a b c),%w(A B C),%w(1 2 3)].zip { |i,j,k|\n    say (i, j, k)\n}","language":"ruby"},{"title":"Seven-sided dice from five-sided dice","code":"dice5 = function() return math.random(5) end\n\nfunction dice7()\n  x = dice5() * 5 + dice5() - 6\n  if x > 20 then return dice7() end\n  return x%7 + 1\nend","language":"lua"},{"title":"Seven-sided dice from five-sided dice","code":"from random import randint\n\ndef dice5():\n    return randint(1, 5)\n\ndef dice7():\n    r = dice5() + dice5() * 5 - 6\n    return (r % 7) + 1 if r < 21 else dice7()","language":"python"},{"title":"Call a foreign-language function","code":"public class JNIDemo\n{\n  static\n  {  System.loadLibrary(\"JNIDemo\");  }\n  \n  public static void main(String[] args)\n  {\n    System.out.println(callStrdup(\"Hello World!\"));\n  }\n  \n  private static native String callStrdup(String s);\n}","language":"java"},{"title":"Call a foreign-language function","code":"import ctypes\nlibc = ctypes.CDLL(\"/lib/libc.so.6\")\nlibc.strcmp(\"abc\", \"def\")     # -1\nlibc.strcmp(\"hello\", \"hello\") #  0","language":"python"},{"title":"Call a foreign-language function","code":"# extconf.rb\nrequire 'mkmf'\ncreate_makefile('rc_strdup')","language":"ruby"},{"title":"Call a foreign-language function","code":"# demo.rb\nrequire 'rc_strdup'\nputs RosettaCode.strdup('This string gets duplicated.')","language":"ruby"},{"title":"Call a foreign-language function","code":"require 'fiddle'\nrequire 'fiddle/import'\n\nmodule C\n  extend Fiddle::Importer\n  dlload Fiddle::Handle::DEFAULT\n  extern 'char *strdup(char *)'\nend\n\nduplicate = C.strdup(\"This is a string!\")\nputs duplicate.to_s\nFiddle.free duplicate","language":"ruby"},{"title":"Use another language to call a function","code":"#include <stdio.h>\n#include \"_cgo_export.h\"\n\nvoid Run()\n{\n   char     Buffer [1024];\n   size_t   Size = sizeof (Buffer);\n\n   if (0 == Query (Buffer, &Size))\n   ...","language":"c"},{"title":"Use another language to call a function","code":"int Query(char *Data, size_t *Length) {\n   FILE *fp;\n   char buf[64];\n\n   sprintf(buf, \"/usr/bin/picolisp query.l %d -bye\", *Length);\n   if (!(fp = popen(buf, \"r\")))\n      return 0;\n   fgets(Data, *Length, fp);\n   *Length = strlen(Data);\n   return pclose(fp) >= 0 && *Length != 0;\n}","language":"C"},{"title":"Use another language to call a function","code":"# store this in file rc_embed.py\n# store this in file rc_embed.py\ndef query(buffer_length):\n    message = b'Here am I'\n    L = len(message)\n    return message[0:L*(L <= buffer_length)]","language":"python"},{"title":"Use another language to call a function","code":"#include <tcl.h>\nTcl_Interp *interp;\n\nint main(int argc, char **argv) {\n    Tcl_FindExecutable(argv[0]); /* Initializes library */\n    interp = Tcl_CreateInterp(); /* Make an interpreter */\n\n    /* Rest of contents of main() from task header... */\n}","language":"c"},{"title":"Flatten a list","code":"function flatten(list) {\n  return list.reduce(function (acc, val) {\n    return acc.concat(val.constructor === Array ? flatten(val) : val);\n  }, []);\n}","language":"javascript"},{"title":"Flatten a list","code":"// flatten :: Tree a -> [a]\n    function flatten(a) {\n        return a instanceof Array ? [].concat.apply([], a.map(flatten)) : a;\n    }","language":"JavaScript"},{"title":"Flatten a list","code":"// flatten :: Tree a -> [a]\nconst flatten = t =>\n    Array.isArray(t) ? (\n        [].concat.apply([], t.map(flatten))\n    ): t;","language":"javascript"},{"title":"Flatten a list","code":"function flatten(list) {\n  for (let i = 0; i < list.length; i++) {\n    while (true) {\n      if (Array.isArray(list[i])) {\n              list.splice(i, 1, ...list[i]);\n      } else {\n              break;\n      }\n    }\n  }\n  return list;\n}","language":"javascript"},{"title":"Flatten a list","code":"func flatten(a) {\n    var flat = [];\n    a.each { |item|\n        flat += (item.is_an(Array) ? flatten(item) : [item]);\n    };\n    return flat;\n}\n\nvar arr = [[1], 2, [[3,4], 5], [[[]]], [[[6]]], 7, 8, []];\nsay flatten(arr).dump;      # used-defined function\nsay arr.flatten.dump;       # built-in method for Array obj","language":"ruby"},{"title":"Flatten a list","code":"def (flatten seq acc)\n  if no.seq\n       acc\n     ~list?.seq\n       (cons seq acc)\n     :else\n       (flatten car.seq (flatten cdr.seq acc))","language":"python"},{"title":"Array concatenation","code":"using System.Linq;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        int[] a = { 1, 2, 3 };\n        int[] b = { 4, 5, 6 };\n\n        int[] c = a.Concat(b).ToArray();\n    }\n}","language":"csharp"},{"title":"Array concatenation","code":"var a = [1,2,3],\n    b = [4,5,6],\n    c = a.concat(b); //=> [1,2,3,4,5,6]","language":"javascript"},{"title":"Array concatenation","code":"void main() {\n    int a[] = {0, 1, 2, 3, 4};\n    int b[] = {5, 6, 7, 8, 9};\n    int c[] = {(expand)a, (expand)b};\n    puts(c);\n}","language":"C"},{"title":"Array concatenation","code":"a = {1, 2, 3}\nb = {4, 5, 6}\n\nfor _, v in pairs(b) do\n    table.insert(a, v)\nend\n\nprint(table.concat(a, \", \"))","language":"lua"},{"title":"Array concatenation","code":"#include <order/interpreter.h>\n\nORDER_PP( 8tuple_append(8tuple(1, 2, 3), 8tuple(4, 5, 6), 8pair(7, 8)) )\n// -> (1,2,3,4,5,6,7,8)\n\nORDER_PP( 8seq_append(8seq(1, 2, 3), 8seq(4, 5, 6), 8seq(7, 8)) )\n// -> (1)(2)(3)(4)(5)(6)(7)(8)","language":"c"},{"title":"Array concatenation","code":"arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\narr3 = [7, 8, 9]\narr4 = arr1 + arr2\nassert arr4 == [1, 2, 3, 4, 5, 6]\narr4.extend(arr3)\nassert arr4 == [1, 2, 3, 4, 5, 6, 7, 8, 9]","language":"python"},{"title":"Array concatenation","code":"arr5 = [4, 5, 6]\narr6 = [7, 8, 9]\narr6 += arr5\nassert arr6 == [7, 8, 9, 4, 5, 6]","language":"python"},{"title":"Array concatenation","code":"arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\narr3 = [7, 8, 9]\narr4 = arr1 + arr2  # => [1, 2, 3, 4, 5, 6]\narr4.concat(arr3)  # => [1, 2, 3, 4, 5, 6, 7, 8, 9]","language":"ruby"},{"title":"Array concatenation","code":"# concat multiple arrays:\n[arr1,arr2,arr3].flatten(1)\n# ignore nil:\n[arr1,arr2,arr3].compact.flatten(1)","language":"ruby"},{"title":"Array concatenation","code":"var arr1 = [1, 2, 3];\nvar arr2 = [4, 5, 6];\nvar arr3 = (arr1 + arr2);   # => [1, 2, 3, 4, 5, 6]","language":"ruby"},{"title":"N-queens problem","code":"from itertools import permutations\n\nn = 8\ncols = range(n)\nfor vec in permutations(cols):\n    if n == len(set(vec[i]+i for i in cols)) \\\n         == len(set(vec[i]-i for i in cols)):\n        print ( vec )","language":"python"},{"title":"N-queens problem","code":"(1..6).each do |n|\n  puzzle = Queen.new(n)\n  puts \" #{n} Queen : #{puzzle.count}\"\nend\n\n(7..12).each do |n|\n  puzzle = Queen.new(n, false)                # do not display\n  puts \" #{n} Queen : #{puzzle.count}\"\nend","language":"ruby"},{"title":"Doubly-linked list/Traversal","code":"#include <iostream>\n#include <list>\n\nint main ()\n{\n    std::list<int> numbers {1, 5, 7, 0, 3, 2};\n    for(const auto& i: numbers)\n        std::cout << i << ' ';\n    std::cout << '\\n';\n}","language":"cpp"},{"title":"Repeat a string","code":"#include <string>\n#include <iostream>\n\nint main( ) {\n   std::cout << std::string( 5, '*' ) << std::endl ;\n   return 0 ;\n}","language":"cpp"},{"title":"Repeat a string","code":"String.prototype.repeat = function(n) {\n    return new Array(1 + (n || 0)).join(this);\n}\n\nconsole.log(\"ha\".repeat(5));  // hahahahaha","language":"javascript"},{"title":"Stair-climbing puzzle","code":"void step_up(void)\n{\n    while (!step()) {\n        step_up();\n    }\n}","language":"c"},{"title":"Stair-climbing puzzle","code":"void step_up(void)\n{\n    int i = 0;\n\n    while (i < 1) {\n        if (step()) {\n            ++i;\n        } else {\n            --i;\n        }\n    }\n}","language":"c"},{"title":"Stair-climbing puzzle","code":"void step_up()\n{\n  while (!step()) step_up();\n}","language":"cpp"},{"title":"Stair-climbing puzzle","code":"void step_up()\n{\n  for (int i = 0; i < 1; step()? ++i : --i);\n}","language":"cpp"},{"title":"Stair-climbing puzzle","code":"void step_up() {\n    while (!step()) step_up();\n}","language":"csharp"},{"title":"Stair-climbing puzzle","code":"public void stepUp() {\n  while (!step()) stepUp();\n}","language":"java"},{"title":"Stair-climbing puzzle","code":"public void stepUp(){\n  for (int i = 0; i < 1; step() ? ++i : --i);\n}","language":"java"},{"title":"Stair-climbing puzzle","code":"function step_up()\n    while not step() do step_up() end\nend","language":"Lua"},{"title":"Stair-climbing puzzle","code":"def step_up1()\n  \"Straightforward implementation: keep track of how many level we\n   need to ascend, and stop when this count is zero.\"\n  deficit = 1\n  while deficit > 0:\n    if step():\n      deficit -= 1\n    else:\n      deficit += 1","language":"python"},{"title":"Stair-climbing puzzle","code":"def step_up2():\n  \"No numbers.\"\n  while not step():\n    step_up2() # undo the fall","language":"python"},{"title":"Stair-climbing puzzle","code":"func step_up() {\n    while (!step()) {\n        step_up();\n    }\n}","language":"ruby"},{"title":"First-class functions","code":"function compose(f,g) return function(...) return f(g(...)) end end\n\nfn = {math.sin, math.cos, function(x) return x^3 end}\ninv = {math.asin, math.acos, function(x) return x^(1/3) end}\n\nfor i, v in ipairs(fn) do\n  local f = compose(v, inv[i])\n  print(f(0.5))\nend","language":"lua"},{"title":"First-class functions","code":"cube = proc{|x| x ** 3}\ncroot = proc{|x| x ** (1.quo 3)}\ncompose = proc {|f,g| proc {|x| f[g[x]]}}\nfunclist = [Math.method(:sin), Math.method(:cos), cube]\ninvlist = [Math.method(:asin), Math.method(:acos), croot]\n\nputs funclist.zip(invlist).map {|f, invf| compose[invf, f][0.5]}","language":"ruby"},{"title":"Undefined values","code":"int? answer = null;\nif (answer == null) {\n    answer = 42;\n}","language":"csharp"},{"title":"Undefined values","code":"Nullable<int> answer = new Nullable<int>();\nif (!answer.HasValue) {\n    answer = new Nullable<int>(42);\n}","language":"csharp"},{"title":"Undefined values","code":"Integer i = null;  // variable i is undefined\nif (i == null) {\n    i = 1;\n}","language":"java"},{"title":"Undefined values","code":"var a;\na === void 0; // true\nb === void 0; // throws a ReferenceError","language":"javascript"},{"title":"Undefined values","code":"print( a )\n\nlocal b\nprint( b )\n\nif b == nil then\n    b = 5\nend\nprint( b )","language":"lua"},{"title":"Hamming numbers","code":"int main() {\n  int count = 1;\n  for (unsigned int i : Ham({2,3,5,7})) {\n    std::cout << i << ' ';\n    if (count++ == 64) break;\n  }\n  std::cout << std::endl;\n  return 0;\n}","language":"cpp"},{"title":"Hamming numbers","code":"hamming = Enumerator.new do |yielder|\n  next_ham = 1\n  queues = [[ 2, []], [3, []], [5, []] ]\n  \n  loop do\n    yielder << next_ham   # or: yielder.yield(next_ham)\n    \n    queues.each {|m,queue| queue << next_ham * m}\n    next_ham = queues.collect{|m,queue| queue.first}.min\n    queues.each {|m,queue| queue.shift if queue.first==next_ham}\n  end\nend","language":"ruby"},{"title":"Symmetric difference","code":"a = [\"John\", \"Serena\", \"Bob\", \"Mary\", \"Serena\"]\nb = [\"Jim\", \"Mary\", \"John\", \"Jim\", \"Bob\"]\n# the union minus the intersection:\np sym_diff = (a | b)-(a & b)  # => [\"Serena\", \"Jim\"]","language":"ruby"},{"title":"Symmetric difference","code":"require 'set'\na = Set[\"John\", \"Serena\", \"Bob\", \"Mary\", \"Serena\"] #Set removes duplicates\nb = Set[\"Jim\", \"Mary\", \"John\", \"Jim\", \"Bob\"]\np sym_diff = a ^ b # => #<Set: {\"Jim\", \"Serena\"}>","language":"ruby"},{"title":"Symmetric difference","code":"var a = [\"John\", \"Serena\", \"Bob\", \"Mary\", \"Serena\"];\nvar b = [\"Jim\", \"Mary\", \"John\", \"Jim\", \"Bob\"];\na ^ b -> unique.dump.say;","language":"ruby"},{"title":"Multiplication tables","code":"def multiplication_table(n)\n  puts \"    |\" + (\" %3d\" * n) % [*1..n]\n  puts \"----+\" + \"----\" * n\n  1.upto(n) do |x|\n    print \"%3d |\" % x\n    1.upto(x-1) {|y| print \"    \"}\n    x.upto(n)   {|y| print \" %3d\" % (x*y)}\n    puts\n  end\nend\n\nmultiplication_table 12","language":"ruby"},{"title":"Rate counter","code":"var benchmark = frequire('Benchmark');\n\nfunc job1 {\n    #...job1 code...\n}\nfunc job2 {\n    #...job2 code...\n}\n\nconst COUNT = -1;   # run for one CPU second\nbenchmark.timethese(COUNT, Hash.new('Job1' => job1, 'Job2' => job2));","language":"ruby"},{"title":"Execute HQ9+","code":"var hq9 = HQ9Interpreter();\nloop {\n    var in = read('HQ9+>', String) \\\\ break;\n    hq9.run(in)\n}","language":"ruby"},{"title":"Accumulator factory","code":"fun accumulator(sum): |n| -> sum += n \nlet f = accumulator(5)\nprint f(5)   # 10\nprint f(10)  # 20\nprint f(2.4) # 22.4","language":"python"},{"title":"Accumulator factory","code":"std::ostream& operator<<(std::ostream& dst, const Accumulator_& acc)\n{\n        return acc.val_->Write(dst);\n}","language":"cpp"},{"title":"Accumulator factory","code":"function accumulator(sum) {\n  return function(n) {\n    return sum += n;\n  }\n}\nvar x = accumulator(1);\nx(5);\nconsole.log(accumulator(3).toString() + '<br>');\nconsole.log(x(2.3));","language":"javascript"},{"title":"Accumulator factory","code":"let accumulator = sum => (n => sum += n);\nlet x = accumulator(1);\nconsole.log(x(5));\naccumulator(3);\nconsole.log(x(2.3));","language":"javascript"},{"title":"Accumulator factory","code":"function accumulator(sum) function(n) sum += n;\nvar x = accumulator(1);\nx(5);\nconsole.log(accumulator(3).toSource());\nconsole.log(x(2.3));","language":"javascript"},{"title":"Accumulator factory","code":"function acc(init)\n  init = init or 0\n  return function(delta)\n    init = init + (delta or 0)\n    return init\n  end\nend","language":"Lua"},{"title":"Accumulator factory","code":"def accumulator(sum):\n  def f(n):\n    nonlocal sum\n    sum += n\n    return sum\n  return f\n\nx = accumulator(1)\nx(5)\nprint(accumulator(3))\nprint(x(2.3))","language":"python"},{"title":"Accumulator factory","code":"def accumulator(sum):\n  while True:\n    sum += yield sum\n\nx = accumulator(1)\nx.send(None)\nx.send(5)\nprint(accumulator(3))\nprint(x.send(2.3))","language":"python"},{"title":"Accumulator factory","code":"def accumulator(sum)\n  lambda {|n| sum += n}\nend\n\n# mixing Integer and Float\nx = accumulator(1)\nx.call(5)\naccumulator(3)\nputs x.call(2.3)  # prints 8.3","language":"ruby"},{"title":"Accumulator factory","code":"def accumulator(sum)\n  lambda {|n| sum += n}\nend\nclass << self\n  define_method :x, &accumulator(1)\nend\nx(5)\naccumulator(3)\nputs x(2.3)  # prints 8.3","language":"ruby"},{"title":"Accumulator factory","code":"class Accumulator(sum) {\n    method add(num) {\n        sum += num;\n    }\n}\n\nvar x = Accumulator(1);\nx.add(5);\nAccumulator(3);\nsay x.add(2.3);               # prints: 8.3","language":"ruby"},{"title":"Accumulator factory","code":"func Accumulator(sum) {\n    func(num) { sum += num };\n}\n\nvar x = Accumulator(1);\nx(5);\nAccumulator(3);\nsay x(2.3);                  # prints: 8.3","language":"ruby"},{"title":"Find the missing permutation","code":"local permute, tablex = require(\"pl.permute\"), require(\"pl.tablex\")\nlocal permList, pStr = {\n    \"ABCD\", \"CABD\", \"ACDB\", \"DACB\", \"BCDA\", \"ACBD\", \"ADCB\", \"CDAB\",\n    \"DABC\", \"BCAD\", \"CADB\", \"CDBA\", \"CBAD\", \"ABDC\", \"ADBC\", \"BDCA\",\n    \"DCBA\", \"BACD\", \"BADC\", \"BDAC\", \"CBDA\", \"DBCA\", \"DCAB\"\n}\nfor perm in permute.iter({\"A\",\"B\",\"C\",\"D\"}) do\n    pStr = table.concat(perm)\n    if not tablex.find(permList, pStr) then print(pStr) end\nend","language":"Lua"},{"title":"Find the missing permutation","code":"from itertools import permutations\n\ngiven = '''ABCD CABD ACDB DACB BCDA ACBD ADCB CDAB DABC BCAD CADB CDBA\n           CBAD ABDC ADBC BDCA DCBA BACD BADC BDAC CBDA DBCA DCAB'''.split()\n\nallPerms = [''.join(x) for x in permutations(given[0])]\n\nmissing = list(set(allPerms) - set(given)) # ['DBAC']","language":"python"},{"title":"Find the missing permutation","code":"given = %w{\n  ABCD CABD ACDB DACB BCDA ACBD ADCB CDAB DABC BCAD CADB CDBA\n  CBAD ABDC ADBC BDCA DCBA BACD BADC BDAC CBDA DBCA DCAB\n}\n \nall = given[0].chars.permutation.collect(&:join)\n \nputs \"missing: #{all - given}\"","language":"ruby"},{"title":"Pangram checker","code":"require\"lpeg\"\nS, C = lpeg.S, lpeg.C\nfunction ispangram(s)\n  return #(C(S(s)^0):match\"abcdefghijklmnopqrstuvwxyz\") == 26\nend\n\nprint(ispangram\"waltz, bad nymph, for quick jigs vex\")\nprint(ispangram\"bobby\")\nprint(ispangram\"long sentence\")","language":"lua"},{"title":"Pangram checker","code":"import string, sys\nif sys.version_info[0] < 3:\n    input = raw_input\n\ndef ispangram(sentence, alphabet=string.ascii_lowercase):\n    alphaset = set(alphabet)\n    return alphaset <= set(sentence.lower())\n\nprint ( ispangram(input('Sentence: ')) )","language":"python"},{"title":"Pangram checker","code":"def pangram?(sentence)\n  unused_letters = ('a'..'z').to_a - sentence.downcase.chars.to_a\n  unused_letters.empty?\nend\n\np pangram?('this is a sentence')  # ==> false\np pangram?('The quick brown fox jumps over the lazy dog.')  # ==> true","language":"ruby"},{"title":"Compile-time calculation","code":"#include <stdio.h>\n#include <order/interpreter.h>\n\n#define ORDER_PP_DEF_8fac ORDER_PP_FN( \\\n8fn(8X, 8seq_fold(8times, 1, 8seq_iota(1, 8inc(8X)))) )\n\nint main(void) {\n        printf(\"10! = %d\\n\", ORDER_PP( 8to_lit( 8fac(10) ) ) );\n        return 0;\n}","language":"c"},{"title":"Compile-time calculation","code":"#include <stdio.h>\nconst int val = 2*3*4*5*6*7*8*9*10;\nint main(void) {\n        printf(\"10! = %d\\n\", val );\n        return 0;\n}","language":"c"},{"title":"Compile-time calculation","code":"#include <stdio.h>\n\nconstexpr int factorial(int n) {\n    return n ? (n * factorial(n - 1)) : 1;\n}\n\nconstexpr int f10 = factorial(10);\n\nint main() {\n    printf(\"%d\\n\", f10);\n    return 0;\n}","language":"cpp"},{"title":"Compile-time calculation","code":"...\nSTRING_LITERAL(TMP122, \"3628800\", 7);\n...","language":"C"},{"title":"String interpolation (included)","code":"#include <stdio.h>\n\nint main() {\n  const char *extra = \"little\";\n  printf(\"Mary had a %s lamb.\\n\", extra);\n  return 0;\n}","language":"c"},{"title":"String interpolation (included)","code":"#include <string>\n#include <iostream>\n\nint main( ) {\n   std::string original( \"Mary had a X lamb.\" ) , toBeReplaced( \"X\" ) ,\n      replacement ( \"little\" ) ;\n   std::string newString = original.replace( original.find( \"X\" ) ,\n         toBeReplaced.length( ) , replacement ) ;\n   std::cout << \"String after replacement: \" << newString << \" \\n\" ;\n   return 0 ;\n}","language":"cpp"},{"title":"String interpolation (included)","code":"class Program\n{\n    static void Main()\n    {\n        string extra = \"little\";\n        string formatted = $\"Mary had a {extra} lamb.\";\n        System.Console.WriteLine(formatted);\n    }\n}","language":"csharp"},{"title":"String interpolation (included)","code":"// ECMAScript 6\nvar X = \"little\";\nvar replaced = `Mary had a ${X} lamb`;","language":"javascript"},{"title":"String interpolation (included)","code":"GEN\nstring_interpolate(GEN n)\n{\n  pari_printf(\"The value was: %Ps.\\n\", n);\n  GEN s = pari_sprintf(\"Storing %Ps in a string\", n);\n}","language":"C"},{"title":"String interpolation (included)","code":"irb(main):001:0> extra = 'little'\n=> \"little\"\nirb(main):002:0> \"Mary had a #{extra} lamb.\"\n=> \"Mary had a little lamb.\"\nirb(main):003:0> \"Mary had a %s lamb.\" % extra\n=> \"Mary had a little lamb.\"","language":"ruby"},{"title":"Averages/Pythagorean means","code":"{\n  \"values\": {\n    \"Arithmetic\": 5.5,\n    \"Geometric\": 4.528728688116765,\n    \"Harmonic\": 3.414171521474055\n  },\n  \"test\": \"is A >= G >= H ? yes\"\n}","language":"JavaScript"},{"title":"Averages/Pythagorean means","code":"{\n  \"values\": {\n    \"Arithmetic\": 5.5,\n    \"Geometric\": 4.528728688116765,\n    \"Harmonic\": 3.414171521474055\n  },\n  \"test\": \"is A >= G >= H ? yes\"\n}","language":"JavaScript"},{"title":"Averages/Pythagorean means","code":"function fsum(f, a, ...) return a and f(a) + fsum(f, ...) or 0 end\nfunction pymean(t, f, finv) return finv(fsum(f, unpack(t)) / #t) end\nnums = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\n--arithmetic\na = pymean(nums, function(n) return n end, function(n) return n end)\n--geometric\ng = pymean(nums, math.log, math.exp)\n--harmonic\nh = pymean(nums, function(n) return 1/n end, function(n) return 1/n end)\nprint(a, g, h)\nassert(a >= g and g >= h)","language":"lua"},{"title":"Averages/Root mean square","code":"function root_mean_square(ary) {\n    var sum_of_squares = ary.reduce(function(s,x) {return (s + x*x)}, 0);\n    return Math.sqrt(sum_of_squares / ary.length);\n}\n\nprint( root_mean_square([1,2,3,4,5,6,7,8,9,10]) ); // ==> 6.2048368229954285","language":"javascript"},{"title":"Averages/Root mean square","code":"function sumsq(a, ...) return a and a^2 + sumsq(...) or 0 end\nfunction rms(t) return (sumsq(unpack(t)) / #t)^.5 end\n\nprint(rms{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})","language":"lua"},{"title":"Averages/Root mean square","code":"def rms(seq)\n  Math.sqrt(seq.inject(0.0) {|sum, x| sum + x*x} / seq.length)\nend\nputs rms (1..10).to_a   # => 6.2048368229954285","language":"ruby"},{"title":"Averages/Root mean square","code":"func rms(a) {\n    sqrt(a.map{.**2}.sum / a.len)\n}\n\nsay rms(1..10)","language":"ruby"},{"title":"Dot product","code":"public static decimal DotProduct(decimal[] a, decimal[] b) {\n    return a.Zip(b, (x, y) => x * y).Sum();\n}","language":"csharp"},{"title":"Dot product","code":"function dot_product(ary1, ary2) {\n    if (ary1.length != ary2.length)\n        throw \"can't find dot product: arrays have different lengths\";\n    var dotprod = 0;\n    for (var i = 0; i < ary1.length; i++)\n        dotprod += ary1[i] * ary2[i];\n    return dotprod;\n}\n\nprint(dot_product([1,3,-5],[4,-2,-1])); // ==> 3\nprint(dot_product([1,3,-5],[4,-2,-1,0])); // ==> exception","language":"javascript"},{"title":"Dot product","code":"function dotp(x,y) {\n    function dotp_sum(a,b) { return a + b; }\n    function dotp_times(a,i) { return x[i] * y[i]; }\n    if (x.length != y.length)\n        throw \"can't find dot product: arrays have different lengths\";\n    return x.map(dotp_times).reduce(dotp_sum,0);\n}\n\ndotp([1,3,-5],[4,-2,-1]); // ==> 3\ndotp([1,3,-5],[4,-2,-1,0]); // ==> exception","language":"javascript"},{"title":"Dot product","code":"function dotprod(a, b)\n  local ret = 0\n  for i = 1, #a do\n    ret = ret + a[i] * b[i]\n  end\n  return ret\nend\n\nprint(dotprod({1, 3, -5}, {4, -2, 1}))","language":"lua"},{"title":"Dot product","code":"def dotp(a,b):\n    assert len(a) == len(b), 'Vector sizes must match'\n    return sum(aterm * bterm for aterm,bterm in zip(a, b))\n\nif __name__ == '__main__':\n    a, b = [1, 3, -5], [4, -2, -1]\n    assert dotp(a,b) == 3","language":"python"},{"title":"Dot product","code":"irb(main):001:0> require 'matrix'\n=> true\nirb(main):002:0> Vector[1, 3, -5].inner_product Vector[4, -2, -1]\n=> 3","language":"ruby"},{"title":"Dot product","code":"class Array\n  def dot_product(other)\n    raise \"not the same size!\" if self.length != other.length\n    self.zip(other).inject(0) {|dp, (a, b)| dp += a*b}\n  end\nend\n\np [1, 3, -5].dot_product [4, -2, -1]   # => 3","language":"ruby"},{"title":"Luhn test of credit card numbers","code":"var luhn10 = function(a,b,c,d,e) {\n  for(d = +a[b = a.length-1], e=0; b--;)\n    c = +a[b], d += ++e % 2 ? 2 * c % 10 + (c > 4) : c;\n  return !(d%10)\n};\n\n// returns true\nluhn10('4111111111111111') \n\n// returns false\nluhn10('4111111111111112')","language":"javascript"},{"title":"Hailstone sequence","code":"{\"length\":112,\"sequence\":[27,82,41,124,62,31,94,47,142,71,214,\n107,322,161,484,242,121,364,182,91,274,137,412,206,103,310,155,466,233,700,350,\n175,526, 263,790,395,1186,593,1780,890,445,1336,668,334,167,502,251,754,377,\n1132,566,283,850,425,1276,638,319,958,479,1438,719,2158,1079,3238,1619,4858,\n2429,7288,3644,1822,911,2734,1367,4102,2051,6154,3077,9232,4616,2308,1154,577,\n1732,866,433,1300,650,325,976,488,244,122,61,184,92,46,23,70,35,106,53,160,80,\n40,20,10,5,16,8,4,2,1]}","language":"JavaScript"},{"title":"Hailstone sequence","code":"[\n  {\"n\":77031, \"l\":351},   // 100,000\n  {\"n\":837799, \"l\":525},  // 1,000,000\n  {\"n\":8400511, \"l\":686}  // 10,000,000\n]","language":"JavaScript"},{"title":"Hailstone sequence","code":"ORDER_PP(\n  8let((8P,\n        8seq_head(\n          8seq_sort(8fn(8P, 8Q, 8greater(8tuple_at_1(8P),\n                                         8tuple_at_1(8Q))),\n                    8seq_map(8fn(8N,\n                                 8pair(8N, 8seq_size(8hailstone(8N)))),\n                             8seq_iota(1, 8nat(1,0,0,0,0,0)))))),\n       8pair(8to_lit(8tuple_at_0(8P)), 8to_lit(8tuple_at_1(8P)))) )","language":"c"},{"title":"Price fraction","code":"function getScaleFactor(v) {\n\n  var values = ['0.10','0.18','0.26','0.32','0.38','0.44','0.50','0.54',\n                '0.58','0.62','0.66','0.70','0.74','0.78','0.82','0.86',\n                '0.90','0.94','0.98','1.00'];\n\n  return values[(v * 100 - 1) / 5 | 0];\n}","language":"javascript"},{"title":"Sutherland-Hodgman polygon clipping","code":"{100.000000, 116.666667},\n{125.000000, 100.000000},\n{275.000000, 100.000000},\n{300.000000, 116.666667},\n{300.000000, 300.000000},\n{250.000000, 300.000000},\n{200.000000, 250.000000},\n{175.000000, 300.000000},\n{125.000000, 300.000000},\n{100.000000, 250.000000},","language":"Lua"},{"title":"Find common directory path","code":"def common_directory_path(dirs, separator='/')\n  dir1, dir2 = dirs.minmax.map{|dir| dir.split(separator)}\n  dir1.zip(dir2).take_while{|dn1,dn2| dn1==dn2}.map(&:first).join(separator)\nend\n\np common_directory_path(dirs)           #=> \"/home/user1/tmp\"","language":"ruby"},{"title":"Find common directory path","code":"var dirs = %w(\n    /home/user1/tmp/coverage/test\n    /home/user1/tmp/covert/operator\n    /home/user1/tmp/coven/members\n);\n\nvar unique_pref = dirs.map{.split('/')}.abbrev.min_by{.len};\nvar common_dir  = [unique_pref, unique_pref.pop][0].join('/');\nsay common_dir;   # => /home/user1/tmp","language":"ruby"},{"title":"Horner's rule for polynomial evaluation","code":"function horners_rule( coeff, x )\n    local res = 0    \n    for i = #coeff, 1, -1 do\n        res = res * x + coeff[i]\n    end\n    return res\nend\n\nx = 3\ncoefficients = { -19, 7, -4, 6 }\nprint( horners_rule( coefficients, x ) )","language":"lua"},{"title":"Horner's rule for polynomial evaluation","code":"def horner(coeffs, x)\n  coeffs.reverse.inject(0) {|acc, coeff| acc * x + coeff}\nend\np horner([-19, 7, -4, 6], 3)  # ==> 128","language":"ruby"},{"title":"Horner's rule for polynomial evaluation","code":"func horner(coeff, x) {\n    coeff.reverse.reduce { |a,b| a*x + b };\n}\n\nsay horner([-19, 7, -4, 6], 3);   # => 128","language":"ruby"},{"title":"Horner's rule for polynomial evaluation","code":"func horner(coeff, x) {\n    coeff.len > 0\n        && (coeff[0] + x*horner(coeff.ft(1), x));\n}\n\nsay horner([-19, 7, -4, 6], 3);   # => 128","language":"ruby"},{"title":"Take notes on the command line","code":"import sys, datetime, shutil\n\nif len(sys.argv) == 1:\n    try:\n        with open('notes.txt', 'r') as f:\n            shutil.copyfileobj(f, sys.stdout)\n    except IOError:\n        pass\nelse:\n    with open('notes.txt', 'a') as f:\n        f.write(datetime.datetime.now().isoformat() + '\\n')\n        f.write(\"\\t%s\\n\" % ' '.join(sys.argv[1:]))","language":"python"},{"title":"Take notes on the command line","code":"var file = %f'notes.txt'\n\nif (ARGV.len > 0) {\n    var fh = file.open_a\n    fh.say(Time.local.ctime + \"\\n\\t\" + ARGV.join(\" \"))\n    fh.close\n} else {\n    var fh = file.open_r\n    fh && fh.each { .say }\n}","language":"ruby"},{"title":"Number reversal game","code":"ary = (1..9).to_a\nary.shuffle! while ary == ary.sort\nscore = 0\nuntil ary == ary.sort\n  print \"#{ary.inspect} -- How many digits to reverse? \"\n  num = gets.to_i  # should validate input\n  ary[0, num] = ary[0, num].reverse\n  score += 1\nend\np ary\nputs \"Your score: #{score}\"","language":"ruby"},{"title":"Number reversal game","code":"var turn = 0;\nvar jumble = @(1..9).bshuffle;        # best-shuffle\n\nfor (turn; jumble != 1..9; ++turn) {\n    printf(\"%2d: %s - Flip how many digits ? \", turn, jumble.join(' '));\n    var d = read(Number) \\\\ break;\n    jumble[0 .. d-1] = [jumble[0 .. d-1]].reverse...;\n}\n\nprint \"    #{jumble.join(' ')}\\n\";\nprint \"You won in #{turn} turns.\\n\";","language":"ruby"},{"title":"Sorting algorithms/Pancake sort","code":"void do_flip(int *list, int length, int num)\n{\n    int swap;\n    int i=0;\n    for(i;i<--num;i++)\n    {\n        swap=list[i];\n        list[i]=list[num];\n        list[num]=swap;\n    }\n}","language":"c"},{"title":"Sorting algorithms/Pancake sort","code":"if __name__ == '__main__':\n    import random\n\n    tutor = True\n    data = list('123456789')\n    while data == sorted(data):\n        random.shuffle(data)\n    print('Original List: %r' % ' '.join(data))\n    pancakesort(data)\n    print('Pancake Sorted List: %r' % ' '.join(data))","language":"python"},{"title":"A+B","code":"// Standard input-output streams\n#include <stdio.h>\nint main()\n{\n   int a, b;\n   scanf(\"%d%d\", &a, &b);\n   printf(\"%d\\n\", a + b);\n   return 0;\n}","language":"c"},{"title":"A+B","code":"// Input file: input.txt\n// Output file: output.txt\n#include <stdio.h>\nint main()\n{\n   freopen(\"input.txt\", \"rt\", stdin);\n   freopen(\"output.txt\", \"wt\", stdout);\n   int a, b;\n   scanf(\"%d%d\", &a, &b);\n   printf(\"%d\\n\", a + b);\n   return 0;\n}","language":"c"},{"title":"A+B","code":"using System;\nusing System.Linq;\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(Console.ReadLine().Split().Select(int.Parse).Sum());\n    }\n}","language":"csharp"},{"title":"A+B","code":"// Standard input-output streams\n#include <iostream>\nusing namespace std;\nint main()\n{\n   int a, b;\n   cin >> a >> b;\n   cout << a + b << endl;\n}","language":"cpp"},{"title":"A+B","code":"if line = gets\n  puts line.split.map(&.to_i).sum\nelse\n  puts \"No input\"\nend","language":"ruby"},{"title":"A+B","code":"import java.util.*;\n\npublic class Sum2 {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in); // Standard input\n        System.out.println(in.nextInt() + in.nextInt()); // Standard output\n    }\n}","language":"java"},{"title":"A+B","code":"process.openStdin().on (\n    'data',\n    function (line) {\n        var xs = String(line).match(/^\\s*(\\d+)\\s+(\\d+)\\s*/)\n        console.log (\n            xs ? Number(xs[1]) + Number(xs[2]) : 'usage: <number> <number>'\n        )\n        process.exit()\n    }\n)","language":"javascript"},{"title":"A+B","code":"process.stdin.on(\"data\", buffer => {\n  console.log(\n    (buffer + \"\").trim().split(\" \").map(Number).reduce((a, v) => a + v, 0)\n  );\n});","language":"javascript"},{"title":"A+B","code":"var a = WScript.StdIn.ReadLine();\nvar b = WScript.StdIn.ReadLine();\nWSH.echo(a, \" + \" , b , \" = \" , Number(a)+Number(b));","language":"javascript"},{"title":"A+B","code":"void main() {\n    string a, b;\n    scan(gets(stdin), \"%d %d\", &a, &b); \n    puts(((int)a + (int)b));\n}","language":"c"},{"title":"A+B","code":"try: raw_input\nexcept: raw_input = input\n\nprint(sum(map(int, raw_input().split())))","language":"python"},{"title":"A+B","code":"import sys\n\nfor line in sys.stdin:\n    print(sum(map(int, line.split())))","language":"python"},{"title":"Evaluate binomial coefficients","code":"function binom(n, k) {\n    var coeff = 1;\n    for (var i = n-k+1; i <= n; i++) coeff *= i;\n    for (var i = 1;     i <= k; i++) coeff /= i;\n    return coeff;\n}\nprint(binom(5,3));","language":"javascript"},{"title":"Evaluate binomial coefficients","code":"function Binomial( n, k )\n    if k > n then return nil end\n    if k > n/2 then k = n - k end       --   (n k) = (n n-k)\n    \n    numer, denom = 1, 1\n    for i = 1, k do\n        numer = numer * ( n - i + 1 )\n        denom = denom * i\n    end\n    return numer / denom\nend","language":"lua"},{"title":"Evaluate binomial coefficients","code":"def binomialCoeff(n, k):\n    result = 1\n    for i in range(1, k+1):\n        result = result * (n-i+1) / i\n    return result\n\nif __name__ == \"__main__\":\n    print(binomialCoeff(5, 3))","language":"python"},{"title":"Evaluate binomial coefficients","code":"def c n, r\n  (0...r).inject(1) do |m,i| (m * (n - i)) / (i + 1) end\nend","language":"ruby"},{"title":"Evaluate binomial coefficients","code":"func binomial(n,k) {\n    n! / ((n-k)! * k!)\n}\n\nsay binomial(400, 200)","language":"ruby"},{"title":"Find limit of recursion","code":"#include <iostream>\n \nvoid recurse(unsigned int i)\n{\n  std::cout<<i<<\"\\n\";\n  recurse(i+1);\n}\n \nint main()\n{\n  recurse(0);\n}","language":"cpp"},{"title":"Find limit of recursion","code":"def recurse(counter):\n  print(counter)\n  counter += 1\n  recurse(counter)","language":"python"},{"title":"Find limit of recursion","code":"File \"<stdin>\", line 2, in recurse\nRecursionError: maximum recursion depth exceeded while calling a Python object\n996","language":"python"},{"title":"Find limit of recursion","code":"def recurse x\n  puts x\n  recurse(x+1)\nend\n\nrecurse(0)","language":"ruby"},{"title":"Find limit of recursion","code":"def recurse n\n  recurse(n+1)\nrescue SystemStackError\n  n\nend\n\nputs recurse(0)","language":"ruby"},{"title":"Find limit of recursion","code":"func recurse(n) {\n   say n;\n   recurse(n+1);\n}\n\nrecurse(0);","language":"ruby"},{"title":"Four bit adder","code":"// run this in your browsers console\nvar outer = inner = 16, a, b;\n\nwhile(outer--) {\n    a = (8|outer).toString(2);\n    while(inner--) {\n        b = (8|inner).toString(2);\n        console.log(a + ' + ' + b + ' = ' + fourBitAdder(a, b));\n    }\n    inner = outer;\n}","language":"JavaScript"},{"title":"Sierpinski triangle","code":"int main()\n{\n  sierpinski_triangle(4);\n  return EXIT_SUCCESS;\n}","language":"c"},{"title":"Sierpinski triangle","code":"namespace RosettaCode {\n    class Program {\n        static void Main(string[] args) {\n            SierpinskiTriangle t = new SierpinskiTriangle(4);\n            t.Display();\n        }\n    }\n}","language":"csharp"},{"title":"Sierpinski triangle","code":"def sierpinski(n):\n    d = [\"*\"]\n    for i in xrange(n):\n        sp = \" \" * (2 ** i)\n        d = [sp+x+sp for x in d] + [x+\" \"+x for x in d]\n    return d\n\nprint \"\\n\".join(sierpinski(4))","language":"python"},{"title":"Sierpinski triangle","code":"import functools\n\ndef sierpinski(n):\n\n    def aggregate(TRIANGLE, I):\n        SPACE = \" \" * (2 ** I)\n        return [SPACE+X+SPACE for X in TRIANGLE] + [X+\" \"+X for X in TRIANGLE]\n\n    return functools.reduce(aggregate, range(n), [\"*\"])\n\nprint(\"\\n\".join(sierpinski(4)))","language":"python"},{"title":"Sierpinski triangle","code":"x = 1\nwhile True:\n        print(bin(x)[2:].replace('0', ' '))\n        x ^= x<<1","language":"python"},{"title":"Sierpinski triangle","code":"def sierpinski_triangle(n)\n  triangle = [\"*\"]\n  n.times do |i|\n    sp = \" \" * (2**i)\n    triangle = triangle.collect {|x| sp + x + sp} +\n               triangle.collect {|x| x + \" \" + x}\n  end\n  triangle\nend\n\nputs sierpinski_triangle(4)","language":"ruby"},{"title":"Sierpinski triangle","code":"def sierpinski_triangle(n)\n  (0...n).inject([\"*\"]) {|triangle, i| \n    space = \" \" * (2**i)\n    triangle.map {|x| space + x + space} + triangle.map {|x| x + \" \" + x}\n  }\nend\n\nputs sierpinski_triangle(4)","language":"ruby"},{"title":"Read entire file","code":"using System.IO;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var fileContents = File.ReadAllText(\"c:\\\\autoexec.bat\");\n    }\n}","language":"csharp"},{"title":"Read entire file","code":"var fso=new ActiveXObject(\"Scripting.FileSystemObject\");\nvar f=fso.OpenTextFile(\"c:\\\\myfile.txt\",1);\nvar s=f.ReadAll();\nf.Close();\ntry{alert(s)}catch(e){WScript.Echo(s)}","language":"javascript"},{"title":"Read entire file","code":"# Read entire text file.\nstr = IO.read \"foobar.txt\"\n\n# It can also read a subprocess.\nstr = IO.read \"| grep ftp /etc/services\"","language":"ruby"},{"title":"Read entire file","code":"# Read EUC-JP text from file.\nstr = File.open(path, \"r:euc-jp\") {|f| f.read}\n\n# Read EUC-JP text from file; transcode text from EUC-JP to UTF-8.\nstr = File.open(path, \"r:euc-jp:utf-8\") {|f| f.read}","language":"ruby"},{"title":"Read entire file","code":"var file = File.new(__FILE__);\nvar content = file.open_r.slurp;\nprint content;","language":"ruby"},{"title":"Read entire file","code":"var file = File(__FILE__)\nvar content = file.read(:utf8)\nprint content","language":"ruby"},{"title":"Read entire file","code":"package com.rosetta.example\n\nimport java.io.File\nimport java.io.PrintStream\n\nclass ReadFile {\n    def static main( String ... args ) {\n        val content = new String(Files.readAllBytes(Paths.get(\"file.txt\")))\n    }\n}","language":"java"},{"title":"Range expansion","code":"def rangeexpand(txt):\n    lst = []\n    for r in txt.split(','):\n        if '-' in r[1:]:\n            r0, r1 = r[1:].split('-', 1)\n            lst += range(int(r[0] + r0), int(r1) + 1)\n        else:\n            lst.append(int(r))\n    return lst\n\nprint(rangeexpand('-6,-3--1,3-5,7-11,14,15,17-20'))","language":"python"},{"title":"Range expansion","code":"import re\n\ndef rangeexpand(txt):\n    lst = []\n    for rng in txt.split(','):\n        start,end = re.match('^(-?\\d+)(?:-(-?\\d+))?$', rng).groups()\n        if end:\n            lst.extend(xrange(int(start),int(end)+1))\n        else:\n            lst.append(int(start))\n    return lst","language":"python"},{"title":"Range expansion","code":"def range_expand(rng)\n  rng.split(',').flat_map do |part|\n    if part =~ /^(-?\\d+)-(-?\\d+)$/\n      ($1.to_i .. $2.to_i).to_a\n    else\n      Integer(part)\n    end\n  end\nend\n\np range_expand('-6,-3--1,3-5,7-11,14,15,17-20')","language":"ruby"},{"title":"Range expansion","code":"func rangex(str) {\n    str.split(',').map { |r|\n        var m = r.match(/^\n            (?(DEFINE) (?<int>[+-]?[0-9]+) )\n            (?<from>(?&int))-(?<to>(?&int))\n        $/x)\n        m ? do {var c = m.ncap; (Num(c{:from}) .. Num(c{:to}))...}\n          : Num(r)\n    }\n}\n\nsay rangex('-6,-3--1,3-5,7-11,14,15,17-20').join(',')","language":"ruby"},{"title":"Extreme floating point values","code":"local inf=math.huge\nlocal minusInf=-math.huge\nlocal NaN=0/0\nlocal negativeZeroSorta=-1E-240","language":"lua"},{"title":"Leap year","code":"function isLeapYear(year)\n  return year%4==0 and (year%100~=0 or year%400==0)\nend","language":"Lua"},{"title":"Leap year","code":"def is_leap_year(year):\n    if year % 100 == 0:\n        return year % 400 == 0\n    return year % 4 == 0","language":"python"},{"title":"Leap year","code":"import datetime\n\ndef is_leap_year(year):\n    try:\n        datetime.date(year, 2, 29)\n    except ValueError:\n        return False\n    return True","language":"python"},{"title":"Leap year","code":"require 'date'\n\nDate.leap?(year)","language":"ruby"},{"title":"Leap year","code":"func isleap(year) {\n    if (year %% 100) {\n        return (year %% 400);\n    }\n    return (year %% 4);\n}","language":"ruby"},{"title":"Sorting algorithms/Stooge sort","code":"arr = [9,1,3,10,13,4,2];\nstoogeSort(arr);\nconsole.log(arr);","language":"javascript"},{"title":"Comments","code":"/* This is a comment. */\n/* So is this\n   multiline comment.\n */","language":"c"},{"title":"Comments","code":"#if 0\nWhile technically not a comment, this is also ignored by the compiler\n#endif","language":"c"},{"title":"Comments","code":"#ifdef UNDEFINED\nThis is not compiled.\n#if 0\nNor is this.\n#endif\nAnd this still is not compiled.\n#endif","language":"c"},{"title":"Comments","code":"#if 0         \nThis isn't valid.         \n#endif","language":"c"},{"title":"Comments","code":"#define FOO \\\n  (macro text) // comment\n  (no more macro text)","language":"cpp"},{"title":"Comments","code":"//This is a comment.\n//This is other comment.\n\n/* This is a comment too. */\n\n/* This is a \nmulti-line\ncomment */","language":"csharp"},{"title":"Comments","code":"/*\n * This is\n * a multiple\n * line comment.\n */","language":"java"},{"title":"Comments","code":"/**\n * This is\n * a multiple\n * line Javadoc comment\n */","language":"java"},{"title":"Comments","code":"/* This is\na multi line\ncomment\n// with a \"nested\" comment\nand another line in the comment\n*/","language":"javascript"},{"title":"Comments","code":"-- A single line comment\n\n--[[A multi-line \n    comment --]]","language":"lua"},{"title":"Comments","code":"x = \"code\" # I am a comment\n\n=begin hello\nI a POD documentation comment like Perl\n=end puts \"code\"","language":"ruby"},{"title":"Comments","code":"/*\n    This is a multi-line comment\n*/","language":"ruby"},{"title":"GUI component interaction","code":"#define IDD_DLG          101\n#define IDC_INPUT       1001\n#define IDC_INCREMENT   1002\n#define IDC_RANDOM      1003\n#define IDC_QUIT        1004","language":"c"},{"title":"GUI component interaction","code":"#include <QApplication>\n#include \"interaction.h\"\n\nint main( int argc , char *argv[ ] ) {\n   QApplication app( argc, argv ) ;\n   MyWidget theWidget ;\n   theWidget.show( ) ;\n   return app.exec( ) ;\n}","language":"cpp"},{"title":"GUI enabling/disabling of controls","code":"#define IDD_DLG                                  101\n#define IDC_INPUT                               1001\n#define IDC_INCREMENT                           1002\n#define IDC_DECREMENT                           1003\n#define IDC_QUIT                                1004","language":"c"},{"title":"GUI enabling/disabling of controls","code":"#include <QApplication>\n#include \"task.h\"\n\nint main( int argc, char *argv[ ] ) {\n   QApplication app( argc , argv ) ;\n   MyWidget theWidget ;\n   theWidget.show( ) ;\n   return app.exec( ) ;\n}","language":"cpp"},{"title":"JSON","code":"var personUrl = new URL( \"http://gosu-lang.github.io/data/person.json\" )\nvar person: Dynamic = personUrl.JsonContent\nprint( person.Name )","language":"javascript"},{"title":"JSON","code":"var person = Person.fromJsonUrl( personUrl )\nprint( person.Name )\nprint( person.Address.City )\nprint( person.Hobby[0].Name )","language":"javascript"},{"title":"JSON","code":"var data = JSON.parse('{ \"foo\": 1, \"bar\": [10, \"apples\"] }');\n\nvar sample = { \"blue\": [1,2], \"ocean\": \"water\" };\nvar json_string = JSON.stringify(sample);","language":"JavaScript"},{"title":"JSON","code":"require 'json'\n\nruby_obj = JSON.parse('{\"blue\": [1, 2], \"ocean\": \"water\"}')\nputs ruby_obj\n\nruby_obj[\"ocean\"] = { \"water\" => [\"fishy\", \"salty\"] }\nputs JSON.generate(ruby_obj)\nputs JSON.pretty_generate(ruby_obj)","language":"ruby"},{"title":"JSON","code":"var json = require('JSON').new;\nvar data = json.decode('{\"blue\": [1, 2], \"ocean\": \"water\"}');\nsay data;\ndata{:ocean} = Hash.new(water => %w[fishy salty]);\nsay json.encode(data);","language":"ruby"},{"title":"Constrained random points on a circle","code":"r2 = 10*10..15*15\nrange = (-15..15).to_a\npoints = range.product(range).select {|i,j| r2.cover?(i*i + j*j)}\n\nputs \"Precalculate: #{points.size}\"\npt = Hash.new(\"  \")\npoints.sample(100).each{|ij| pt[ij] = \" o\"}\nputs range.map{|i| range.map{|j| pt[[i,j]]}.join}","language":"ruby"},{"title":"Narcissist","code":"import sys\nwith open(sys.argv[0]) as quine:\n    code = raw_input(\"Enter source code: \")\n    if code == quine.read():\n        print(\"Accept\")\n    else:\n        print(\"Reject\")","language":"Python"},{"title":"Equilibrium index","code":"def eqindex2Pass(data):\n    \"Two pass\"\n    suml, sumr, ddelayed = 0, sum(data), 0\n    for i, d in enumerate(data):\n        suml += ddelayed\n        sumr -= d\n        ddelayed = d\n        if suml == sumr:\n            yield i","language":"python"},{"title":"Equilibrium index","code":"def eqindexMultiPass(data):\n    \"Multi pass\"\n    for i in range(len(data)):\n        suml, sumr = sum(data[:i]), sum(data[i+1:])\n        if suml == sumr:\n            yield i","language":"python"},{"title":"Equilibrium index","code":"def eqindexMultiPass(s):\n    return [i for i in xrange(len(s)) if sum(s[:i]) == sum(s[i+1:])]\n\nprint eqindexMultiPass([-7, 1, 5, 2, -4, 3, 0])","language":"python"},{"title":"Equilibrium index","code":"from collections import defaultdict\n\ndef eqindex1Pass(data):\n    \"One pass\"\n    l, h = 0, defaultdict(list)\n    for i, c in enumerate(data):\n        l += c\n        h[l * 2 - c].append(i)\n    return h[l]","language":"python"},{"title":"Equilibrium index","code":"f = (eqindex2Pass, eqindexMultiPass, eqindex1Pass)\nd = ([-7, 1, 5, 2, -4, 3, 0],\n     [2, 4, 6],\n     [2, 9, 2],\n     [1, -1, 1, -1, 1, -1, 1])\n\nfor data in d:\n    print(\"d = %r\" % data)\n    for func in f:\n        print(\"  %16s(d) -> %r\" % (func.__name__, list(func(data))))","language":"python"},{"title":"Equilibrium index","code":"def eq_indices(list)\n  list.each_index.select do |i|\n    list[0...i].inject(0, :+) == list[i+1..-1].inject(0, :+)\n  end\nend","language":"ruby"},{"title":"Equilibrium index","code":"def eq_indices(list)\n  left, right = 0, list.inject(0, :+)\n  equilibrium_indices = []\n  \n  list.each_with_index do |val, i|\n    right -= val\n    equilibrium_indices << i if right == left\n    left += val\n  end\n  \n  equilibrium_indices\nend","language":"ruby"},{"title":"Equilibrium index","code":"indices = [\n  [-7, 1, 5, 2,-4, 3, 0],\n  [2, 4, 6],\n  [2, 9, 2],\n  [1,-1, 1,-1, 1,-1, 1]\n]\nindices.each do |x|\n  puts \"%p => %p\" % [x, eq_indices(x)]\nend","language":"ruby"},{"title":"Equilibrium index","code":"func eq_index(nums) {\n    var (i, sum, sums) = (0, 0, Hash.new);\n    nums.each { |n|\n        sums{2*sum + n} := [] -> append(i++);\n        sum += n;\n    }\n    sums{sum} \\\\ [];\n}","language":"ruby"},{"title":"Equilibrium index","code":"var indices = [\n  [-7, 1, 5, 2,-4, 3, 0],\n  [2, 4, 6],\n  [2, 9, 2],\n  [1,-1, 1,-1, 1,-1, 1],\n]\n \nfor x in indices {\n    say (\"%s => %s\" % @|[x, eq_index(x)].map{.dump});\n}","language":"ruby"},{"title":"Permutations","code":"public class Permutations {\n        public static void main(String[] args) {\n                System.out.println(Utils.Permutations(Utils.mRange(1, 3)));\n        }\n}","language":"java"},{"title":"Permutations","code":"function perm(a) {\n    if (a.length < 2) return [a];\n    var c, d, b = [];\n    for (c = 0; c < a.length; c++) {\n        var e = a.splice(c, 1),\n            f = perm(a);\n        for (d = 0; d < f.length; d++) b.push([e].concat(f[d]));\n        a.splice(c, 0, e[0])\n    } return b\n}\n\nconsole.log(perm(['Aardvarks', 'eat', 'ants']).join(\"\\n\"));","language":"JavaScript"},{"title":"Permutations","code":"Aardvarks,eat,ants\nAardvarks,ants,eat\neat,Aardvarks,ants\neat,ants,Aardvarks\nants,Aardvarks,eat\nants,eat,Aardvarks","language":"JavaScript"},{"title":"Permutations","code":"[[\"Aardvarks\", \"eat\", \"ants\"], [\"Aardvarks\", \"ants\", \"eat\"],\n [\"eat\", \"Aardvarks\", \"ants\"], [\"eat\", \"ants\", \"Aardvarks\"], \n[\"ants\", \"Aardvarks\", \"eat\"], [\"ants\", \"eat\", \"Aardvarks\"]]","language":"JavaScript"},{"title":"Permutations","code":"[[\"Aardvarks\", \"eat\", \"ants\"], [\"Aardvarks\", \"ants\", \"eat\"],\n [\"eat\", \"Aardvarks\", \"ants\"], [\"eat\", \"ants\", \"Aardvarks\"], \n[\"ants\", \"Aardvarks\", \"eat\"], [\"ants\", \"eat\", \"Aardvarks\"]]","language":"JavaScript"},{"title":"Permutations","code":"import itertools\nfor values in itertools.permutations([1,2,3]):\n    print (values)","language":"python"},{"title":"Permutations","code":"[0,1,2].permutations { |p|\n    say p\n}","language":"ruby"},{"title":"Permutations","code":"func permutations(callback, set, perm=[]) {\n    set.is_empty && callback(perm)\n    for i in ^set {\n        __FUNC__(callback, [\n            set[(0 ..^ i)..., (i+1 ..^ set.len)...]\n        ], [perm..., set[i]])\n    }\n    return()\n}\n\npermutations({|p| say p }, [0,1,2])","language":"ruby"},{"title":"Hello world/Line printer","code":"#include <stdio.h>\n\nint main()\n{\n   FILE *lp;\n   lp = fopen(\"/dev/lp0\",\"w\");\n   fprintf(lp,\"Hello world!\\n\");\n   fclose(lp);\n   return 0;\n}","language":"C"},{"title":"Hello world/Line printer","code":"#include <iostream>\n#include <fstream>\n\nint main(){\n  std::ofstream lprFile;\n  lprFile.open( \"/dev/lp0\" );\n  lprFile << \"Hello World!\\n\";\n  lprFile.close();\n  return 0;\n}","language":"cpp"},{"title":"Hello world/Line printer","code":"// This example runs on Node.js\nvar fs = require('fs');\n// Assuming lp is at /dev/lp0\nvar lp = fs.openSync('/dev/lp0', 'w');\nfs.writeSync(lp, 'Hello, world!\\n');\nfs.close(lp);","language":"javascript"},{"title":"Hello world/Line printer","code":"lp = open(\"/dev/lp0\")\nlp.write(\"Hello World!\\n\")\nlp.close()","language":"python"},{"title":"Hello world/Line printer","code":"lp = open(\"/dev/lp0\",\"w\")\nlp.write(\"Hello World!\\n\")\nlp.close()","language":"python"},{"title":"Hello world/Line printer","code":"Sys.open(\\var fh, '>', '/dev/lp0') \\\n    && fh.say(\"Hello World!\")      \\\n    && fh.close","language":"ruby"},{"title":"Keyboard input/Keypress check","code":"string chr = string.Empty;\nif(Console.KeyAvailable)\n  chr = Console.ReadKey().Key.ToString();","language":"csharp"},{"title":"Keyboard input/Keypress check","code":"begin\n  check = STDIN.read_nonblock(1)\nrescue IO::WaitReadable\n  check = false\nend\n\nputs check if check","language":"ruby"},{"title":"Variable-length quantity","code":"[0x200000, 0x1fffff].each do |i|\n  # Encode i => BER\n  ber = [i].pack(\"w\")\n  hex = ber.unpack(\"C*\").collect {|c| \"%02x\" % c}.join(\":\")\n  printf \"%s => %s\\n\", i, hex\n\n  # Decode BER => j\n  j = ber.unpack(\"w\").first\n  i == j or fail \"BER not preserve integer\"\nend","language":"ruby"},{"title":"String matching","code":"\"abcd\".startsWith(\"ab\") //returns true\n\"abcd\".endsWith(\"zn\") //returns false\n\"abab\".contains(\"bb\") //returns false\n\"abab\".contains(\"ab\") //returns true\nint loc = \"abab\".indexOf(\"bb\") //returns -1\nloc = \"abab\".indexOf(\"ab\") //returns 0\nloc = \"abab\".indexOf(\"ab\",loc+1) //returns 2","language":"java"},{"title":"String matching","code":"\"abcd\".startswith(\"ab\") #returns True\n\"abcd\".endswith(\"zn\") #returns False\n\"bb\" in \"abab\" #returns False\n\"ab\" in \"abab\" #returns True\nloc = \"abab\".find(\"bb\") #returns -1\nloc = \"abab\".find(\"ab\") #returns 0\nloc = \"abab\".find(\"ab\",loc+1) #returns 2","language":"python"},{"title":"String matching","code":"p 'abcd'.start_with?('ab')  #returns true\np 'abcd'.end_with?('ab')    #returns false\np 'abab'.include?('bb')     #returns false\np 'abab'.include?('ab')     #returns true\np 'abab'['bb']              #returns nil\np 'abab'['ab']              #returns \"ab\"\np 'abab'.index('bb')        #returns nil\np 'abab'.index('ab')        #returns 0\np 'abab'.index('ab', 1)     #returns 2\np 'abab'.rindex('ab')       #returns 2","language":"ruby"},{"title":"Keyboard input/Flush the keyboard buffer","code":"def flush_input():\n    try:\n        import msvcrt\n        while msvcrt.kbhit():\n            msvcrt.getch()\n    except ImportError:\n        import sys, termios\n        termios.tcflush(sys.stdin, termios.TCIOFLUSH)","language":"Python"},{"title":"Keyboard input/Flush the keyboard buffer","code":"# Demonstration: discard input, then input a line from user.\nputs 'Type anything for 2 seconds.'\nsleep 2\n$stdin.discard_input\nprint 'Enter a line? '\nif line = $stdin.gets\nthen print 'Got line. ', line\nelse puts 'No line!'\nend","language":"ruby"},{"title":"Keyboard input/Obtain a Y or N response","code":"var keypress = require('keypress');\n\nkeypress(process.stdin);\n\nprocess.stdin.on('keypress', function (ch, key) {\n    if (key && (key.name === 'y' || key.name === 'n')) {\n       console.log('Reply:' + key.name);\n    }\n});\n\nprocess.stdin.setRawMode(true);\nprocess.stdin.resume();","language":"javascript"},{"title":"Keyboard input/Obtain a Y or N response","code":"document.body.addEventListener('keyup', function (e) {\n  var key = String.fromCharCode(e.keyCode).toLowerCase();\n  if (key === 'y' || key === 'n') {\n    console.log('response is: ' + key);\n  }\n}, false);","language":"javascript"},{"title":"Keyboard input/Obtain a Y or N response","code":"require 'io/console'\n\ndef yesno\n  case $stdin.getch\n    when \"Y\" then true\n    when \"N\" then false\n    else raise \"Invalid character.\"\n  end\nend","language":"Ruby"},{"title":"Terminal control/Clear the screen","code":"void cls(void) {\n    printf(\"\\33[2J\");\n}","language":"C"},{"title":"Terminal control/Clear the screen","code":"#include <stdio.h>\n#include <stdlib.h>\n\nvoid main() {\n    printf (\"clearing screen\");\n    getchar();\n    system(\"cls\");\n}","language":"C"},{"title":"Terminal control/Clear the screen","code":"public class Clear\n{\n    public static void main (String[] args)\n    {\n        System.out.print(\"\\033[2J\");\n    }\n}","language":"java"},{"title":"Terminal control/Clear the screen","code":"public class Clear\n{\n    public static void main (String[] args)\n    {\n        System.out.print(\"\\033\\143\");\n    }\n}","language":"java"},{"title":"Terminal control/Dimensions","code":"def winsize\n  # Ruby 1.9.3 added 'io/console' to the standard library.\n  require 'io/console'\n  IO.console.winsize\nrescue LoadError\n  # This works with older Ruby, but only with systems\n  # that have a tput(1) command, such as Unix clones.\n  [Integer(`tput li`), Integer(`tput co`)]\nend\n\nrows, cols = winsize\nprintf \"%d rows by %d columns\\n\", rows, cols","language":"ruby"},{"title":"Terminal control/Dimensions","code":"var stty = `stty -a`;\nvar lines = stty.match(/\\brows\\h+(\\d+)/);\nvar cols  = stty.match(/\\bcolumns\\h+(\\d+)/);\nsay \"#{lines} #{cols}\";","language":"ruby"},{"title":"Terminal control/Ringing the terminal bell","code":"#include <stdio.h>\nint main() {\n  printf(\"\\a\");\n  return 0;\n}","language":"c"},{"title":"Terminal control/Ringing the terminal bell","code":"public class Bell{\n    public static void main(String[] args){\n        java.awt.Toolkit.getDefaultToolkit().beep();\n\n        //or\n\n        System.out.println((char)7);\n    }\n}","language":"java"},{"title":"Terminal control/Cursor positioning","code":"#include <stdio.h>\nint main()\n{\n        printf(\"\\033[6;3HHello\\n\");\n        return 0;\n}","language":"c"},{"title":"Terminal control/Cursor positioning","code":"#include <windows.h>\n\nint main() {\n    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);\n    COORD pos = {3, 6};\n    SetConsoleCursorPosition(hConsole, pos);\n    WriteConsole(hConsole, \"Hello\", 5, NULL, NULL);\n    return 0;\n}","language":"c"},{"title":"Terminal control/Cursor positioning","code":"static void Main(string[] args)\n{\n    Console.SetCursorPosition(3, 6);\n    Console.Write(\"Hello\");\n}","language":"csharp"},{"title":"Terminal control/Cursor positioning","code":"require 'curses'\n\nCurses.init_screen\nbegin\n  Curses.setpos(6, 3)  # column 6, row 3\n  Curses.addstr(\"Hello\")\n\n  Curses.getch  # Wait until user presses some key.\nensure\n  Curses.close_screen\nend","language":"ruby"},{"title":"Five weekends","code":"LONGMONTHS = (1, 3, 5, 7, 8, 10, 12) # Jan Mar May Jul Aug Oct Dec\ndef fiveweekendspermonth2(start=START, stop=STOP):\n    return [date(yr, month, 31)\n            for yr in range(START.year, STOP.year)\n            for month in LONGMONTHS\n            if date(yr, month, 31).timetuple()[6] == 6 # Sunday\n            ]\n\ndates2 = fiveweekendspermonth2()\nassert dates2 == dates","language":"python"},{"title":"Strip comments from a string","code":"var stripComments = (function () {\n  var re1 = /^\\s+|\\s+$/g;\n  var re2 = /\\s*[#;].+$/g;\n  return function (s) {\n    return s.replace(re1,'').replace(re2,'');\n  };\n}());","language":"javascript"},{"title":"Strip comments from a string","code":"comment_symbols = \";#\"\n\ns1 = \"apples, pears # and bananas\"\ns2 = \"apples, pears ; and bananas\"\n\nprint ( string.match( s1, \"[^\"..comment_symbols..\"]+\" ) )\nprint ( string.match( s2, \"[^\"..comment_symbols..\"]+\" ) )","language":"lua"},{"title":"Strip comments from a string","code":"def remove_comments(line, sep):\n    for s in sep:\n        line = line.split(s)[0]\n    return line.strip()\n\n# test\nprint remove_comments('apples ; pears # and bananas', ';#')\nprint remove_comments('apples ; pears # and bananas', '!')","language":"python"},{"title":"Strip comments from a string","code":"import re\n\nm = re.match(r'^([^#]*)#(.*)$', line)\nif m:  # The line contains a hash / comment\n    line = m.group(1)","language":"python"},{"title":"Strip comments from a string","code":"func strip_comment(s) {\n    (s - %r'[#;].*').strip;\n}\n\n[\" apples, pears # and bananas\",\n \" apples, pears ; and bananas\",\n \" apples, pears \"].each { |s|\n    say strip_comment(s).dump;\n};","language":"ruby"},{"title":"Strip block comments","code":"filename = \"Text1.txt\"\n\nfp = io.open( filename, \"r\" )\nstr = fp:read( \"*all\" )\nfp:close()\n\nstripped = string.gsub( str, \"/%*.-%*/\", \"\" )\nprint( stripped )","language":"lua"},{"title":"Strip block comments","code":"func strip_block_comments(code, beg='/*', end='*/') {\n    var re = Regex.new(beg.escape + '.*?' + end.escape, 's');\n    code.gsub(re, '');\n}\n\nsay strip_block_comments(ARGF.slurp);","language":"ruby"},{"title":"Literals/Floating point","code":"2.3    # 2.2999999999999998\n.3     # 0.29999999999999999\n.3e4   # 3000.0\n.3e+34 # 2.9999999999999998e+33\n.3e-34 # 2.9999999999999999e-35\n2.e34  # 1.9999999999999999e+34","language":"python"},{"title":"Literals/Floating point","code":"say 1.234;\nsay .1234;\nsay 1234e-5;\nsay 12.34e5;","language":"ruby"},{"title":"Guess the number/With feedback","code":"var number = rand(1..10);\nsay \"Guess the number between 1 and 10\";\n\nloop {\n    given(var n = Sys.scanln(\"> \").to_i) {\n        when (number)     { say \"You guessed it.\"; break }\n        case (n < number) { say \"Too low\" }\n        default           { say \"Too high\" }\n    }\n}","language":"ruby"},{"title":"Guess the number/With feedback (player)","code":"r = (1..100)\nsecret = rand(r)\nturns = 0\n \nputs \"Guess a number between #{r.min} and #{r.max}\"\nr.bsearch do |guess|                # bsearch works on ranges\n  print \"Guessing #{guess} \\t\"\n  turns += 1\n  low_high = secret <=> guess       # -1, 0, or 1\n  puts [\"found the number in #{turns} turns\", \"too low\", \"too high\"][low_high]\n  low_high\nend","language":"ruby"},{"title":"Guess the number","code":"function guessNumber() {\n  // Get a random integer from 1 to 10 inclusive\n  var num = Math.ceil(Math.random() * 10);\n  var guess;\n\n  while (guess != num) {\n    guess = prompt('Guess the number between 1 and 10 inclusive');\n  }\n  alert('Congratulations!\\nThe number was ' + num);\n}\n\nguessNumber();","language":"javascript"},{"title":"Guess the number","code":"import random\ntarget, guess = random.randint(1, 10), 0\nguess = int(input(\"Guess a number that's between 1 and 10: \"))\nwhile target != guess:\n    guess = int(input(\"Guess again! \"))\nprint(\"That's right!\")","language":"python"},{"title":"Guess the number","code":"n = rand(1..10)\nputs 'Guess the number: '\nputs 'Wrong! Guess again: ' until gets.to_i == n\nputs 'Well guessed!'","language":"ruby"},{"title":"Ordered words","code":"import urllib.request\n\nurl = 'http://www.puzzlers.org/pub/wordlists/unixdict.txt'\nwords = urllib.request.urlopen(url).read().decode(\"utf-8\").split()\nordered = [word for word in words if word==''.join(sorted(word))]\nmaxlen = len(max(ordered, key=len))\nmaxorderedwords = [word for word in ordered if len(word) == maxlen]\nprint(' '.join(maxorderedwords))","language":"python"},{"title":"Ordered words","code":"import urllib.request\n\nmx, url = 0, 'http://www.puzzlers.org/pub/wordlists/unixdict.txt'\n\nfor word in urllib.request.urlopen(url).read().decode(\"utf-8\").split():\n    lenword = len(word)\n    if lenword >= mx and word==''.join(sorted(word)):\n        if lenword > mx:\n            words, mx = [], lenword\n        words.append(word)\nprint(' '.join(words))","language":"python"},{"title":"Globally replace text in several files","code":"filenames = { \"f1.txt\", \"f2.txt\" }\n\nfor _, fn in pairs( filenames ) do\n    fp = io.open( fn, \"r\" )\n    str = fp:read( \"*all\" )\n    str = string.gsub( str, \"Goodbye London!\", \"Hello New York!\" )\n    fp:close()\n\n    fp = io.open( fn, \"w+\" )\n    fp:write( str )\n    fp:close()\nend","language":"lua"},{"title":"Globally replace text in several files","code":"import fileinput\n\nfor line in fileinput.input(inplace=True):\n    print(line.replace('Goodbye London!', 'Hello New York!'), end='')","language":"python"},{"title":"Extend your language","code":"[true,false].product([true,false]).each do |cond1, cond2|\n  print \"%5s, %5s => \" % [cond1, cond2]\n  if2(cond1, cond2) do\n    puts \"both true\"\n  end.else1 do\n    puts \"first is true\"\n  end.else2 do\n    puts \"second is true\"\n  end.neither do\n    puts \"neither is true\"\n  end\nend","language":"ruby"},{"title":"Combinations with repetitions","code":"[\n [[\"iced\", \"iced\"], [\"iced\", \"jam\"], [\"iced\", \"plain\"],\n  [\"jam\", \"jam\"], [\"jam\", \"plain\"], [\"plain\", \"plain\"]],\n 220\n]","language":"JavaScript"},{"title":"Combinations with repetitions","code":"func p (n, a, l) { n>0 ? (l.range.map{p(n-1, a+[l[_]], l.ft(_))}) : a };\nfunc f (n)       { n>0 ? (n * f(n - 1)) : 1 };\nfunc n (n, m)    { f(n + m - 1) / f(n) / f(m - 1) };\n\np(2, [], %w(iced jam plain)).each { |a|\n    say a.map{|pair| pair.join(\" \")}.join(\"\\n\");\n}\n\nprintf(\"\\nThere are %d ways to pick 7 out of 10\\n\", n(7, 10));","language":"ruby"},{"title":"Anonymous recursion","code":"public static long fib(int n) {\n    if (n < 0)\n        throw new IllegalArgumentException(\"n can not be a negative number\");\n\n    return new Object() {\n        private long fibInner(int n) {\n            return (n < 2) ? n : (fibInner(n - 1) + fibInner(n - 2));\n        }\n    }.fibInner(n);\n}","language":"java"},{"title":"Anonymous recursion","code":"function fibo(n) {\n  if (n < 0) { throw \"Argument cannot be negative\"; }\n\n  return (function(n) {\n    return (n < 2) ? 1 : arguments.callee(n-1) + arguments.callee(n-2);\n  })(n);\n}","language":"javascript"},{"title":"Anonymous recursion","code":"function fibo(n) {\n  if (n < 0) { throw \"Argument cannot be negative\"; }\n\n  return (function fib(n) {\n    return (n < 2) ? 1 : fib(n-1) + fib(n-2);\n  })(n);\n}","language":"javascript"},{"title":"Anonymous recursion","code":"return setmetatable({1,1},{__index = function(self, n)\n  self[n] = self[n-1] + self[n-2]\n  return self[n]\nend})","language":"lua"},{"title":"Anonymous recursion","code":"def fib(n)\n  raise RangeError, \"fib of negative\" if n < 0\n  (fib2 = proc { |m| m < 2 ? m : fib2[m - 1] + fib2[m - 2] })[n]\nend","language":"ruby"},{"title":"Anonymous recursion","code":"def fib(n)\n  raise RangeError, \"fib of negative\" if n < 0\n  (fib2 = proc { |n| n < 2 ? n : fib2[n - 1] + fib2[n - 2] })[n]\nend","language":"ruby"},{"title":"Anonymous recursion","code":"# Ruby 1.9\n(-2..12).map { |i| fib i rescue :error }\n=> [:error, :error, 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n\n# Ruby 1.8\n(-2..12).map { |i| fib i rescue :error }\n=> [:error, :error, 0, 1, 0, -3, -8, -15, -24, -35, -48, -63, -80, -99, -120]","language":"ruby"},{"title":"Anonymous recursion","code":"def fib(n)\n  raise RangeError, \"fib of negative\" if n < 0\n  Hash.new { |fib2, m|\n    fib2[m] = (m < 2 ? m : fib2[m - 1] + fib2[m - 2]) }[n]\nend","language":"ruby"},{"title":"Anonymous recursion","code":"{ |i|\n    func (n) {\n        if (n < 0) { return NaN }\n        n < 2 ? n\n              : (__FUNC__(n-2) + __FUNC__(n-1))\n    }(i).say\n} * 10","language":"ruby"},{"title":"Anonymous recursion","code":"{ |i|\n    { |n|\n        if (n < 0) { return NaN }\n        n < 2 ? n\n              : (__BLOCK__(n-2) + __BLOCK__(n-1))\n    }(i).say\n} * 10","language":"ruby"},{"title":"Map range","code":"// Javascript doesn't have built-in support for ranges\n// Insted we use arrays of two elements to represent ranges\nvar mapRange = function(from, to, s) {\n  return to[0] + (s - from[0]) * (to[1] - to[0]) / (from[1] - from[0]);\n};\n\nvar range = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nfor (var i = 0; i < range.length; i++) {\n  range[i] = mapRange([0, 10], [-1, 0], range[i]);\n}\n\nconsole.log(range);","language":"JavaScript"},{"title":"Map range","code":"function map_range( a1, a2, b1, b2, s )\n    return b1 + (s-a1)*(b2-b1)/(a2-a1)\nend\n\nfor i = 0, 10 do\n    print( string.format( \"f(%d) = %f\", i, map_range( 0, 10, -1, 0, i ) ) )\nend","language":"lua"},{"title":"Map range","code":"def map_range(a, b, s)\n  af, al, bf, bl = a.first, a.last, b.first, b.last\n  bf + (s - af)*(bl - bf).quo(al - af)\nend\n\n(0..10).each{|s| puts \"%s maps to %g\" % [s, map_range(0..10, -1..0, s)]}","language":"ruby"},{"title":"Map range","code":"(0..10).each do |s|\n  puts \"%s maps to %s\" % [s, map_range(0..10, -1..0, s)]\nend","language":"ruby"},{"title":"Map range","code":"func map_range(a, b, x) {\n    var (a1, a2, b1, b2) = (a.bounds, b.bounds);\n    x-a1 * b2-b1 / a2-a1 + b1;\n}\n\nvar a = 0..10;\nvar b = -1..0;\n\nfor x in a {\n    say \"#{x} maps to #{map_range(a, b, x)}\";\n}","language":"ruby"},{"title":"Maze generation","code":"if (m.here && m.here[0]*2+1 == j && m.here[1]*4+2 == k) \n                                        line[k]= '#'\n                                else if (0 == k%4) {","language":"javascript"},{"title":"Maze generation","code":"here= next;\n                        if (1 < neighbors.length) \n                                path.push(here);","language":"javascript"},{"title":"Parallel calculations","code":"var nums = [1275792312878611, 12345678915808973,\n            1578070919762253, 14700694496703910,];\n\nvar factors = nums.map {|n| prime_factors.ffork(n) }.map { .wait }\nsay ((nums ~Z factors)->max_by {|m| m[1][0] })","language":"ruby"},{"title":"Metaprogramming","code":"//requires C99\n#define ITERATE_LIST(n, list) \\\n for(Node *n = (list)->head; n; n = n->next)\n\n...\nITERATE_LIST(n, list)\n{\n    printf(\"node value: %s\\n\", n->value);\n}","language":"c"},{"title":"Metaprogramming","code":"#define my_min(x, y) ((x) < (y) ? (x) : (y))\n...\nprintf(\"%f %d %ll\\n\", my_min(0.0f, 1.0f), my_min(1,2), my_min(1ll, 2ll));","language":"c"},{"title":"Metaprogramming","code":"class \"foo\" : inherits \"bar\"\n{\n  \n}","language":"lua"},{"title":"Metaprogramming","code":"from macropy.core.macros import *\nfrom macropy.core.quotes import macros, q, ast, u\n\nmacros = Macros()\n\n@macros.expr\ndef expand(tree, **kw):\n    addition = 10\n    return q[lambda x: x * ast[tree] + u[addition]]","language":"python"},{"title":"Metaprogramming","code":"class IDVictim\n  \n  # Create elements of this man, woman, or child's identification.\n  attr_accessor :name, :birthday, :gender, :hometown\n  \n  # Allows you to put in a space for anything which is not covered by the\n  # preexisting elements.\n  def self.new_element(element)\n    attr_accessor element\n  end\n  \nend","language":"ruby"},{"title":"Enforced immutability","code":"#define PI      3.14159265358979323\n#define MINSIZE 10\n#define MAXSIZE 100","language":"c"},{"title":"Enforced immutability","code":"class MyClass\n{\nprivate:\n    int x;\n  \npublic:\n    int getX() const\n    {\n        return x;\n    }\n};","language":"cpp"},{"title":"Enforced immutability","code":"final int immutableInt = 4;\nint mutableInt = 4;\nmutableInt = 6; //this is fine\nimmutableInt = 6; //this is an error","language":"java"},{"title":"Enforced immutability","code":"# There are two methods in the copy of the object.\nmsg = \"Hello World!\".freeze\nmsg2 = msg.clone        # Copies the frozen and tainted state of obj.\nmsg3 = msg.dup          # It doesn't copy the status (frozen, tainted) of obj.\nputs msg2               #=> Hello World!\nputs msg3               #=> Hello World!\nputs msg2.frozen?       #=> true\nputs msg3.frozen?       #=> false","language":"ruby"},{"title":"Random number generator (device)","code":"#include <inttypes.h> /* PRIu32 */\n#include <stdlib.h> /* arc4random */\n#include <stdio.h>  /* printf */\n\nint\nmain()\n{\n  printf(\"%\" PRIu32 \"\\n\", arc4random());\n  return 0;\n}","language":"c"},{"title":"Random number generator (device)","code":"import java.security.SecureRandom;\n\npublic class RandomExample {\n  public static void main(String[] args) {\n    SecureRandom rng = new SecureRandom();\n\n    /* Prints a random signed 32-bit integer. */\n    System.out.println(rng.nextInt());\n  }\n}","language":"java"},{"title":"Random number generator (device)","code":"import random\nrand = random.SystemRandom()\nrand.randint(1,10)","language":"Python"},{"title":"Random number generator (device)","code":"func urandom() {\n    const device = %f'/dev/urandom';\n\n    device.open('<:raw', \\var fh, \\var err) ->\n        || die \"Can't open `#{device}': #{err}\";\n\n    fh.sysread(\\var noise, 4);\n    'L'.unpack(noise);\n}\n\nsay urandom();    # sample: 3517432564","language":"ruby"},{"title":"Hello world/Text","code":"const hello = \"Hello world!\\n\"\n\nprint(hello)","language":"c"},{"title":"Hello world/Text","code":"#include <stdlib.h>\n#include <stdio.h>\n\nint main(void)\n{\n  printf(\"Hello world!\\n\");\n  return EXIT_SUCCESS;\n}","language":"c"},{"title":"Hello world/Text","code":"#include <stdlib.h>\n#include <stdio.h>\n\nint main(void)\n{\n  puts(\"Hello world!\");\n  return EXIT_SUCCESS;\n}","language":"c"},{"title":"Hello world/Text","code":"#include<stdio.h>\n\nint main()\n{\n  printf(\"\\nHello world!\");\n  return 0;\n}","language":"c"},{"title":"Hello world/Text","code":"#include<stdio.h>\n\nint main()\n{\n        return printf(\"\\nHello World!\");\n}","language":"C"},{"title":"Hello world/Text","code":"namespace HelloWorld\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            System.Console.WriteLine(\"Hello world!\");\n        }\n    }\n}","language":"csharp"},{"title":"Hello world/Text","code":"#include <iostream>\n\nint main () {\n  std::cout << \"Hello world!\" << std::endl;\n}","language":"cpp"},{"title":"Hello world/Text","code":"using namespace System;\nint main()\n{\n  Console::WriteLine(\"Hello world!\");\n}","language":"cpp"},{"title":"Hello world/Text","code":"public class HelloWorld\n{\n public static void main(String[] args)\n {\n  System.out.println(\"Hello world!\");\n }\n}","language":"java"},{"title":"Hello world/Text","code":"local chars = {\"G\",\"o\",\"o\",\"d\",\"b\",\"y\",\"e\",\",\",\" \",\"W\",\"o\",\"r\",\"l\",\"d\",\"!\"}\nfor i = 1, #chars do\nwrite(chars[i])\nend","language":"lua"},{"title":"Ordered Partitions","code":"[[[1, 2], [], [3, 4]], \n [[1, 3], [], [2, 4]],\n [[1, 4], [], [2, 3]],\n [[2, 3], [], [1, 4]],\n [[2, 4], [], [1, 3]],\n [[3, 4], [], [1, 2]]]","language":"JavaScript"},{"title":"Ordered Partitions","code":"def partition(mask)\n  return [[]] if mask.empty?\n  [*1..mask.inject(:+)].permutation.map {|perm|\n    mask.map {|num_elts| perm.shift(num_elts).sort }\n  }.uniq\nend","language":"ruby"},{"title":"Ordered Partitions","code":"def part(s, args)\n  return [[]] if args.empty?\n  s.combination(args[0]).each_with_object([]) do |c, res|\n    part(s - c, args[1..-1]).each{|r| res << ([c] + r)}\n  end\nend\ndef partitions(args)\n  return [[]] if args.empty?\n  part((1..args.inject(:+)).to_a, args)\nend","language":"ruby"},{"title":"Ordered Partitions","code":"[[],[0,0,0],[1,1,1],[2,0,2]].each do |test_case|\n  puts \"partitions #{test_case}:\"\n  partition(test_case).each{|part| p part }\n  puts\nend","language":"ruby"},{"title":"Fast Fourier transform","code":"def fft(vec)\n  return vec if vec.size <= 1\n  evens_odds = vec.partition.with_index{|_,i| i.even?}\n  evens, odds = evens_odds.map{|even_odd| fft(even_odd)*2} \n  evens.zip(odds).map.with_index do |(even, odd),i|\n    even + odd * Math::E ** Complex(0, -2 * Math::PI * i / vec.size)\n  end\nend\n \nfft([1,1,1,1,0,0,0,0]).each{|c| puts \"%9.6f %+9.6fi\" % c.rect}","language":"ruby"},{"title":"Sort disjoint sublist","code":"def sort_disjoint_sublist!(ar, indices)\n  values = ar.values_at(*indices).sort\n  indices.sort.zip(values).each{ |i,v| ar[i] = v }\n  ar\nend\n\nvalues = [7, 6, 5, 4, 3, 2, 1, 0]\nindices = [6, 1, 7]\np sort_disjoint_sublist!(values, indices)","language":"ruby"},{"title":"Sort disjoint sublist","code":"func disjointSort(values, indices) {\n    values[indices.sort] = [values[indices]].sort...\n}\n\nvar values =  [7, 6, 5, 4, 3, 2, 1, 0];\nvar indices = [6, 1, 7];\n\ndisjointSort(values, indices);\nsay values;","language":"ruby"},{"title":"Catalan numbers","code":"#include \"algorithms.h\"\n#include \"tester.h\"\nusing namespace rosetta::catalanNumbers;\n\nint main(int argc, char* argv[])\n  {\n  Test<10, CatalanNumbersDirectFactorial>::Do();\n  Test<15, CatalanNumbersDirectBinomialCoefficient>::Do();\n  Test<15, CatalanNumbersRecursiveFraction>::Do();\n  Test<15, CatalanNumbersRecursiveSum>::Do();\n  return 0;\n  }","language":"cpp"},{"title":"Catalan numbers","code":"func c(n) is cached {\n    n == 0 ? 1 : (c(n-1) * (4 * n - 2) / (n + 1))\n}","language":"ruby"},{"title":"Catalan numbers","code":"15.times { |i|\n    say \"#{i}\\t#{c(i)}\"\n}","language":"ruby"},{"title":"Euler method","code":"def euler(f,y0,a,b,h):\n        t,y = a,y0\n        while t <= b:\n                print \"%6.3f %6.3f\" % (t,y)\n                t += h\n                y += h * f(t,y)\n\ndef newtoncooling(time, temp):\n        return -0.07 * (temp - 20)\n\neuler(newtoncooling,100,0,100,10)","language":"python"},{"title":"Euler method","code":"def euler(y, a, b, h)\n  a.step(b,h) do |t|\n    puts \"%7.3f %7.3f\" % [t,y]\n    y += h * yield(t,y)\n  end\nend\n\n[10, 5, 2].each do |step|\n  puts \"Step = #{step}\"\n  euler(100,0,100,step) {|time, temp| -0.07 * (temp - 20) }\n  puts\nend","language":"ruby"},{"title":"Cholesky decomposition","code":"def cholesky(A):\n    L = [[0.0] * len(A) for _ in range(len(A))]\n    for i, (Ai, Li) in enumerate(zip(A, L)):\n        for j, Lj in enumerate(L[:i+1]):\n            s = sum(Li[k] * Lj[k] for k in range(j))\n            Li[j] = sqrt(Ai[i] - s) if (i == j) else \\\n                      (1.0 / Lj[j] * (Ai[j] - s))\n    return L","language":"python"},{"title":"Draw a cuboid","code":"from visual import *\nmybox = box(pos=(0,0,0), length=4, height=2, width=3, axis=(-0.1,-0.1,0.1) ) \nscene.title = \"VPython: cuboid\"","language":"python"},{"title":"LU decomposition","code":"l, u, p = a.lup_decomposition\nl.pretty_print(\" %8.5f\", \"L\")\nu.pretty_print(\" %8.5f\", \"U\")\np.pretty_print(\" %d\",    \"P\")","language":"ruby"},{"title":"Van der Corput sequence","code":"def vdc(n, base=2):\n    vdc, denom = 0,1\n    while n:\n        denom *= base\n        n, remainder = divmod(n, base)\n        vdc += remainder / denom\n    return vdc","language":"python"},{"title":"Van der Corput sequence","code":"def vdc(n, base=2)\n  str = n.to_s(base).reverse\n  str.to_i(base).quo(base ** str.length)\nend\n\n(2..5).each do |base|\n  puts \"Base #{base}: \" + Array.new(10){|i| vdc(i,base)}.join(\", \")\nend","language":"ruby"},{"title":"Gray code","code":"int gray_encode(int n) {\n    return n ^ (n >> 1);\n}\n\nint gray_decode(int n) {\n    int p = n;\n    while (n >>= 1) p ^= n;\n    return p;\n}","language":"c"},{"title":"Gray code","code":"def gray_encode(bin)\n  bin ^ (bin >> 1)\nend\n\ndef gray_decode(gray)\n  bin = gray\n  while gray > 0\n    gray >>= 1\n    bin ^= gray\n  end\n  bin\nend","language":"ruby"},{"title":"Gray code","code":"(0..31).each do |n|\n  gr = gray_encode n\n  bin = gray_decode gr\n  printf \"%2d : %05b => %05b => %05b : %2d\\n\", n, n, gr, bin, bin\nend","language":"ruby"},{"title":"Gray code","code":"public static BigInteger grayDecode(BigInteger n){\n        String nBits = n.toString(2);\n        String result = nBits.substring(0, 1);\n        for(int i = 1; i < nBits.length(); i++){\n                //bin[i] = gray[i] ^ bin[i-1]\n\n                //XOR with characters \n                result += nBits.charAt(i) != result.charAt(i - 1) ? \"1\" : \"0\";\n        }\n        return new BigInteger(result, 2);\n}","language":"java"},{"title":"Terminal control/Inverse video","code":"#include <stdio.h>\n\nint main()\n{\n        printf(\"\\033[7mReversed\\033[m Normal\\n\");\n\n        return 0;\n}","language":"C"},{"title":"Terminal control/Inverse video","code":"#!/usr/bin/env python\n\nprint \"\\033[7mReversed\\033[m Normal\"","language":"Python"},{"title":"Levenshtein distance","code":"func lev(s, t) {\n    var d = [@(0 .. t.len), s.len.of {[_]}...]\n    for i,j in (^s ~X ^t) {\n        d[i+1][j+1] = (\n            s[i] == t[j]\n                ? d[i][j]\n                : 1+Math.min(d[i][j+1], d[i+1][j], d[i][j])\n        )\n    }\n    d[-1][-1]\n}","language":"ruby"},{"title":"Draw a sphere","code":"import pygame\nfrom pygame.locals import *\nimport time\nimport sys\nimport random\nimport math","language":"python"},{"title":"Read a file line by line","code":"#include <Core/Core.h>\n\nusing namespace Upp;\n\nCONSOLE_APP_MAIN\n{\n        FileIn in(CommandLine()[0]);\n        while(in && !in.IsEof())\n                Cout().PutLine(in.GetLine());\n}","language":"cpp"},{"title":"Read a file line by line","code":"var fs = require(\"fs\");\n\nvar readFile = function(path) {\n    return fs.readFileSync(path).toString();\n};\n\nconsole.log(readFile('file.txt'));","language":"javascript"},{"title":"Read a file line by line","code":"filename = \"input.txt\"\nfp = io.open( filename, \"r\" )\n\nfor line in fp:lines() do\n    print( line )\nend\n\nfp:close()","language":"lua"},{"title":"Read a file line by line","code":"for line in io.lines(\"input.txt\") do\n  print(line)\nend","language":"Lua"},{"title":"Read a file line by line","code":"FILE *f = fopen(name, \"r\");\nif (!f) {\n        pari_err(openfiler, \"input\", name);\n}\nwhile(fgets(line, MAX_LINELEN, f) != NULL) {\n        // ...\n}","language":"C"},{"title":"Read a file line by line","code":"with open(\"foobar.txt\") as f:\n    for line in f:\n        process(line)","language":"python"},{"title":"Read a file line by line","code":"import fileinput\nfor line in fileinput.input():\n    process(line)","language":"python"},{"title":"Read a file line by line","code":"IO.foreach \"foobar.txt\" do |line|\n  # Do something with line.\n  puts line\nend","language":"ruby"},{"title":"Read a file line by line","code":"# IO.foreach and File.foreach can also read a subprocess.\nIO.foreach \"| grep afs3 /etc/services\" do |line|\n  puts line\nend","language":"ruby"},{"title":"Read a file line by line","code":"filename = \"|strange-name.txt\"\nFile.open(filename) do |file|\n  file.each {|line| puts line}\nend","language":"ruby"},{"title":"Read a file line by line","code":"File(__FILE__).open_r.each { |line|\n    print line\n}","language":"ruby"},{"title":"Read a file line by line","code":"var fh = File(__FILE__).open_r\nwhile (fh.readline(\\var line)) {\n    print line\n}","language":"ruby"},{"title":"Least common multiple","code":"func gcd(a, b) {\n    while (a) { (a, b) = (b % a, a) }\n    return b\n}\n\nfunc lcm(a, b) {\n    (a && b) ? (a / gcd(a, b) * b) : 0\n}\n\nsay lcm(1001, 221)","language":"ruby"},{"title":"Partial function application","code":"fs = proc { |f, s| s.map &f }\nf1 = proc { |n| n * 2 }\nf2 = proc { |n| n ** 2 }\nfsf1 = fs.curry[f1]\nfsf2 = fs.curry[f2]\n\n[0..3, (2..8).step(2)].each do |e|\n  p fsf1[e]\n  p fsf2[e]\nend","language":"ruby"},{"title":"Rot-13","code":"function rot13(s)\n        local a = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n        local b = \"NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm\"\n        return (s:gsub(\"%a\", function(c) return b:sub(a:find(c)) end))\nend","language":"lua"},{"title":"Rot-13","code":"# Returns a copy of _s_ with rot13 encoding.\ndef rot13(s)\n  s.tr('A-Za-z', 'N-ZA-Mn-za-m')\nend\n\n# Perform rot13 on files from command line, or standard input.\nwhile line = ARGF.gets\n  print rot13(line)\nend","language":"ruby"},{"title":"Rot-13","code":"# Returns a copy of 's' with rot13 encoding.\nfunc rot13(s) {\n    s.tr('A-Za-z', 'N-ZA-Mn-za-m');\n}\n\n# Perform rot13 on standard input.\nSTDIN.each { |line| print rot13(line) }","language":"ruby"},{"title":"Terminal control/Preserve screen","code":"(function() {\n        var orig= document.body.innerHTML\n        document.body.innerHTML= '';\n        setTimeout(function() {\n                document.body.innerHTML= 'something';\n                setTimeout(function() {\n                        document.body.innerHTML= orig;\n                }, 1000);\n        }, 1000);\n})();","language":"javascript"},{"title":"Terminal control/Preserve screen","code":"#!/usr/bin/env python\n\nimport time\n\nprint \"\\033[?1049h\\033[H\"\nprint \"Alternate buffer!\"\n\nfor i in xrange(5, 0, -1):\n    print \"Going back in:\", i\n    time.sleep(1)\n\nprint \"\\033[?1049l\"","language":"Python"},{"title":"Terminal control/Preserve screen","code":"print \"\\e[?1049h\\e[H\";\nsay \"Alternate buffer!\";\n\n3.downto(1).each { |i|\n    say \"Going back in: #{i}\";\n    Sys.sleep(1);\n}\n\nprint \"\\e[?1049l\";","language":"ruby"},{"title":"Speech synthesis","code":"import pyttsx\n\nengine = pyttsx.init()\nengine.say(\"It was all a dream.\")\nengine.runAndWait()","language":"Python"},{"title":"Speech synthesis","code":"func text2speech(text, lang='en') {\n    Sys.run(\"espeak -v #{lang} -w /dev/stdout #{text.escape} | aplay\");\n}\ntext2speech(\"This is an example of speech synthesis.\");","language":"ruby"},{"title":"GUI/Maximum window dimensions","code":"#!/usr/bin/env python3\n\nimport tkinter as tk # import the module.\n\nroot = tk.Tk() # Create an instance of the class.\nroot.state('zoomed') # Maximized the window.\nroot.update_idletasks() # Update the display.\ntk.Label(root, text=(str(root.winfo_width())+ \" x \" +str(root.winfo_height())),\n         font=(\"Helvetica\", 25)).pack() # add a label and set the size to text.\nroot.mainloop()","language":"Python"},{"title":"GUI/Maximum window dimensions","code":"require('Tk')\n\nfunc max_window_size() -> (Number, Number) {\n    %s'MainWindow'.new.maxsize;\n}\n\nvar (width, height) = max_window_size();\nsay (width, 'x', height);","language":"ruby"},{"title":"Terminal control/Display an extended character","code":"#include <iostream>\n\nint main()\n{\n    std::cout << static_cast<char>(163); // pound sign\n    return 0;\n}","language":"cpp"},{"title":"Read a configuration file","code":"{\n  \"FULLNAME\": \" Foo Barber\",\n  \"FAVOURITEFRUIT\": \" banana\",\n  \"NEEDSPEELING\": \"\",\n  \"OTHERFAMILY\": [\n    \"Rhu Barber\",\n    \"Harry Barber\"\n  ]\n}","language":"javascript"},{"title":"Case-sensitivity of identifiers","code":"#include <stdio.h>\n\nstatic const char *dog = \"Benjamin\";\nstatic const char *Dog = \"Samba\";\nstatic const char *DOG = \"Bernie\";\n\nint main()\n{\n    printf(\"The three dogs are named %s, %s and %s.\\n\", dog, Dog, DOG);\n    return 0;\n}","language":"c"},{"title":"Case-sensitivity of identifiers","code":"dog = \"Benjamin\"\nDog = \"Samba\"\nDOG = \"Bernie\"\n\nprint( \"There are three dogs named \"..dog..\", \"..Dog..\" and \"..DOG..\".\" )","language":"lua"},{"title":"Case-sensitivity of identifiers","code":"var dog = 'Benjamin';\nvar Dog = 'Samba';\nvar DOG = 'Bernie';\nsay \"The three dogs are named #{dog}, #{Dog}, and #{DOG}.\";","language":"ruby"},{"title":"DNS query","code":"irb(main):001:0> require 'socket'\n=> true\nirb(main):002:0> Addrinfo.getaddrinfo(\"www.kame.net\", nil, nil, :DGRAM) \\\nirb(main):003:0*   .map! { |ai| ai.ip_address }\n=> [\"203.178.141.194\", \"2001:200:dff:fff1:216:3eff:feb1:44d7\"]","language":"ruby"},{"title":"DNS query","code":"var (err, *res) = Socket.getaddrinfo(\n        'www.kame.net', 0,\n        Hash.new(protocol => Socket.IPPROTO_TCP)\n);\nerr && die err;\nres.each { |z|\n    say [Socket.getnameinfo(z{:addr}, Socket.NI_NUMERICHOST)][1];\n}","language":"ruby"},{"title":"Here document","code":"const myVar = 123;\nconst tempLit = `Here is some\nmulti-line string. And here is\nthe value of \"myVar\": ${myVar}\nThat's all.`;\nconsole.log(tempLit)","language":"JavaScript"},{"title":"Here document","code":"print(\"\"\"\\\nUsage: thingy [OPTIONS]\n     -h                        Display this usage message\n     -H hostname               Hostname to connect to\n\"\"\")","language":"python"},{"title":"Here document","code":"address = <<END\n1, High Street,\n#{town_name},\nWest Midlands.\nWM4 5HD.\nEND","language":"ruby"},{"title":"Here document","code":"pancake = <<\"NO MORE INGREDIENTS\"\negg\nmilk\nflour\nNO MORE INGREDIENTS","language":"ruby"},{"title":"Here document","code":"x = <<'FOO'\nNo\n#{interpolation}\nhere\nFOO","language":"ruby"},{"title":"Here document","code":"output = <<`BAR`\nls /home\nBAR","language":"ruby"},{"title":"Here document","code":"puts <<EOF + \"lamb\"\nMary had\n  a little\nEOF","language":"ruby"},{"title":"Here document","code":"var text = <<\"EOF\";\na = #{1+2}\nb = #{3+4}\nEOF","language":"ruby"},{"title":"Here document","code":"var x = <<'FOO';\nNo\n#{interpolation}\nhere\nFOO","language":"ruby"},{"title":"Here document","code":"say (<<EOF + \"lamb\");\nMary had\n  a little\nEOF","language":"ruby"},{"title":"Here document","code":"say (<<EOF\nMary had\n  a little\nEOF\n+ \"lamb\");","language":"ruby"},{"title":"Executable library","code":"#ifndef HAILSTONE\n#define HAILSTONE       \n                                \nlong hailstone(long, long**);   \nvoid free_sequence(long *);\n\n#endif/*HAILSTONE*/","language":"C"},{"title":"Executable library","code":"void hailstone1(int);\n\nint main(void)\n{\n  hailstone1(27);\n\n  return 0;\n}","language":"C"},{"title":"Executable library","code":"# hsfreq.rb\nrequire 'hailstone'\n\nh = Hash.new(0)\nlast = 99_999\n(1..last).each {|n| h[Hailstone.hailstone(n).length] += 1}\nlength, count = h.max_by {|length, count| count}\n\nputs \"Given the hailstone sequences from 1 to #{last},\"\nputs \"the most common sequence length is #{length},\"\nputs \"with #{count} such sequences.\"","language":"ruby"},{"title":"Arena storage pool","code":"int *var = malloc(n*sizeof(int));\nTypename *var = malloc(sizeof(Typename));\nTypename *var = malloc(sizeof var[0]);","language":"c"},{"title":"Arena storage pool","code":"typedef struct mytypeStruct { .... } sMyType, *MyType;\n\nMyType var = malloc(sizeof(sMyType));","language":"c"},{"title":"Arena storage pool","code":"/* allocate an array of n MyTypes */\nMyType var = calloc(n, sizeof(sMyType));\n\nMyType third = var+3;       /* a reference to the 3rd item allocated */\n\nMyType fourth = &var[4];    /* another way, getting the fourth item */","language":"c"},{"title":"Arena storage pool","code":"pari_init(1<<20, 0); // Initialize PARI with a stack size of 1 MB.\nGEN four = addii(gen_2, gen_2); // On the stack\nGEN persist = gclone(four); // On the heap","language":"C"},{"title":"Self-describing numbers","code":"def impl(d, c, m):\n    if m < 0: return\n    if d == c[:len(d)]: print d\n    for i in range(c[len(d)],m+1):\n        dd = d+[i]\n        if i<len(dd) and c[i]==dd[i]: continue\n        impl(dd,c[:i]+[c[i]+1]+c[i+1:],m-i)\n \ndef self(n): impl([], [0]*(n+1), n)\n \nself(10)","language":"python"},{"title":"Self-describing numbers","code":"def self_describing?(n)\n  digits = n.digits.reverse\n  digits.each_with_index.all?{|digit, idx| digits.count(idx) == digit}\nend\n\n3_300_000.times {|n| puts n if self_describing?(n)}","language":"ruby"},{"title":"Self-describing numbers","code":"for b in (7 .. 36) {\n    var n = ((b-4) * b**(b-1) + 2*(b**(b-2)) + b**(b-3) + b**3 -> base(b))\n    say \"base #{'%2d' % b}: #{n}\"\n}","language":"ruby"},{"title":"Strip whitespace from a string/Top and tail","code":"{\n    let s = \" \\t String with spaces  \\t  \";\n    // a future version of ECMAScript will have trimStart().  Some current\n    // implementations have trimLeft().\n    console.log(\"original: '\" + s + \"'\");\n    console.log(\"trimmed left: '\" + s.replace(/^\\s+/,'') + \"'\");\n    // a future version of ECMAScript will have trimEnd().  Some current\n    // implementations have trimRight().\n    console.log(\"trimmed right: '\" + s.replace(/\\s+$/,'') + \"'\");\n    console.log(\"trimmed both: '\" + s.trim() + \"'\");\n }","language":"javascript"},{"title":"Strip whitespace from a string/Top and tail","code":"s = \" \\t\\v\\r\\n\\ffoo bar \\t\\v\\r\\n\\f\"\np s\np s.lstrip    # remove leading whitespaces\np s.rstrip    # remove trailing whitespaces\np s.strip     # remove both leading and trailing whitespace","language":"ruby"},{"title":"Strip whitespace from a string/Top and tail","code":"var s = \" \\t\\v\\r\\n\\ffoo bar \\t\\v\\r\\n\\f\";\nsay s.strip_beg.dump;    # remove leading whitespaces\nsay s.strip_end.dump;    # remove trailing whitespaces\nsay s.strip.dump;        # remove both leading and trailing whitespace","language":"ruby"},{"title":"Strip a set of characters from a string","code":"function stripchars(string, chars) {\n  return string.replace(RegExp('['+chars+']','g'), '');\n}","language":"JavaScript"},{"title":"Strip a set of characters from a string","code":"function stripchars(str, chrs)\n  local s = str:gsub(\"[\"..chrs:gsub(\"%W\",\"%%%1\")..\"]\", '')\n  return s\nend\n \nprint( stripchars( \"She was a soul stripper. She took my heart!\", \"aei\" ) )\n--> Sh ws  soul strppr. Sh took my hrt!\nprint( stripchars( \"She was a soul stripper. She took my heart!\", \"a-z\" ) )\n--> She ws  soul stripper. She took my hert!","language":"lua"},{"title":"Strip a set of characters from a string","code":"func stripchars(str, char_list) {\n    str.tr(char_list, \"\", \"d\");\n}","language":"ruby"},{"title":"Strip a set of characters from a string","code":"func stripchars(str, char_list) {\n    str.chars.grep {|c| !char_list.contains(c)}.join;\n}","language":"ruby"},{"title":"Roman numerals/Decode","code":"_rdecode = dict(zip('MDCLXVI', (1000, 500, 100, 50, 10, 5, 1)))\n\ndef decode( roman ):\n    result = 0\n    for r, r1 in zip(roman, roman[1:]):\n        rd, rd1 = _rdecode[r], _rdecode[r1]\n        result += -rd if rd < rd1 else rd\n    return result + _rdecode[roman[-1]]\n\nif __name__ == '__main__':\n    for r in 'MCMXC MMVIII MDCLXVI'.split():\n        print( r, decode(r) )","language":"python"},{"title":"Kaprekar numbers","code":"function isKaprekar( n, bs ) {\n        if ( n < 1 ) return false\n        if ( n == 1 ) return true\n        bs = bs || 10\n        var s = (n * n).toString(bs)\n        for (var i=1, e=s.length; i<e; i+=1) {\n                var a = parseInt(s.substr(0, i), bs)\n                var b = parseInt(s.substr(i), bs)\n                if (b && a + b == n) return true\n        }\n        return false\n}","language":"JavaScript"},{"title":"Kaprekar numbers","code":"function isKaprekar( n, bs ) {\n        if ( n < 1 ) return false\n        if ( n == 1 ) return true\n        bs = bs || 10\n        for (var a=n*n, b=0, s=1; a; s*=bs) {\n                b += a%bs*s\n                a = Math.floor(a/bs)\n                if (b && a + b == n) return true\n        }\n        return false\n}","language":"JavaScript"},{"title":"Kaprekar numbers","code":"Base = 10\nN = 6\nPaddy_cnt = 1\nfor n in range(N):\n  for V in CastOut(Base,Start=Base**n,End=Base**(n+1)):\n    for B in range(n+1,n*2+2):\n      x,y = divmod(V*V,Base**B)\n      if V == x+y and 0<y:\n        print('{1}: {0}'.format(V, Paddy_cnt))\n        Paddy_cnt += 1\n        break","language":"python"},{"title":"Kaprekar numbers","code":"Base = 16\nN = 4\nPaddy_cnt = 1\nfor V in CastOut(Base,Start=1,End=Base**N):\n  for B in range(1,N*2-1):\n    x,y = divmod(V*V,Base**B)\n    if V == x+y and 0<y:\n      print('{1}: {0:x}'.format(V, Paddy_cnt))\n      Paddy_cnt += 1\n      break","language":"python"},{"title":"Count occurrences of a substring","code":"function countSubstring(str, subStr) {\n    var matches = str.match(new RegExp(subStr, \"g\"));\n    return matches ? matches.length : 0;\n}","language":"javascript"},{"title":"Count occurrences of a substring","code":"function countSubstring(s1, s2)\n    return select(2, s1:gsub(s2, \"\"))\nend\n\nprint(countSubstring(\"the three truths\", \"th\"))\nprint(countSubstring(\"ababababab\", \"abab\"))","language":"Lua"},{"title":"Count occurrences of a substring","code":"function countSubstring(s1, s2)\n    local count = 0\n    for eachMatch in s1:gmatch(s2) do \n        count = count + 1 \n    end\n    return count\nend\n\nprint(countSubstring(\"the three truths\", \"th\"))\nprint(countSubstring(\"ababababab\", \"abab\"))","language":"Lua"},{"title":"Count occurrences of a substring","code":"def countSubstrings str, subStr\n  str.scan(subStr).length\nend\n\np countSubstrings \"the three truths\", \"th\"      #=> 3\np countSubstrings \"ababababab\", \"abab\"          #=> 2","language":"ruby"},{"title":"Count occurrences of a substring","code":"func countSubstring(s, ss) {\n    var re = Regex.new(ss.escape, 'g');      # 'g' for global\n    var counter = 0;\n    while (s =~ re) { ++counter };\n    return counter;\n}\n\nsay countSubstring(\"the three truths\",\"th\");\nsay countSubstring(\"ababababab\",\"abab\");","language":"ruby"},{"title":"URL decoding","code":"#include <string>\n#include \"Poco/URI.h\"\n#include <iostream>\n\nint main( ) {\n   std::string encoded( \"http%3A%2F%2Ffoo%20bar%2F\" ) ;\n   std::string decoded ;\n   Poco::URI::decode ( encoded , decoded ) ;\n   std::cout << encoded << \" is decoded: \" << decoded << \" !\" << std::endl ;\n   return 0 ;\n}","language":"cpp"},{"title":"URL decoding","code":"import java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\n\npublic class Main\n{\n    public static void main(String[] args) throws UnsupportedEncodingException\n    {\n        String encoded = \"http%3A%2F%2Ffoo%20bar%2F\";\n        String normal = URLDecoder.decode(encoded, \"utf-8\");\n        System.out.println(normal);\n    }\n}","language":"java"},{"title":"URL decoding","code":"function decodeChar(hex)\n        return string.char(tonumber(hex,16))\nend\n\nfunction decodeString(str)\n        local output, t = string.gsub(str,\"%%(%x%x)\",decodeChar)\n        return output\nend\n\n-- will print \"http://foo bar/\"\nprint(decodeString(\"http%3A%2F%2Ffoo%20bar%2F\"))","language":"lua"},{"title":"URL decoding","code":"require 'cgi'\nputs CGI.unescape(\"http%3A%2F%2Ffoo%20bar%2F\")\n# => \"http://foo bar/\"","language":"ruby"},{"title":"URL decoding","code":"require 'uri'\nputs URI.decode_www_form_component(\"http%3A%2F%2Ffoo%20bar%2F\")\n# => \"http://foo bar/\"","language":"ruby"},{"title":"URL decoding","code":"func urldecode(str) {\n    str.gsub!('+', ' ');\n    str.gsub!(/\\%([A-Fa-f0-9]{2})/, {|a| 'C'.pack(a.hex)});\n    return str;\n}\n\nsay urldecode('http%3A%2F%2Ffoo+bar%2F');  # => \"http://foo bar/\"","language":"ruby"},{"title":"Strip control codes and extended characters from a string","code":"stripped = lambda s: \"\".join(i for i in s if 31 < ord(i) < 127)\n\nprint(stripped(\"\\ba\\x00b\\n\\rc\\fd\\xc3\"))","language":"Python"},{"title":"Strip control codes and extended characters from a string","code":"var str = \"\\ba\\x00b\\n\\rc\\fd\\xc3\\x7ffoo\"\n\nvar letters = str.chars.map{.ord}\nsay letters.map{.chr}.join.dump\n\nvar nocontrols = letters.grep{ (_ > 32) && (_ != 127) }\nsay nocontrols.map{.chr}.join.dump\n\nvar noextended = nocontrols.grep{ _ < 127 }\nsay noextended.map{.chr}.join.dump","language":"ruby"},{"title":"Special variables","code":"var obj = {\n  foo: 1,\n  bar: function () { return this.foo; }\n};\nobj.bar(); // returns 1","language":"javascript"},{"title":"Special variables","code":"function concat() {\n  var s = \"\";\n  for (var i = 0; i < arguments.length; i++) {\n    s += arguments[i];\n  }\n  return s;\n}\nconcat(\"a\", \"b\", \"c\"); // returns \"abc\"","language":"javascript"},{"title":"Caesar cipher","code":"var caesar = (text, shift) => text\n  .toUpperCase()\n  .replace(/[^A-Z]/g, '')\n  .replace(/[A-Z]/g, a =>\n    String.fromCharCode(65 + (a.charCodeAt(0) - 65 + shift) % 26));","language":"javascript"},{"title":"Caesar cipher","code":"def caesar(s, k, decode = False):\n        if decode: k = 26 - k\n        return \"\".join([chr((ord(i) - 65 + k) % 26 + 65)\n                                for i in s.upper()\n                                if ord(i) >= 65 and ord(i) <= 90 ])\n\nmsg = \"The quick brown fox jumped over the lazy dogs\"\nprint msg\nenc = caesar(msg, 11)\nprint enc\nprint caesar(enc, 11, decode = True)","language":"Python"},{"title":"Caesar cipher","code":"from string import ascii_uppercase as abc\n\ndef caesar(s, k, decode = False):\n    trans = dict(zip(abc, abc[(k,26-k)[decode]:] + abc[:(k,26-k)[decode]]))\n    return ''.join(trans[L] for L in s.upper() if L in abc)\n\nmsg = \"The quick brown fox jumped over the lazy dogs\"\nprint(caesar(msg, 11))\nprint(caesar(caesar(msg, 11), 11, True))","language":"python"},{"title":"Caesar cipher","code":"class String\n  ALFABET = (\"A\"..\"Z\").to_a\n\n  def caesar_cipher(num)\n    self.tr(ALFABET.join, ALFABET.rotate(num).join)\n  end\n\nend\n\n#demo:\nencypted  = \"THEYBROKEOURCIPHEREVERYONECANREADTHIS\".caesar_cipher(3)\ndecrypted = encypted.caesar_cipher(-3)","language":"ruby"},{"title":"Substring/Top and tail","code":"alert(\"knight\".slice(1));       // strip first character\nalert(\"socks\".slice(0, -1));    // strip last character\nalert(\"brooms\".slice(1, -1));   // strip both first and last characters","language":"javascript"},{"title":"Substring/Top and tail","code":"print (string.sub(\"knights\",2))    -- remove the first character\nprint (string.sub(\"knights\",1,-2))    -- remove the last character\nprint (string.sub(\"knights\",2,-2))    -- remove the first and last characters","language":"lua"},{"title":"Substring/Top and tail","code":"print \"knight\"[1:]     # strip first character\nprint \"socks\"[:-1]     # strip last character\nprint \"brooms\"[1:-1]   # strip both first and last characters","language":"python"},{"title":"Substring/Top and tail","code":"var gstr = \"J\\x{332}o\\x{332}s\\x{332}e\\x{301}\\x{332}\";\nsay gstr-/^\\X/;                    # strip first grapheme\nsay gstr-/\\X\\z/;                   # strip last grapheme\nsay gstr.sub(/^\\X/).sub(/\\X\\z/);   # strip both first and last graphemes","language":"ruby"},{"title":"Sorting algorithms/Sleep sort","code":">>>>>,----------[++++++++\n++[->+>+<<]>+>[-<<+>>]+++\n+++++[-<------>]>>+>,----\n------<<+[->>>>>+<<<<<]>>\n]>>>[<<<<[<<<[->>+<<[->+>\n[-]<<]]>[-<+>]>[-<<<.>>>>\n->>>>>[>>>>>]<-<<<<[<<<<<\n]+<]<<<<]>>>>>[>>>>>]<]","language":"C"},{"title":"Sorting algorithms/Sleep sort","code":"var input = new[] { 1, 9, 2, 1, 3 };\n\nforeach (var n in input)\n        Task.Run(() =>\n        {\n                Thread.Sleep(n * 1000);\n                Console.WriteLine(n);\n        });","language":"csharp"},{"title":"Sorting algorithms/Sleep sort","code":"Array.prototype.timeoutSort = function (f) {\n        this.forEach(function (n) {\n                setTimeout(function () { f(n) }, 5 * n)\n        });\n}","language":"javascript"},{"title":"Sorting algorithms/Sleep sort","code":"ARGV.map{.to_i}.map{ |i|\n    {Sys.sleep(i); say i}.fork;\n}.each{.wait};","language":"ruby"},{"title":"Hello world/Web server","code":"var http = require('http');\n\nhttp.createServer(function (req, res) {\n    res.writeHead(200, {'Content-Type': 'text/plain'});\n    res.end('Goodbye, World!\\n');\n}).listen(8080, '127.0.0.1');","language":"javascript"},{"title":"Hello world/Web server","code":"from wsgiref.simple_server import make_server\n\ndef app(environ, start_response):\n    start_response('200 OK', [('Content-Type','text/html')])\n    yield b\"<h1>Goodbye, World!</h1>\"\n\nserver = make_server('127.0.0.1', 8080, app)\nserver.serve_forever()","language":"Python"},{"title":"Hello world/Web server","code":"require 'webrick'\nserver = WEBrick::HTTPServer.new(:Port => 8080)\nserver.mount_proc('/') {|request, response| response.body = \"Goodbye, World!\"}\ntrap(\"INT\") {server.shutdown}\nserver.start","language":"ruby"},{"title":"Hello world/Web server","code":"require 'webrick'\nWEBrick::HTTPServer.new(:Port => 80).tap {|srv|\n    srv.mount_proc('/') {|request, response| response.body = \"Goodbye, World!\"}\n}.start","language":"Ruby"},{"title":"Hello world/Web server","code":"with server_socket socket :port 4000\n  accepting client :from socket\n    making stdout outfile+fd.client\n      prn \"HTTP/1.0 200 OK\"\n      prn \"Content-type: text/plain\"\n      prn \"\"\n      prn \"Hello, world!\"","language":"python"},{"title":"Empty string","code":"#include <string>\n\n// ...\n\nstd::string str; // a string object for an empty string\n\nif (str.empty()) { ... } // to test if string is empty\n\n// we could also use the following\nif (str.length() == 0) { ... }\nif (str == \"\") { ... }","language":"cpp"},{"title":"Empty string","code":"using System;\n\nclass Program {\n    static void Main (string[] args) {\n        string example = string.Empty;\n        if (string.IsNullOrEmpty(example)) { }\n        if (!string.IsNullOrEmpty(example)) { }\n    }\n}","language":"csharp"},{"title":"Empty string","code":"s == \"\"\ns.length == 0\n!s\n!Boolean(s)","language":"javascript"},{"title":"Empty string","code":"!!s\ns != \"\"\ns.length != 0\ns.length > 0\nBoolean(s)","language":"javascript"},{"title":"Empty string","code":"str = \"\"    -- create empty string\n\n-- test for empty string\nif str == \"\" then\n  print \"The string is empty\"\nend\n\n-- test for nonempty string\nif str ~= \"\" then\n  print \"The string is not empty\"\nend","language":"Lua"},{"title":"Empty string","code":"s = ''\nif not s:\n    print('String s is empty.')\nif s:\n    print('String s is not empty.')","language":"python"},{"title":"Empty string","code":"s = \"\"\ns = String.new\ns = \"any string\"; s.clear","language":"ruby"},{"title":"Empty string","code":"s == \"\"\ns.eql?(\"\")\ns.empty?\ns.length == 0\ns[/\\A\\z/]\n\n# also silly things like\ns.each_char.to_a.empty?","language":"ruby"},{"title":"Empty string","code":"s != \"\"\ns.length > 0\ns[/./m]","language":"ruby"},{"title":"Empty string","code":"s == \"\";\ns.length == 0;\ns.is_empty;\ns ~~ /^\\z/;\ns ~~ /\\A\\z/;","language":"ruby"},{"title":"History variables","code":"foo_hist = []\ntrace_var(:$foo){|v| foo_hist.unshift(v)}\n\n$foo = \"apple\"\n$foo = \"pear\"\n$foo = \"banana\"\n\np foo_hist # => [\"banana\", \"pear\", \"apple\"]","language":"ruby"},{"title":"Sokoban","code":"level = <<EOS\n#######\n#     #\n#     #\n#. #  #\n#. $$ #\n#.$$  #\n#.#  @#\n#######\nEOS\nputs level, \"\", Sokoban.new(level).solve","language":"ruby"},{"title":"Count in octal","code":"#include <stdio.h>\n\nint main()\n{\n        unsigned int i = 0;\n        do { printf(\"%o\\n\", i++); } while(i);\n        return 0;\n}","language":"C"},{"title":"Count in octal","code":"#include <iostream>\n\nint main()\n{\n  unsigned i = 0;\n  do\n  {\n    std::cout << std::oct << i << std::endl;\n    ++i;\n  } while(i != 0);\n  return 0;\n}","language":"cpp"},{"title":"Count in octal","code":"# version 0.21.1\n# using unsigned 8 bit integer, range 0 to 255\n \n(0_u8..255_u8).each { |i| puts i.to_s(8) }","language":"ruby"},{"title":"Count in octal","code":"for l=1,2147483647 do\n  print(string.format(\"%o\",l))\nend","language":"lua"},{"title":"Count in octal","code":"import sys\nfor n in xrange(sys.maxint):\n    print oct(n)","language":"Python"},{"title":"Multisplit","code":"text = 'a!===b=!=c'\nseparators = ['==', '!=', '=']\n\ndef multisplit_simple(text, separators)\n  text.split(Regexp.union(separators))\nend\n\np multisplit_simple(text, separators) # => [\"a\", \"\", \"b\", \"\", \"c\"]","language":"ruby"},{"title":"Multisplit","code":"func multisplit(sep, str, keep_sep=false) {\n    sep = sep.map{.escape}.join('|');\n    var re = Regex.new(keep_sep ? \"(#{sep})\" : sep);\n    str.split(re, -1);\n}\n\n[false, true].each { |bool|\n    say multisplit(%w(== != =), 'a!===b=!=c', keep_sep: bool);\n}","language":"ruby"},{"title":"OLE Automation","code":"import win32com.client\nclient = win32com.client.Dispatch(\"python.server\")\nclient.write(\"hello world\")","language":"Python"},{"title":"Binary digits","code":"#include <iostream>\n\nstd::string binary(int n) {\n  return n == 0 ? \"\" : binary(n >> 1) + std::to_string(n & 1);\n}\n\nint main(int argc, char* argv[]) {\n  for (int i = 1; i < argc; ++i) {\n    std::cout << binary(std::stoi(argv[i])) << std::endl;\n  }\n}","language":"cpp"},{"title":"Binary digits","code":"using System;\n\nclass Program\n{\n    static void Main()\n    {\n        foreach (var number in new[] { 5, 50, 9000 })\n        {\n            Console.WriteLine(Convert.ToString(number, 2));\n        }\n    }\n}","language":"csharp"},{"title":"Binary digits","code":"public class Main {\n    public static void main(String[] args) {\n        System.out.println(Integer.toBinaryString(5));\n        System.out.println(Integer.toBinaryString(50));\n        System.out.println(Integer.toBinaryString(9000));\n    }\n}","language":"java"},{"title":"Binary digits","code":"function toBinary(number) {\n    return new Number(number)\n        .toString(2);\n}\nvar demoValues = [5, 50, 9000];\nfor (var i = 0; i < demoValues.length; ++i) {\n    // alert() in a browser, wscript.echo in WSH, etc.\n    print(toBinary(demoValues[i])); \n}","language":"javascript"},{"title":"Binary digits","code":"function dec2bin (n)\n    local bin = \"\"\n    while n > 0 do\n        bin = n % 2 .. bin\n        n = math.floor(n / 2)\n    end\n    return bin\nend\n\nprint(dec2bin(5))\nprint(dec2bin(50))\nprint(dec2bin(9000))","language":"Lua"},{"title":"Binary digits","code":"[5,50,9000].each do |n|\n  puts \"%b\" % n\nend","language":"ruby"},{"title":"Binary digits","code":"for n in [5,50,9000]\n  puts n.to_s(2)\nend","language":"ruby"},{"title":"Binary digits","code":"[5, 50, 9000].each { |n|\n    say n.as_bin;\n}","language":"ruby"},{"title":"Binary digits","code":"println(5.binary)\nprintln(50.binary)\nprintln(9000.binary)","language":"javascript"},{"title":"Hello world/Newline omission","code":"#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[]) {\n  (void) printf(\"Goodbye, World!\");    /* No automatic newline */\n  return EXIT_SUCCESS;\n}","language":"c"},{"title":"Hello world/Newline omission","code":"#include <iostream>\n\nint main() {\n  std::cout << \"Goodbye, World!\";\n  return 0;\n}","language":"cpp"},{"title":"Hello world/Newline omission","code":"public class HelloWorld\n{\n public static void main(String[] args)\n {\n  System.out.print(\"Goodbye, World!\");\n }\n}","language":"java"},{"title":"Start from a main routine","code":"/*Abhishek Ghosh, 7th November 2013, Rotterdam*/\n#include<stdio.h>\n\n#define start main()\n\nint start\n{\n        printf(\"Hello World !\");\n        return 0;\n}","language":"C"},{"title":"Start from a main routine","code":"BEGIN {\n  # begin code\n}\n\nEND {\n  # end code\n}","language":"ruby"},{"title":"Pythagorean triples","code":"[{\"maxPerimeter\":10, \"triples\":0, \"primitives\":0}, \n {\"maxPerimeter\":100, \"triples\":17, \"primitives\":7}, \n {\"maxPerimeter\":1000, \"triples\":325, \"primitives\":70}]","language":"JavaScript"},{"title":"Color quantization","code":"from PIL import Image\n\nif __name__==\"__main__\":\n        im = Image.open(\"frog.png\")\n        im2 = im.quantize(16)\n        im2.show()","language":"python"},{"title":"Show the epoch","code":"#include <time.h>\n#include <stdio.h>\n\nint main() {\n    time_t t = 0;\n    printf(\"%s\", asctime(gmtime(&t)));\n    return 0;\n}","language":"c"},{"title":"Show the epoch","code":"using System;\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(new DateTime());\n    }\n}","language":"csharp"},{"title":"Show the epoch","code":"#include <iostream>\n#include <chrono>\n#include <ctime>\nint main()\n{\n    std::chrono::system_clock::time_point epoch;\n    std::time_t t = std::chrono::system_clock::to_time_t(epoch);\n    std::cout << std::asctime(std::gmtime(&t)) << '\\n';\n    return 0;\n}","language":"cpp"},{"title":"Show the epoch","code":"import java.text.DateFormat;\nimport java.util.Date;\nimport java.util.TimeZone;\n\npublic class DateTest{\n    public static void main(String[] args) {\n        Date date = new Date(0);\n        DateFormat format = DateFormat.getDateTimeInstance();\n        format.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        System.out.println(format.format(date));\n    }\n}","language":"java"},{"title":"Program name","code":"#include <stdio.h>\n\nint main(int argc, char **argv) {\n        printf(\"Executable: %s\\n\", argv[0]);\n\n        return 0;\n}","language":"c"},{"title":"Program name","code":"#include <stdio.h>\n \nint main()\n{\n        printf(\"This code was in file %s in function %s, at line %d\\n\",\\\n                __FILE__, __FUNCTION__, __LINE__);\n        return 0;\n}","language":"c"},{"title":"Program name","code":"#include <iostream>\n\nusing namespace std;\n\nint main(int argc, char **argv) {\n        char *program = argv[0];\n        cout << \"Program: \" << program << endl;\n\n        return 0;\n}","language":"cpp"},{"title":"Program name","code":"using System;\nnamespace ProgramName\n{\n        class Program\n        {\n                static void Main(string[] args)\n                {\n                        Console.Write(Environment.CommandLine);\n                }\n        }\n}","language":"csharp"},{"title":"Program name","code":"public class ScriptName {\n        public static void main(String[] args) {\n                Class c = new Object(){}.getClass().getEnclosingClass();\n                System.out.println(\"Program: \" + c.getName());\n        }\n}","language":"java"},{"title":"Program name","code":"public class ScriptName {\n        public static void main(String[] args) {\n                Class c = System.getSecurityManager().getClassContext()[0];\n                System.out.println(\"Program: \" + c.getName());\n        }\n}","language":"java"},{"title":"Program name","code":"function foo() {\n  return arguments.callee.name;\n}","language":"javascript"},{"title":"Program name","code":"#!/usr/bin/env node\n/*jslint nodejs:true */\n\nfunction main() {\n        var program = __filename;\n        console.log(\"Program: \" + program);\n}\n\nif (!module.parent) { main(); }","language":"javascript"},{"title":"Program name","code":"#!/usr/bin/env lua\n\nfunction main(arg)\n        local program = arg[0]\n        print(\"Program: \" .. program)\nend\n\nif type(package.loaded[(...)]) ~= \"userdata\" then\n        main(arg)\nelse\n        module(..., package.seeall)\nend","language":"lua"},{"title":"Program name","code":"#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    program = sys.argv[0]\n    print(\"Program: %s\" % program)\n\nif __name__ == \"__main__\":\n    main()","language":"python"},{"title":"Program name","code":"#!/usr/bin/env python\n\nimport inspect\n\ndef main():\n    program = inspect.getfile(inspect.currentframe())\n    print(\"Program: %s\" % program)\n\nif __name__ == \"__main__\":\n    main()","language":"python"},{"title":"Program name","code":"#!/usr/bin/env ruby\n\nputs \"Path: #{$PROGRAM_NAME}\"  # or puts \"Path: #{$0}\"\nputs \"Name: #{File.basename $0}\"","language":"ruby"},{"title":"Program name","code":"use StdIO: all;\nuse Array: all;\nuse String: { string };\nuse CommandLine: all;\n\nint main() {\n        program = argv(0);\n        printf(\"Program: %s\\n\", program);\n        return(0);\n}","language":"c"},{"title":"Program name","code":"say __MAIN__;\nif (__MAIN__ != __FILE__) {\n    say \"This file has been included!\";\n}","language":"ruby"},{"title":"Pick random element","code":"using System;\nusing System.Collections.Generic;\n\nclass RandomElementPicker {\n  static void Main() {\n    var list = new List<int>(new[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9});\n    var rng = new Random();\n    var randomElement = list[rng.Next(list.Count)];\n    Console.WriteLine(\"I picked element {0}\", randomElement);\n  }\n}","language":"csharp"},{"title":"Pick random element","code":"math.randomseed(os.time())\nlocal a = {1,2,3}\nprint(a[math.random(1,#a)])","language":"lua"},{"title":"Pick random element","code":"irb(main):001:0> %w(north east south west).sample\n=> \"west\"\nirb(main):002:0> (1..100).to_a.sample(2)\n=> [17, 79]","language":"ruby"},{"title":"Pick random element","code":"var arr = %w(north east south west);\nsay arr.rand;\nsay arr.rand(2).dump;","language":"ruby"},{"title":"URL encoding","code":"#include <QByteArray>\n#include <iostream>\n\nint main( ) {\n   QByteArray text ( \"http://foo bar/\" ) ;\n   QByteArray encoded( text.toPercentEncoding( ) ) ;\n   std::cout << encoded.data( ) << '\\n' ;\n   return 0 ;\n}","language":"cpp"},{"title":"URL encoding","code":"import java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\n\npublic class Main\n{\n    public static void main(String[] args) throws UnsupportedEncodingException\n    {\n        String normal = \"http://foo bar/\";\n        String encoded = URLEncoder.encode(normal, \"utf-8\");\n        System.out.println(encoded);\n    }\n}","language":"java"},{"title":"URL encoding","code":"function encodeChar(chr)\n        return string.format(\"%%%X\",string.byte(chr))\nend\n\nfunction encodeString(str)\n        local output, t = string.gsub(str,\"[^%w]\",encodeChar)\n        return output\nend\n\n-- will print \"http%3A%2F%2Ffoo%20bar%2F\"\nprint(encodeString(\"http://foo bar/\"))","language":"lua"},{"title":"URL encoding","code":"import urllib\ns = 'http://foo/bar/'\ns = urllib.quote(s)","language":"python"},{"title":"URL encoding","code":"require 'cgi'\nputs CGI.escape(\"http://foo bar/\").gsub(\"+\", \"%20\")\n# => \"http%3A%2F%2Ffoo%20bar%2F\"","language":"ruby"},{"title":"URL encoding","code":"require 'uri'\nputs URI.encode_www_form_component(\"http://foo bar/\").gsub(\"+\", \"%20\")\n# => \"http%3A%2F%2Ffoo%20bar%2F\"","language":"ruby"},{"title":"URL encoding","code":"func urlencode(str) {\n    str.gsub!(%r\"([^-A-Za-z0-9_.!~*'() ])\", {|a| \"%%%02X\" % a.ord});\n    str.gsub!(' ', '+');\n    return str;\n}\n\nsay urlencode('http://foo bar/');","language":"ruby"},{"title":"Read a specific line from a file","code":"iter = io.lines 'test.txt'\nfor i=0, 5 do\n    if not iter() then\n        error 'Not 7 lines in file'\n    end\nend\n\nline = iter()","language":"lua"},{"title":"Read a specific line from a file","code":"with open('xxx.txt') as f:\n    for i, line in enumerate(f):\n        if i == 6:\n            break\n    else:\n        print('Not 7 lines in file')\n        line = None","language":"python"},{"title":"Read a specific line from a file","code":"from itertools import islice\n\nwith open('xxx.txt') as f:\n    try:\n        line = next(islice(f, 6, 7))\n    except StopIteration:\n        print('Not 7 lines in file')","language":"python"},{"title":"Read a specific line from a file","code":"func getNthLine(filename, n) {\n  var file = File.new(filename);\n  file.open_r.each { |line|\n    Num($.) == n && return line;\n  }\n  warn \"file #{file} does not have #{n} lines, only #{$.}\\n\";\n  return nil;\n}\n\nvar line = getNthLine(\"/etc/passwd\", 7);\nprint line if defined line;","language":"ruby"},{"title":"Deepcopy","code":"var deepcopy = function(o){\n  return JSON.parse(JSON.stringify(src));\n};\n\nvar src = {foo:0,bar:[0,1]};\nprint(JSON.stringify(src));\nvar dst = deepcopy(src);\nprint(JSON.stringify(src));","language":"JavaScript"},{"title":"Deepcopy","code":"var deepcopy = function(o){\n  return eval(uneval(o));\n};\nvar src = {foo:0,bar:[0,1]};\nsrc['baz'] = src;\nprint(uneval(src));\nvar dst = deepcopy(src);\nprint(uneval(src));","language":"JavaScript"},{"title":"Integer sequence","code":"#include <stdio.h>\n\nint main()\n{\n        unsigned int i = 0;\n        while (++i) printf(\"%u\\n\", i);\n\n        return 0;\n}","language":"c"},{"title":"Integer sequence","code":"#include <cstdint>\n#include <iostream>\n#include <limits>\n\nint main()\n{\n  auto i = std::uintmax_t{};\n  \n  while (i < std::numeric_limits<decltype(i)>::max())\n    std::cout << ++i << '\\n';\n}","language":"cpp"},{"title":"Integer sequence","code":"public class Count{\n    public static void main(String[] args){\n        for(long i = 1; ;i++) System.out.println(i);\n    }\n}","language":"java"},{"title":"Integer sequence","code":"var i = 0;\n\nwhile (true)\n    document.write(++i + ' ');","language":"javascript"},{"title":"Integer sequence","code":"i = 1\n\n-- in the event that the number inadvertently wraps around,\n-- stop looping - this is unlikely with Lua's default underlying\n-- number type (double), but on platform without double\n-- the C type used for numbers can be changed\nwhile i > 0 do\n    print( i )\n    i = i + 1\nend","language":"lua"},{"title":"Integer sequence","code":"#include <order/interpreter.h>\n\n#define ORDER_PP_DEF_8printloop ORDER_PP_FN( \\\n8fn(8N,                                      \\\n    8do(8print(8to_lit(8N) 8comma 8space),   \\\n        8printloop(8inc(8N)))) )\n\nORDER_PP( 8printloop(1) )","language":"c"},{"title":"Integer sequence","code":"#include <order/interpreter.h>\n\n#define ORDER_PP_DEF_8printloop ORDER_PP_FN( \\\n8fn(8N,                                      \\\n    8do(8print(8to_lit(8N) 8comma 8space),   \\\n        8when(8less(8N, 99), 8printloop(8inc(8N))))) )\n\nORDER_PP( 8printloop(1) )   // 1, ..., 99,","language":"c"},{"title":"Integer sequence","code":"i=1\nwhile i:\n    print(i)\n    i += 1","language":"python"},{"title":"Integer sequence","code":"from itertools import count\n\nfor i in count(): \n    print(i)","language":"python"},{"title":"Truncate a file","code":"#include <unistd.h>\n#include <sys/types.h>\n\n...\ntruncate(filename, length);\nftruncate(fd, length);\n...","language":"c"},{"title":"Truncate a file","code":"def truncate_file(name, length):\n    if not os.path.isfile(name):\n        return False\n    if length >= os.path.getsize(name):\n        return False\n    with open(name, 'ab') as f:\n        f.truncate(length)\n    return True","language":"python"},{"title":"Truncate a file","code":"# Open a file for writing, and truncate it to 1234 bytes.\nFile.open(\"file\", \"ab\") do |f|\n  f.truncate(1234)\n  f << \"Killroy was here\" # write to file\nend  # file is closed now.\n\n# Just truncate a file to 567 bytes.\nFile.truncate(\"file\", 567)","language":"ruby"},{"title":"Truncate a file","code":"func truncate(filename, len) {\n    var file = File(filename);\n    len > file.size ->\n        && die \"The provided length is greater than the length of the file\";\n    file.truncate(len);\n}\n\n# truncate \"file.ext\" to 1234 bytes\ntruncate(\"file.ext\", 1234);","language":"ruby"},{"title":"Linear congruential generator","code":"lcg = LCG::Berkeley.new(1)\np (1..5).map {lcg.rand}\n# prints [1103527590, 377401575, 662824084, 1147902781, 2035015474]\n\nlcg = LCG::Microsoft.new(1)\np (1..5).map {lcg.rand}\n# prints [41, 18467, 6334, 26500, 19169]","language":"ruby"},{"title":"Ternary logic","code":"require 'trit'\nmaybe = MAYBE\n\n[true, maybe, false].each do |a|\n  [true, maybe, false].each do |b|\n    printf \"%5s ^ %5s => %5s\\n\", a, b, a.trit ^ b\n  end\nend","language":"ruby"},{"title":"Letter frequency","code":"var freq =  from c in str\n            where char.IsLetter(c)\n            orderby c\n            group c by c into g\n            select g.Key + \":\" + g.Count();\n\nforeach(var g in freq)\n    Console.WriteLine(g);","language":"csharp"},{"title":"Letter frequency","code":"import collections, sys\n\ndef filecharcount(openfile):\n    return sorted(collections.Counter(c for l in openfile for c in l).items())\n\nf = open(sys.argv[1])\nprint(filecharcount(f))","language":"python"},{"title":"Letter frequency","code":"...\nfrom collections import defaultdict\ndef countletters(file_handle):\n    \"\"\"Count occurences of letters and return a dictionary of them\n    \"\"\"\n    results = defaultdict(int)\n    for line in file_handle:\n        for char in line:\n            if char.lower() in letters:\n                c = char.lower()\n                results[c] += 1\n    return results","language":"python"},{"title":"Letter frequency","code":"lettercounts = countletters(sourcedata)\nfor letter,count in lettercounts.iteritems():\n    print \"%s=%s\" % (letter, count),","language":"python"},{"title":"Letter frequency","code":"def letter_frequency(file)\n  letters = 'a' .. 'z'\n  File.read(file) .\n       split(//) .\n       group_by {|letter| letter.downcase} .\n       select   {|key, val| letters.include? key} .\n       collect  {|key, val| [key, val.length]} \nend\n\nletter_frequency(ARGV[0]).sort_by {|key, val| -val}.each {|pair| p pair}","language":"ruby"},{"title":"Letter frequency","code":"func letter_frequency(File file) {\n    file.read.chars.grep{.match(/[[:alpha:]]/)} \\\n        .group_by {|letter| letter.downcase}    \\\n        .map_val  {|_, val| val.len}            \\\n        .sort_by  {|_, val| -val}\n}\n \nvar top = letter_frequency(File(__FILE__))\ntop.each{|pair| say \"#{pair[0]}: #{pair[1]}\"}","language":"ruby"},{"title":"Longest string challenge","code":"function longer(s1, s2)\n    if s1:sub(#s2):find('^$') then\n       return false\n    else\n       return true\n    end\nend","language":"lua"},{"title":"Longest string challenge","code":"var l = '';  # Sample longest string seen.\nvar a = '';  # Accumulator to save longest strings.\n\nSTDIN.each { |n|\n    n.substr(l.len) ? (a = n; l = n)\n                    : (!l.substr(n.len) && a.concat!(n));\n}\n\nprint a;","language":"ruby"},{"title":"Return multiple values","code":"function addsub( a, b )\n    return a+b, a-b\nend\n\ns, d = addsub( 7, 5 )\nprint( s, d )","language":"lua"},{"title":"Return multiple values","code":"sum, difference = addsub(33, 12)\nprint \"33 + 12 = %s\" % sum\nprint \"33 - 12 = %s\" % difference","language":"python"},{"title":"Return multiple values","code":"def addsub(x, y)\n  [x + y, x - y]\nend","language":"ruby"},{"title":"Return multiple values","code":"def addsub(x, y)\n  return x + y, x - y\nend","language":"ruby"},{"title":"Return multiple values","code":"sum, difference = addsub(33, 12)\nputs \"33 + 12 = #{sum}\"\nputs \"33 - 12 = #{difference}\"","language":"ruby"},{"title":"Return multiple values","code":"func foo(a,b) {\n    return (a+b, a*b);\n}","language":"ruby"},{"title":"Return multiple values","code":"var (x, y) = foo(4, 5);\nsay x;   #=> 9\nsay y;   #=> 20","language":"ruby"},{"title":"Hofstadter Q sequence","code":"{\"firstTen\":[1, 1, 2, 3, 3, 4, 5, 5, 6, 6], \n \"thousandth\":502,\n \"Q<Q-1UpTo10E5\":49798}","language":"JavaScript"},{"title":"Count the coins","code":"function countSums (amount, values)\n    local t = {}\n    for i = 1, amount do t[i] = 0 end\n    t[0] = 1\n    for k, val in pairs(values) do\n        for i = val, amount do t[i] = t[i] + t[i - val] end\n    end\n    return t[amount]\nend\n\nprint(countSums(100, {1, 5, 10, 25}))\nprint(countSums(100000, {1, 5, 10, 25, 50, 100}))","language":"Lua"},{"title":"Count the coins","code":"def changes(amount, coins):\n    ways = [0] * (amount + 1)\n    ways[0] = 1\n    for coin in coins:\n        for j in xrange(coin, amount + 1):\n            ways[j] += ways[j - coin]\n    return ways[amount]\n\nprint changes(100, [1, 5, 10, 25])\nprint changes(100000, [1, 5, 10, 25, 50, 100])","language":"python"},{"title":"HTTPS","code":"URL url = new URL(\"https://sourceforge.net\");\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\nScanner scanner = new Scanner(connection.getInputStream());\n\nwhile (scanner.hasNext()) {\n    System.out.println(scanner.next());\n}","language":"Java"},{"title":"HTTPS","code":"var lwp = require('LWP::UserAgent');    # LWP::Protocol::https is needed\nvar url = 'https://rosettacode.org';\n\nvar ua = lwp.new(\n    agent    => 'Mozilla/5.0',\n    ssl_opts => Hash.new(verify_hostname => 1),\n);\n\nvar resp = ua.get(url);\nresp.is_success || die \"Failed to GET #{url.dump}: #{resp.status_line}\";\nprint resp.decoded_content;","language":"ruby"},{"title":"Even or odd","code":"if (x & 1) {\n    /* x is odd */\n} else {\n    /* or not */\n}","language":"c"},{"title":"Even or odd","code":"mpz_t x;\n...\nif (mpz_even_p(x)) { /* x is even */ }\nif (mpz_odd_p(x))  { /* x is odd */ }","language":"c"},{"title":"Even or odd","code":"bool isOdd(int x) \n{\n    return x % 2;\n}\n\nbool isEven(int x)\n{\n    return !(x % 2);\n}","language":"cpp"},{"title":"Even or odd","code":"public static boolean isEven(int i){\n    return (i & 1) == 0;\n}","language":"java"},{"title":"Even or odd","code":"public static boolean isEven(int i){\n    return (i % 2) == 0;\n}","language":"java"},{"title":"Even or odd","code":"public static boolean isEven(BigInteger i){\n    return i.and(BigInteger.ONE).equals(BigInteger.ZERO);\n}","language":"java"},{"title":"Even or odd","code":"public static boolean isEven(BigInteger i){\n    return !i.testBit(0);\n}","language":"java"},{"title":"Even or odd","code":"public static boolean isEven(BigInteger i){\n    return i.mod(BigInteger.valueOf(2)).equals(BigInteger.ZERO);\n}","language":"java"},{"title":"Even or odd","code":"function isEven( i ) {\n  return (i & 1) === 0;\n}","language":"javascript"},{"title":"Even or odd","code":"function isEven( i ) {\n  return i % 2 === 0;\n}\n\n// Alternative\nfunction isEven( i ) {\n  return !(i % 2);\n}","language":"javascript"},{"title":"Even or odd","code":"-- test for even number\nif n % 2 == 0 then\n  print \"The number is even\"\nend\n\n-- test for odd number\nif not (n % 2 == 0) then\n  print \"The number is odd\"\nend","language":"lua"},{"title":"Even or odd","code":"print \"evens: \"\np -5.upto(5).select(&:even?)\nprint \"odds: \"\np -5.upto(5).select(&:odd?)","language":"ruby"},{"title":"Even or odd","code":"n & 1 == 0\nquotient, remainder = n.divmod(2); remainder == 0\n\n# The next way only works when n.to_f/2 is exact.\n# If Float is IEEE double, then -2**53 .. 2**53 must include n.\nn.to_f/2 == n/2\n\n# You can use the bracket operator to access the i'th bit\n# of a Fixnum or Bignum (i = 0 means least significant bit)\nn[0].zero?","language":"ruby"},{"title":"Even or odd","code":"var n = 42;\nsay n.is_odd;       # false\nsay n.is_even;      # true","language":"ruby"},{"title":"Langton's ant","code":"langtonant({}, {\n        gridsize: 100,\n        pixlsize: 4,\n        interval: 4\n});","language":"JavaScript"},{"title":"Parsing/RPN to infix conversion","code":"rpn = RPNExpression.new(\"3 4 2 * 1 5 - 2 3 ^ ^ / +\")\ninfix = rpn.to_infix\nruby = rpn.to_ruby","language":"ruby"},{"title":"Order two numerical lists","code":"int list_cmp(int *a, int la, int *b, int lb)\n{\n        int i, l = la;\n        if (l > lb) l = lb;\n        for (i = 0; i < l; i++) {\n                if (a[i] == b[i]) continue;\n                return (a[i] > b[i]) ? 1 : -1;\n        }\n        if (la == lb) return 0;\n        return la > lb ? 1 : -1;\n}","language":"c"},{"title":"Order two numerical lists","code":"function arraycompare(a, b)\n    for i = 1, #a do\n        if b[i] == nil then\n            return true\n        end\n        if a[i] ~= b[i] then\n            return a[i] < b[1]\n        end\n    end\n    return true\nend","language":"lua"},{"title":"Order two numerical lists","code":"def (a < b) :case (or list?.a list?.b)\n  if not.b\n       nil\n     not.a\n       b\n     (car.a = car.b)\n       (cdr.a < cdr.b)\n     :else\n       (car.a < car.b)","language":"python"},{"title":"SHA-1","code":"#!/usr/bin/lua\n\nlocal sha1 = require \"sha1\"\n\nfor i, str in ipairs{\"Rosetta code\", \"Rosetta Code\"} do\n  print(string.format(\"SHA-1(%q) = %s\", str, sha1(str)))\nend","language":"Lua"},{"title":"SHA-1","code":"import hashlib\nh = hashlib.sha1()\nh.update(bytes(\"Ars longa, vita brevis\", encoding=\"ASCII\"))\nh.hexdigest()\n# \"e640d285242886eb96ab80cbf858389b3df52f43\"","language":"python"},{"title":"Arithmetic-geometric mean","code":"function agm(a0, g0) {\n    var an = (a0 + g0) / 2,\n        gn = Math.sqrt(a0 * g0);\n    while (Math.abs(an - gn) > tolerance) {\n        an = (an + gn) / 2, gn = Math.sqrt(an * gn)\n    }\n    return an;\n}\n\nagm(1, 1 / Math.sqrt(2));","language":"JavaScript"},{"title":"Arithmetic-geometric mean","code":"function agm(a, b, tolerance)\n    if not tolerance or tolerance < 1e-15 then\n        tolerance = 1e-15\n    end\n    repeat\n        a, b = (a + b) / 2, math.sqrt(a * b)\n    until math.abs(a-b) < tolerance\n    return a\nend\n\nprint(string.format(\"%.15f\", agm(1, 1 / math.sqrt(2))))","language":"lua"},{"title":"Arithmetic-geometric mean","code":"from decimal import Decimal, getcontext\n\ndef agm(a, g, tolerance=Decimal(\"1e-65\")):\n    while True:\n        a, g = (a + g) / 2, (a * g).sqrt()\n        if abs(a - g) < tolerance:\n            return a\n\ngetcontext().prec = 70\nprint agm(Decimal(1), 1 / Decimal(2).sqrt())","language":"python"},{"title":"Arithmetic-geometric mean","code":"func agm(a, g) {\n    loop {\n        var (a1, g1) = ((a+g)/2, sqrt(a*g))\n        [a1,g1] == [a,g] && return a\n        (a, g) = (a1, g1)\n    }\n}\n\nsay agm(1, 1/sqrt(2))","language":"ruby"},{"title":"Fibonacci sequence","code":"long long fibb(long long a, long long b, int n) {\n    return (--n>0)?(fibb(b, a+b, n)):(a);\n}","language":"c"},{"title":"Fibonacci sequence","code":"long long int fibb(int n) {\n        int fnow = 0, fnext = 1, tempf;\n        while(--n>0){\n                tempf = fnow + fnext;\n                fnow = fnext;\n                fnext = tempf;\n                }\n                return fnext;        \n}","language":"c"},{"title":"Fibonacci sequence","code":"#include <tgmath.h>\n#define PHI ((1 + sqrt(5))/2)\n\nlong long unsigned fib(unsigned n) {\n    return floor( (pow(PHI, n) - pow(1 - PHI, n))/sqrt(5) );\n}","language":"c"},{"title":"Fibonacci sequence","code":"#include <numeric>\n#include <vector>\n#include <functional>\n#include <iostream>\n\nunsigned int fibonacci(unsigned int n) {\n  if (n == 0) return 0;\n  std::vector<int> v(n, 1);\n  adjacent_difference(v.begin(), v.end()-1, v.begin()+1, std::plus<int>());\n  // \"array\" now contains the Fibonacci sequence from 1 up\n  return v[n-1];\n}","language":"cpp"},{"title":"Fibonacci sequence","code":"public static ulong Fib(uint n) {\n    return (n < 2)? n : Fib(n - 1) + Fib(n - 2);\n}","language":"csharp"},{"title":"Fibonacci sequence","code":"public static ulong Fib(uint n) {\n    return Fib(0, 1, n);\n}\n\nprivate static ulong Fib(ulong a, ulong b, uint n) {\n    return (n < 1)? a :(n == 1)?  b : Fib(b, a + b, n - 1);\n}","language":"csharp"},{"title":"Fibonacci sequence","code":"public static IEnumerable<ulong> Fibs(uint x) {\n    ulong prev = -1;\n    ulong next = 1;\n    for (uint i = 0; i < x; i++) {\n        ulong sum = prev + next;\n        prev = next;\n        next = sum;\n        yield return sum;\n    }\n}","language":"csharp"},{"title":"Fibonacci sequence","code":"public static ulong Fib(uint n) {\n    var M = new Matrix(1,0,0,1);\n    var N = new Matrix(1,1,1,0);\n    for (uint i = 1; i < n; i++) M *= N;\n    return (ulong)M[0][0];\n}","language":"csharp"},{"title":"Fibonacci sequence","code":"public static long recFibN(final int n)\n{\n return (n < 2) ? n : recFibN(n - 1) + recFibN(n - 2);\n}","language":"java"},{"title":"Fibonacci sequence","code":"public static long anFibN(final long n)\n{\n double p = (1 + Math.sqrt(5)) / 2;\n double q = 1 / p;\n return (long) ((Math.pow(p, n) + Math.pow(q, n)) / Math.sqrt(5));\n}","language":"java"},{"title":"Fibonacci sequence","code":"public static long fibTailRec(final int n)\n{\n return fibInner(0, 1, n);\n}\n\nprivate static long fibInner(final long a, final long b, final int n)\n{\n return n < 1 ? a : n == 1 ?  b : fibInner(b, a + b, n - 1);\n}","language":"java"},{"title":"Fibonacci sequence","code":"function fib(n) {\n  return n<2?n:fib(n-1)+fib(n-2);\n}","language":"javascript"},{"title":"Fibonacci sequence","code":"function fib(n) {\n if (n<2) { return n; } else { return fib(n-1)+fib(n-2); }\n}","language":"javascript"},{"title":"Fibonacci sequence","code":"function fib(n) {\n  return function(n,a,b) {\n    return n>0 ? arguments.callee(n-1,b,a+b) : a;\n  }(n,0,1);\n}","language":"javascript"},{"title":"Fibonacci sequence","code":"function fib(n) {\n  var a = 0, b = 1, t;\n  while (n-- > 0) {\n    t = a;\n    a = b;\n    b += t;\n    console.log(a);\n  }\n  return a;\n}","language":"javascript"},{"title":"Fibonacci sequence","code":"var fib = (function(cache){\n    return cache = cache || {}, function(n){\n        if (cache[n]) return cache[n];\n        else return cache[n] = n == 0 ? 0 : n < 0 ? -fib(-n)\n            : n <= 2 ? 1 : fib(n-2) + fib(n-1);\n    };\n})();","language":"javascript"},{"title":"Fibonacci sequence","code":"function* fibonacciGenerator() {\n    var prev = 0;\n    var curr = 1;\n    while (true) {\n        yield curr;\n        curr = curr + prev;\n        prev = curr - prev;\n    }\n}\nvar fib = fibonacciGenerator();","language":"javascript"},{"title":"Fibonacci sequence","code":"#include <order/interpreter.h>\n\n#define ORDER_PP_DEF_8fib_rec                     \\\nORDER_PP_FN(8fn(8N,                               \\\n                8if(8less(8N, 2),                 \\\n                    8N,                           \\\n                    8add(8fib_rec(8sub(8N, 1)),   \\\n                         8fib_rec(8sub(8N, 2))))))\n\nORDER_PP(8fib_rec(10))","language":"c"},{"title":"Fibonacci sequence","code":"def fib(n,x=[0,1]):\n   for i in range(abs(n)-1): x=[x[1],sum(x)]\n   return x[1]*pow(-1,abs(n)-1) if n<0 else x[1] if n else 0\n\nfor i in range(-30,31): print fib(i),","language":"python"},{"title":"Fibonacci sequence","code":"from math import *\n\ndef analytic_fibonacci(n):\n  sqrt_5 = sqrt(5);\n  p = (1 + sqrt_5) / 2;\n  q = 1/p;\n  return int( (p**n + q**n) / sqrt_5 + 0.5 )\n\nfor i in range(1,31):\n  print analytic_fibonacci(i),","language":"python"},{"title":"Fibonacci sequence","code":"def fibIter(n):\n    if n < 2:\n        return n\n    fibPrev = 1\n    fib = 1\n    for num in xrange(2, n):\n        fibPrev, fib = fib, fib + fibPrev\n    return fib","language":"python"},{"title":"Fibonacci sequence","code":"def fibRec(n):\n    if n < 2:\n        return n\n    else:\n        return fibRec(n-1) + fibRec(n-2)","language":"python"},{"title":"Fibonacci sequence","code":"def fibMemo():\n    pad = {0:0, 1:1}\n    def func(n):\n        if n not in pad:\n            pad[n] = func(n-1) + func(n-2)\n        return pad[n]\n    return func\n\nfm = fibMemo()\nfor i in range(1,31):\n    print fm(i),","language":"python"},{"title":"Fibonacci sequence","code":"def fibFastRec(n):\n    def fib(prvprv, prv, c):\n        if c < 1: \n            return prvprv\n        else: \n            return fib(prv, prvprv + prv, c - 1) \n    return fib(0, 1, n)","language":"python"},{"title":"Fibonacci sequence","code":"def fibGen(n):\n    a, b = 0, 1\n    while n>0:\n        yield a\n        a, b, n = b, a+b, n-1","language":"python"},{"title":"Fibonacci sequence","code":"def fib(n, c={0:1, 1:1}):\n    if n not in c:\n        x = n // 2\n        c[n] = fib(x-1) * fib(n-x-1) + fib(x) * fib(n - x)\n    return c[n]\n\nfib(10000000)  # calculating it takes a few seconds, printing it takes eons","language":"python"},{"title":"Fibonacci sequence","code":"def fib():\n    \"\"\"Yield fib[n+1] + fib[n]\"\"\"\n    yield 1  # have to start somewhere\n    lhs, rhs = fib(), fib()\n    yield next(lhs) # move lhs one iteration ahead\n    while True:\n        yield next(lhs)+next(rhs)\n\nf=fib()\nprint [next(f) for _ in range(9)]","language":"python"},{"title":"Fibonacci sequence","code":"from itertools import islice\n\ndef fib():\n    yield 0\n    yield 1\n    a, b = fib(), fib()\n    next(b)\n    while True:\n        yield next(a)+next(b)\n \nprint(tuple(islice(fib(), 10)))","language":"Python"},{"title":"Fibonacci sequence","code":"def fib(n, sequence=[1])\n  n.times do\n    current_number, last_number = sequence.last(2)\n    sequence << current_number + (last_number or 0)\n  end\n\n  sequence.last\nend","language":"ruby"},{"title":"Fibonacci sequence","code":"def fib(n, sequence=[1])\n  return sequence.last if n == 0\n\n  current_number, last_number = sequence.last(2)\n  sequence << current_number + (last_number or 0)\n\n  fib(n-1, sequence)\nend","language":"ruby"},{"title":"Fibonacci sequence","code":"fib = Enumerator.new do |y|\n  f0, f1 = 0, 1\n  loop do\n    y <<  f0\n    f0, f1 = f1, f0 + f1\n  end\nend","language":"ruby"},{"title":"Fibonacci sequence","code":"fib = Fiber.new do\n  a,b = 0,1\n  loop do\n    Fiber.yield a\n    a,b = b,a+b\n  end\nend\n9.times {puts fib.resume}","language":"ruby"},{"title":"Fibonacci sequence","code":"def fib_gen\n    a, b = 1, 1\n    lambda {ret, a, b = a, b, a+b; ret}\nend","language":"ruby"},{"title":"Fibonacci sequence","code":"def fib\n    phi = (1 + Math.sqrt(5)) / 2\n    ((phi**self - (-1 / phi)**self) / Math.sqrt(5)).to_i\nend","language":"ruby"},{"title":"Fibonacci sequence","code":"func fib_iter(n) {\n    var (a, b) = (0, 1)\n    { (a, b) = (b, a+b) } * n\n    return a\n}","language":"ruby"},{"title":"Fibonacci sequence","code":"func fib_closed(n) {\n    define S = (1.25.sqrt + 0.5)\n    define T = (-S + 1)\n    (S**n - T**n) / (-T + S) -> round\n}","language":"ruby"},{"title":"Fibonacci sequence","code":"// Assuming code is in Integer.fibonacci() method\n() Integer\n  [\n  if this < 2 [this] else [[this - 1].fibonacci + [this - 2].fibonacci]\n  ]","language":"javascript"},{"title":"Fibonacci sequence","code":"// Assuming in fibonacci(n) procedure\n(Integer n) Integer\n  [\n  if n < 2 [n] else [fibonacci(n - 1) + fibonacci(n - 2)]\n  ]","language":"javascript"},{"title":"Fibonacci sequence","code":"def (fib n)\n  if (n < 2)\n    n\n    (+ (fib n-1) (fib n-2))","language":"python"},{"title":"Fibonacci sequence","code":"def (fib n)\n  (+ (fib n-1) (fib n-2))\n\ndef (fib n) :case (n < 2)\n  n","language":"python"},{"title":"Fibonacci sequence","code":"def (fib n saved)\n  # all args in Wart are optional, and we expect callers to not provide `saved`\n  default saved :to (table 0 0 1 1)  # pre-populate base cases\n  default saved.n :to\n    (+ (fib n-1 saved) (fib n-2 saved))\n  saved.n","language":"python"},{"title":"Modular exponentiation","code":"a = 2988348162058574136915891421498819466320163312926952423791023078876139\nb = 2351399303373464486466122544523690094744975233415544072992656881240319\nm = 10 ** 40\nprint(pow(a, b, m))","language":"python"},{"title":"Modular exponentiation","code":"require 'openssl'\n\na = 2988348162058574136915891421498819466320163312926952423791023078876139\nb = 2351399303373464486466122544523690094744975233415544072992656881240319\nm = 10 ** 40\nputs a.to_bn.mod_exp(b, m)","language":"ruby"},{"title":"Modular exponentiation","code":"say expmod(\n    2988348162058574136915891421498819466320163312926952423791023078876139,\n    2351399303373464486466122544523690094744975233415544072992656881240319,\n    10**40)","language":"ruby"},{"title":"Modular exponentiation","code":"func expmod(a, b, n) {\n    var c = 1\n    do {\n        (c *= a) %= n if b.is_odd\n        (a *= a) %= n\n    } while (b //= 2)\n    c\n}","language":"ruby"},{"title":"Empty directory","code":"function isemptydir(directory,nospecial)\n        for filename in require('lfs').dir(directory) do\n                if filename ~= '.' and filename ~= '..' then\n                        return false\n                end\n        end\n        return true\nend","language":"lua"},{"title":"Empty directory","code":"import os;\nif os.listdir(raw_input(\"directory\")):\n    print \"not empty\"\nelse:\n    print \"empty\"","language":"python"},{"title":"Empty directory","code":"func is_empty(dir) {\n    dir.open(\\var dir_h) || return nil;\n    dir_h.each { |file|\n        file ~~ ['.', '..'] && next;\n        return false;\n    };\n    return true;\n};","language":"ruby"},{"title":"Identity matrix","code":"function idMatrix(n) {\n    return Array.apply(null, new Array(n))\n        .map(function (x, i, xs) {\n            return xs.map(function (_, k) {\n                return i === k ? 1 : 0;\n            })\n        });\n}","language":"Javascript"},{"title":"Identity matrix","code":"def identity(size)\n  Array.new(size){|i| Array.new(size){|j| i==j ? 1 : 0}}\nend\n\n[4,5,6].each do |size|\n  puts size, identity(size).map {|r| r.to_s}, \"\"\nend","language":"ruby"},{"title":"Set consolidation","code":"def consolidate(sets):\n    setlist = [s for s in sets if s]\n    for i, s1 in enumerate(setlist):\n        if s1:\n            for s2 in setlist[i+1:]:\n                intersection = s1.intersection(s2)\n                if intersection:\n                    s2.update(s1)\n                    s1.clear()\n                    s1 = s2\n    return [s for s in setlist if s]","language":"python"},{"title":"Set consolidation","code":"def conso(s):\n        if len(s) < 2: return s\n \n        r, b = [s[0]], conso(s[1:])\n        for x in b:\n                if r[0].intersection(x): r[0].update(x)\n                else: r.append(x)\n        return r","language":"python"},{"title":"Trabb Pardo–Knuth algorithm","code":"local a, y = {}\nfunction f (t)\n    return math.sqrt(math.abs(t)) + 5*t^3\nend\nfor i = 0, 10 do a[i] = io.read() end\nfor i = 10, 0, -1 do\n    y = f(a[i])\n    if y > 400 then print(i, \"TOO LARGE\")\n               else print(i, y) end\nend","language":"Lua"},{"title":"Trabb Pardo–Knuth algorithm","code":"def f(x) x.abs ** 0.5 + 5 * x ** 3 end\n\nputs \"Please enter 11 numbers:\"\nnums = 11.times.map{ gets.to_f }\n\nnums.reverse_each do |n|\n  print \"f(#{n}) = \"\n  res = f(n)\n  puts res > 400 ? \"Overflow!\" : res\nend","language":"ruby"},{"title":"Trabb Pardo–Knuth algorithm","code":"var nums; do {\n    nums = Sys.readln(\"Please type 11 space-separated numbers: \").nums\n} while(nums.len != 11)\n\nnums.reverse.each { |n|\n    var r = (n.abs.sqrt + (5 * n**3));\n    say \"#{n}\\t#{ r > 400 ? 'Urk!' : r }\";\n}","language":"ruby"},{"title":"Floyd's triangle","code":"def floyd(rowcount=5):\n    return [list(range(i*(i-1)//2+1, i*(i+1)//2+1))\n            for i in range(1, rowcount+1)]","language":"python"},{"title":"Floyd's triangle","code":"def floyd(rows)\n  max = (rows * (rows + 1)) / 2\n  widths = ((max - rows + 1)..max).map {|n| n.to_s.length + 1}\n  n = 0\n  rows.times do |r|\n    puts (0..r).map {|i| n += 1; \"%#{widths[i]}d\" % n}.join\n  end\nend\n\nfloyd(5)\nfloyd(14)","language":"ruby"},{"title":"Sum digits of an integer","code":"def sumDigits(num, base=10):\n    return sum([int(x, base) for x in list(str(num))])\n\nprint sumDigits(1)\nprint sumDigits(12345)\nprint sumDigits(123045)\nprint sumDigits('fe', 16)\nprint sumDigits(\"f0e\", 16)","language":"python"},{"title":"Sum digits of an integer","code":"def sumDigits(num, base = 10)\n  num.digits(base).sum\nend","language":"ruby"},{"title":"Dutch national flag problem","code":"from itertools import chain\ndef dutch_flag_sort2(items, order=colours_in_order):\n    'return summed filter of items using the given order'\n    return list(chain.from_iterable(filter(lambda c: c==colour, items)\n                                    for colour in order))","language":"python"},{"title":"Dutch national flag problem","code":"def dutch_flag_sort2(items, order=colours_in_order):\n    'return summed filter of items using the given order'\n    return [c for colour in order for c in items if c==colour]","language":"python"},{"title":"Dutch national flag problem","code":"def dutch_flag_sort3(items, order=colours_in_order):\n    'counts each colour to construct flag'\n    return sum([[colour] * items.count(colour) for colour in order], [])","language":"python"},{"title":"Semordnilap","code":"dict = File.readlines(\"unixdict.txt\").collect(&:strip)\ni = 0\nres = dict.collect(&:reverse).sort.select do |z| \n  i += 1  while z > dict[i] and i < dict.length-1\n  z == dict[i] and z < z.reverse\nend\nputs \"There are #{res.length} semordnilaps, of which the following are 5:\"\nres.take(5).each {|z| puts \"#{z}   #{z.reverse}\"}","language":"Ruby"},{"title":"Semordnilap","code":"words = File.readlines(\"unixdict.txt\")\n            .group_by{|x| [x.strip!, x.reverse].min}\n            .values\n            .select{|v| v.size==2}\nputs \"There are #{words.size} semordnilaps, of which the following are 5:\"\nwords.take(5).each {|a,b| puts \"#{a}   #{b}\"}","language":"Ruby"},{"title":"Semordnilap","code":"var c = 0\nvar seen = Hash()\n\nARGF.each { |line|\n    line.chomp!\n    var r = line.reverse\n    ((seen{r} := 0 ++) && (c++ < 5) && say \"#{line} #{r}\") ->\n        || (seen{line} := 0 ++)\n}\n\nsay c","language":"ruby"},{"title":"Zeckendorf number representation","code":"def zeckendorf\n  return to_enum(__method__) unless block_given?\n  x = 0\n  loop do\n    bin = x.to_s(2)\n    yield bin unless bin.include?(\"11\") \n    x += 1\n  end\nend\n\nzeckendorf.take(21).each_with_index{|x,i| puts \"%3d: %8s\"% [i, x]}","language":"ruby"},{"title":"99 Bottles of Beer","code":"fun bottles(n): \n    | 0 -> \"No more bottles\"\n    | 1 -> \"1 bottle\"\n    | _ -> \"$n bottles\"\n    \nfor n in [100:1]:\n    print \"\"\"\n    $(bottles n) of beer on the wall\n    $(bottles n) of beer\n    Take one down, pass it around\n    $(bottles n-1) of beer on the wall\\n\n    \"\"\"","language":"python"},{"title":"99 Bottles of Beer","code":"#include <stdio.h>\nmain(){_=100;while(--_)printf(\"%i bottle%s of beer in the wall,\\n%i bottle%\"\n\"s of beer.\\nTake one down, pass it round,\\n%s%s\\n\\n\",_,_-1?\"s\":\"\",_,_-1?\"s\"\n:\"\",_-1?(char[]){(_-1)/10?(_-1)/10+48:(_-1)%10+48,(_-1)/10?(_-1)%10+48:2+30,\n(_-1)/10?32:0,0}:\"\",_-1?\"bottles of beer in the wall\":\"No more beers\");}","language":"c"},{"title":"99 Bottles of Beer","code":"#include <iostream>\nusing std::cout;\n\nint main() \n{\n  for(int bottles(99); bottles > 0; bottles -= 1){\n    cout << bottles << \" bottles of beer on the wall\\n\"\n         << bottles << \" bottles of beer\\n\"\n         << \"Take one down, pass it around\\n\"\n         << bottles - 1 << \" bottles of beer on the wall\\n\\n\";\n  }\n}","language":"cpp"},{"title":"99 Bottles of Beer","code":"public static void BottlesSong(int numberOfBottles)\n{\n    if (numberOfBottles > 0)\n    {\n        Console.WriteLine(\"{0} bottles of beer on the wall\", numberOfBottles);\n        Console.WriteLine(\"{0} bottles of beer \", numberOfBottles);\n        Console.WriteLine(\"Take one down, pass it around\");\n        Console.WriteLine(\"{0} bottles of beer \", numberOfBottles - 1);\n        Console.WriteLine();\n        BottlesSong(--numberOfBottles);\n    }\n}","language":"csharp"},{"title":"99 Bottles of Beer","code":"let beer = 99;\nwhile (beer > 0) {\n  let verse = `${beer} bottles of beer on the wall,\n  ${beer} bottles of beer!\n  Take one down, pass it around\n  ${beer-1} bottles of beer on the wall`;\n\n  console.log(verse);\n  beer--;\n}","language":"javascript"},{"title":"99 Bottles of Beer","code":"verse = [[%i bottle%s of beer on the wall\n%i bottle%s of beer\nTake one down, pass it around\n%i bottle%s of beer on the wall\n]]\nfunction suffix(i) return i ~= 1 and 's' or '' end\n\nfor i = 99, 1, -1 do\n    print(verse:format(i, suffix(i), i, suffix(i), i-1, suffix(i-1)))\nend","language":"lua"},{"title":"99 Bottles of Beer","code":"for i in (100 ^.. 0) {\n    var bottles = \"#{i == 0 ? 'No' : i} bottle#{i == 1 ? '' : 's'}\"\n    var sentence = \"#{bottles} of beer on the wall\" -> say\n    if (i > 0) {\n        say sentence.substr(0, bottles.length + 8)\n        say \"Take one down, pass it around\\n\"\n    }\n}","language":"ruby"},{"title":"99 Bottles of Beer","code":"!bottles: (Integer num) [num.String += if num=1 [\" bottle\"] else [\" bottles\"]]\n99.to 1\n  [\n  print(\n    bottles(idx) \" of beer on the wall\\n\"\n    bottles(idx) \" of beer\\n\"\n    \"Take one down, pass it around\\n\"\n    bottles(idx-1) \" of beer on the wall\\n\")\n  ]","language":"javascript"},{"title":"99 Bottles of Beer","code":"var beer = 99;\nwhile (beer > 0)\n{\n stdout.printf( \"%d bottles of beer on the wall\\n\", beer);\n stdout.printf( \"%d bottles of beer\\n\", beer);\n stdout.println( \"Take one down, pass it around\" );\n stdout.printf( \"%d bottles of beer on the wall\\n\", --beer );\n}","language":"javascript"},{"title":"Terminal control/Coloured text","code":"static void Main(string[] args)\n{\n    Console.ForegroundColor = ConsoleColor.Red;\n    Console.BackgroundColor = ConsoleColor.Yellow;\n    Console.WriteLine(\"Red on Yellow\");\n    Console.ForegroundColor = ConsoleColor.White;\n    Console.BackgroundColor = ConsoleColor.Black;\n    Console.WriteLine(\"White on black\");\n    Console.ResetColor();\n    Console.WriteLine(\"Back to normal\");\n    Console.ReadKey();\n}","language":"csharp"},{"title":"Terminal control/Coloured text","code":"from colorama import init, Fore, Back, Style\ninit(autoreset=True)\n\nprint Fore.RED + \"FATAL ERROR! Cannot write to /boot/vmlinuz-3.2.0-33-generic\"\nprint Back.BLUE + Fore.YELLOW + \"What a cute console!\"\nprint \"This is an %simportant%s word\" % (Style.BRIGHT, Style.NORMAL)\nprint Fore.YELLOW  + \"Rosetta Code!\"\nprint Fore.CYAN    + \"Rosetta Code!\"\nprint Fore.GREEN   + \"Rosetta Code!\"\nprint Fore.MAGENTA + \"Rosetta Code!\"\nprint Back.YELLOW + Fore.BLUE + Style.BRIGHT + \" \" * 40 + \" == Good Bye!\"","language":"python"},{"title":"Terminal control/Coloured text","code":"var a = frequire('Term::ANSIColor');\n\nsay a.colored('RED ON WHITE', 'bold red on_white');\nsay a.colored('GREEN', 'bold green');\nsay a.colored('BLUE ON YELLOW', 'bold blue on_yellow');\nsay a.colored('MAGENTA', 'bold magenta');\nsay a.colored('CYAN ON RED', 'bold cyan on_red');\nsay a.colored('YELLOW', 'bold yellow');","language":"ruby"},{"title":"Write language name in 3D ASCII","code":"#include <stdio.h>\nconst char*s = \"  _____\\n /____/\\\\\\n/  ___\\\\/\\n\\\\  \\\\/__/\\n \\\\____/\";\nint main(){ puts(s); return 0; }","language":"c"},{"title":"Multifactorial","code":"function multifact(n, deg){\n        var result = n;\n        while (n >= deg + 1){\n                result *= (n - deg);\n                n -= deg;\n        }\n        return result;\n}","language":"JavaScript"},{"title":"Multifactorial","code":"function test (n, deg) {\n        for (var i = 1; i <= deg; i ++) {\n                var results = '';\n                for (var j = 1; j <= n; j ++) {\n                        results += multifact(j, i) + ' ';\n                }\n                console.log('Degree ' + i + ': ' + results);\n        }\n}","language":"JavaScript"},{"title":"Multifactorial","code":"test(10, 5)\nDegree 1: 1 2 6 24 120 720 5040 40320 362880 3628800 \nDegree 2: 1 2 3 8 15 48 105 384 945 3840 \nDegree 3: 1 2 3 4 10 18 28 80 162 280 \nDegree 4: 1 2 3 4 5 12 21 32 45 120 \nDegree 5: 1 2 3 4 5 6 14 24 36 50","language":"JavaScript"},{"title":"Multifactorial","code":"function multifact(n, deg){\n    return n <= deg ? n : n * multifact(n - deg, deg);\n}","language":"JavaScript"},{"title":"Multifactorial","code":"function test (n, deg) {\n    for (var i = 1; i <= deg; i ++) {\n        var results = '';\n        for (var j = 1; j <= n; j ++) {\n            results += multifact(j, i) + ' ';\n        }\n        console.log('Degree ' + i + ': ' + results);\n    }\n}","language":"JavaScript"},{"title":"Multifactorial","code":"test(10, 5)\nDegree 1: 1 2 6 24 120 720 5040 40320 362880 3628800 \nDegree 2: 1 2 3 8 15 48 105 384 945 3840 \nDegree 3: 1 2 3 4 10 18 28 80 162 280 \nDegree 4: 1 2 3 4 5 12 21 32 45 120 \nDegree 5: 1 2 3 4 5 6 14 24 36 50","language":"JavaScript"},{"title":"SHA-256","code":"#!/usr/bin/lua\n\nrequire \"sha2\"\n\nprint(sha2.sha256hex(\"Rosetta code\"))","language":"Lua"},{"title":"Jump anywhere","code":"if (x > 0) goto positive;\n        else goto negative;\n\npositive:\n        printf(\"pos\\n\"); goto both;\n\nnegative:\n        printf(\"neg\\n\");\n\nboth:\n        ...","language":"c"},{"title":"Jump anywhere","code":"for (i = 0; ...) {\n        for (j = 0; ...) {\n                if (condition_met) goto finish;\n        }\n}","language":"c"},{"title":"Jump anywhere","code":"goto danger;\n        for (i = 0; i < 10; i++) {\ndanger: /* unless you jumped here with i set to a proper value */\n                printf(\"%d\\n\", i);\n        }","language":"c"},{"title":"Jump anywhere","code":"if (x > 0) goto positive;\n    else goto negative;\n\npositive:\n    Console.WriteLine(\"pos\\n\"); goto both;\n\nnegative:\n    Console.WriteLine(\"neg\\n\");\n\nboth:\n    ...","language":"csharp"},{"title":"Jump anywhere","code":"for (i = 0; ...) {\n    for (j = 0; ...) {\n        if (condition_met) goto finish;\n    }\n}","language":"csharp"},{"title":"Jump anywhere","code":"goto danger;\nfor (i = 0; i < 10; i++) {\n    danger: /* unless you jumped here with i set to a proper value */\n    Console.WriteLine(\"{0}\", i);\n}","language":"csharp"},{"title":"Last Friday of each month","code":"import calendar\n\ndef last_fridays(year):\n    for month in range(1, 13):\n        last_friday = max(week[calendar.FRIDAY]\n            for week in calendar.monthcalendar(year, month))\n        print('{:4d}-{:02d}-{:02d}'.format(year, month, last_friday))","language":"python"},{"title":"Last Friday of each month","code":"require 'date'\n\ndef last_friday(year, month)\n  d = Date.new(year, month, -1)\n  d = d.prev_day until d.friday?\n  d\nend","language":"ruby"},{"title":"Generator/Exponential","code":"// Generate the first 10 values\nfor (let n = 0; n < 10; n++) {\n  console.log(filtered.next().value)\n}","language":"JavaScript"},{"title":"CRC-32","code":"#include <stdio.h>\n#include <string.h>\n#include <zlib.h>\n \nint main()\n{\n        const char *s = \"The quick brown fox jumps over the lazy dog\";\n        printf(\"%lX\\n\", crc32(0, (const void*)s, strlen(s)));\n\n        return 0;\n}","language":"c"},{"title":"CRC-32","code":"require 'zlib'\nprintf \"0x%08x\\n\", Zlib.crc32('The quick brown fox jumps over the lazy dog')\n# => 0x414fa339","language":"ruby"},{"title":"Remove lines from a file","code":"func remove_lines(file, beg, len) {\n    var lines = file.open_r.lines;\n    lines.splice(beg, len).len == len || warn \"Too few lines\";\n    file.open_w.print(lines.join)\n}\n\nremove_lines(File(__FILE__), 2, 3);","language":"ruby"},{"title":"RIPEMD-160","code":"#!/usr/bin/lua\n\nrequire \"crypto\"\n\nprint(crypto.digest(\"ripemd160\", \"Rosetta Code\"))","language":"Lua"},{"title":"Modular inverse","code":"#include <iostream>\n\nshort ObtainMultiplicativeInverse(int a, int b, int s0 = 1, int s1 = 0)\n{\n    return b==0? s0: ObtainMultiplicativeInverse(b, a%b, s1, s0 - s1*(a/b));\n}\n\nint main(int argc, char* argv[])\n{\n    std::cout << ObtainMultiplicativeInverse(42, 2017) << std::endl;\n    return 0;\n}","language":"cpp"},{"title":"Modular inverse","code":"var modInverse = function(a, b) {\n    a %= b;\n    for (var x = 1; x < b; x++) {\n        if ((a*x)%b == 1) {\n            return x;\n        }\n    }\n}","language":"javascript"},{"title":"Middle three digits","code":"function middleThree(x){\n  var n=''+Math.abs(x); var l=n.length-1;\n  if(l<2||l%2) throw new Error(x+': Invalid length '+(l+1));\n  return n.slice(l/2-1,l/2+2);\n}\n\n[123, 12345, 1234567, 987654321, 10001, -10001, -123, -100, 100, -12345,\n1, 2, -1, -10, 2002, -2002, 0].forEach(function(n){\n  try{console.log(n,middleThree(n))}catch(e){console.error(e.message)}\n});","language":"JavaScript"},{"title":"Universal Turing machine","code":"incrementer_rules = {\n    :q0 => { 1  => [1, :right, :q0],\n             :b => [1, :stay,  :qf]}\n}\nt = Turing.new([:b, 1],           # permitted symbols\n               :b,                # blank symbol\n               :q0,               # starting state\n               [:qf],             # terminating states\n               [:q0],             # running states\n               incrementer_rules, # operating rules\n               [1, 1, 1])         # starting tape\nprint t.run, \"\\n\"","language":"ruby"},{"title":"Continued fraction/Arithmetic/Construct from rational number","code":"# Generate a continued fraction from a rational number\n\ndef r2cf(n1,n2)\n  while n2 > 0\n    n1, (t1, n2) = n2, n1.divmod(n2)\n    yield t1\n  end\nend","language":"ruby"},{"title":"Continued fraction/Arithmetic/Construct from rational number","code":"[[1,2], [3,1], [23,8], [13,11], [22,7], [-151,77]].each do |n1,n2|\n  print \"%10s : \" % \"#{n1} / #{n2}\"\n  r2cf(n1,n2) {|n| print \"#{n} \"}\n  puts\nend","language":"ruby"},{"title":"Continued fraction/Arithmetic/Construct from rational number","code":"(5..8).each do |digit|\n  n2 = 10 ** (digit-1)\n  n1 = (Math.sqrt(2) * n2).round\n  print \"%-8s / %-8s : \" % [n1, n2]\n  r2cf(n1,n2) {|n| print \"#{n} \"}\n  puts\nend","language":"ruby"},{"title":"Function prototype","code":"using System;\nabstract class Printer\n{\n    public abstract void Print();\n}\n\nclass PrinterImpl : Printer\n{\n    public override void Print() {\n        Console.WriteLine(\"Hello world!\");\n    }\n}","language":"csharp"},{"title":"Function prototype","code":"/*\nGP;install(\"foo\",\"LGG\",\"bar\",\"./filename.gp.so\");\n*/","language":"c"},{"title":"Function prototype","code":"/*\nGP;install(\"foo\",\"LDGDG\",\"bar\",\"./filename.gp.so\");\n*/","language":"c"},{"title":"Function prototype","code":"/*\nGP;install(\"foo\",\"s*\",\"bar\",\"./filename.gp.so\");\n*/","language":"c"},{"title":"Call a function","code":"int myMethod(int a, double b){\n    // return result of doing sums with a and b\n}\n\nint myMethod(int a){\n    return f(a, 1.414);\n}","language":"java"},{"title":"Call a function","code":"void printAll(String... strings){\n    for ( String s : strings )\n        System.out.println( s );\n}","language":"java"},{"title":"Call a function","code":"int myMethod( Map<String,Object> params ){\n    return\n       ((Integer)params.get(\"x\")).intValue()\n       + ((Integer)params.get(\"y\")).intValue();\n}","language":"java"},{"title":"Call a function","code":"var foo = function() { return arguments.length };\nfoo() // 0\nfoo(1, 2, 3) // 3","language":"JavaScript"},{"title":"Call a function","code":"var make_adder = function(m) {\n    return function(n) { return m + n }\n};\nvar add42 = make_adder(42);\nadd42(10) // 52","language":"JavaScript"},{"title":"Call a function","code":"foo.toString()\n\"function () { return arguments.length }\"\nalert.toString()\n\"function alert() { [native code] }\"","language":"JavaScript"},{"title":"Call a function","code":"var mutate = function(victim) {\n    victim[0] = null;\n    victim = 42;\n};\nvar foo = [1, 2, 3];\nmutate(foo) // foo is now [null, 2, 3], not 42","language":"JavaScript"},{"title":"Call a function","code":"def foo() p \"foo\" end\n\nfoo                             #=> \"foo\"\nfoo()                           #=> \"foo\"","language":"ruby"},{"title":"Call a function","code":"def foo arg; p arg end          # one argument\n\nfoo(1)                          #=> 1\nfoo \"1\"                         #=> \"1\"\nfoo [0,1,2]                     #=> [0, 1, 2]   (one Array)","language":"ruby"},{"title":"Call a function","code":"def foo(x=0, y=x, flag=true) p [x,y,flag] end\n\nfoo                             #=> [0, 0, true]\nfoo(1)                          #=> [1, 1, true]\nfoo(1,2)                        #=> [1, 2, true]\nfoo 1,2,false                   #=> [1, 2, false]","language":"ruby"},{"title":"Call a function","code":"def foo(*args) p args end\n\nfoo                             #=> []\nfoo(1,2,3,4,5)                  #=> [1, 2, 3, 4, 5]","language":"ruby"},{"title":"Call a function","code":"def foo(id:0, name:\"\", age:0) p [id, name, age] end\n\nfoo(age:22, name:\"Tom\")         #=> [0, \"Tom\", 22]","language":"ruby"},{"title":"Call a function","code":"def foo(a,b) a + b end\n\nbar = foo 10,20\np bar                           #=> 30\np foo(\"abc\",\"def\")              #=> \"abcdef\"\n\n# return multiple values\ndef sum_and_product(a,b) return a+b,a*b end\n\nx,y = sum_and_product(3,5)\np x                             #=> 8\np y                             #=> 15","language":"ruby"},{"title":"Call a function","code":"puts \"OK!\"                      # Kernel#puts\nraise \"Error input\"             # Kernel#raise\nInteger(\"123\")                  # Kernel#Integer\nrand(6)                         # Kernel#rand\nthrow(:exit)                    # Kernel#throw\n\n# method which can be seen like a reserved word.\nattr_accessor                   # Module#attr_accessor\ninclude                         # Module#include\nprivate                         # Module#private\nrequire                         # Kernel#require\nloop { }                        # Kernel#loop","language":"ruby"},{"title":"Call a function","code":"def foo(a,b,c) p [a,b,c] end\n\nargs = [1,2,3]\nfoo *args                       #=> [1, 2, 3]\nargs = [1,2]\nfoo(0,*args)                    #=> [0, 1, 2]","language":"ruby"},{"title":"Call a function","code":"foo();                       # without arguments\nfoo(1, 2);                   # with two arguments\nfoo(args...);                # with a variable number of arguments\nfoo(name: 'Bar', age: 42);   # with named arguments\n\nvar f = foo;                 # store the function foo inside 'f'\nvar result = f();            # obtain the return value of a function\n\nvar arr = [1,2,3];\nfoo(arr);                    # the arguments are passed by object-reference","language":"ruby"},{"title":"Call a function","code":"func curry(f, *args1) {\n    func (*args2) {\n        f(args1..., args2...);\n    }\n}\n\nfunc add(a, b) {\n    a + b\n}\n\nvar adder = curry(add, 1);\nsay adder(3);                 #=>4","language":"ruby"},{"title":"Call an object method","code":"// Static\nMyClass.method(someParameter);\n\n// Instance\nmyInstance.method(someParameter);","language":"Java"},{"title":"Call an object method","code":"// Static\nMyClass::method(someParameter);\n\n// Instance\nmyInstance.method(someParameter);","language":"cpp"},{"title":"Call an object method","code":"// Static\nMyClass.Method(someParameter);\n \n// Instance\nmyInstance.Method(someParameter);","language":"csharp"},{"title":"Call an object method","code":"ClassWithMethod varName = new ClassWithMethod();\nvarName.methodName(argument1, argument2);\n//or\nnew ClassWithMethod().methodName(argument1, argument2);","language":"java"},{"title":"Call an object method","code":"local object = { name = \"foo\", func = function (self) print(self.name) end }\n\nobject:func() -- with : sugar\nobject.func(object) -- without : sugar","language":"lua"},{"title":"Call an object method","code":"local box = require 'box'\n\nlocal b = box.new()\n\nprint(b:tellSecret())\nprint(box.count())","language":"lua"},{"title":"Josephus problem","code":"n = (ARGV[0] || 41).to_i\nk = (ARGV[1] || 3).to_i\n\nprisoners = (0...n).to_a\nprisoners.rotate!(k-1).shift  while prisoners.length > 1\nputs prisoners.first","language":"Ruby"},{"title":"Josephus problem","code":"func josephus(n, k) {\n    var prisoners = @^n\n    while (prisoners.len > 1) {\n        prisoners.rotate!(k - 1).shift\n    }\n    return prisoners[0]\n}","language":"ruby"},{"title":"Josephus problem","code":"func josephus(n, k) {\n    n == 1 ? 0 : ((__FUNC__(n-1, k) + k) % n)\n};","language":"ruby"},{"title":"Send an unknown method call","code":"example = new Object;\nexample.foo = function(x) {\n    return 42 + x;\n};\n\nname = \"foo\";\nexample[name](5)      # => 47","language":"javascript"},{"title":"Send an unknown method call","code":"local example = { }\nfunction example:foo (x) return 42 + x end\n\nlocal name = \"foo\"\nexample[name](example, 5) --> 47","language":"lua"},{"title":"Send an unknown method call","code":"class Example(object):\n     def foo(self, x):\n             return 42 + x\n\nname = \"foo\"\ngetattr(Example(), name)(5)      # => 47","language":"python"},{"title":"Send an unknown method call","code":"class Example\n  private\n  def privacy; \"secret\"; end\n  public\n  def publicity; \"hi\"; end\nend\n\ne = Example.new\ne.public_send :publicity  # => \"hi\"\ne.public_send :privacy    # raises NoMethodError\ne.send :privacy           # => \"secret\"","language":"ruby"},{"title":"Send an unknown method call","code":"class Example {\n    method foo(x) {\n        42 + x\n    }\n}\n\nvar name = 'foo'\nvar obj = Example()\n\nsay obj.(name)(5)          # prints: 47\nsay obj.method(name)(5)    # =//=","language":"ruby"},{"title":"Temperature conversion","code":"TempConvert.kelvin_to_celsius 100 #=> -173.15\nTempConvert.kelvin_to_fahrenheit 100 #=> -279.67\nTempConvert.kelvin_to_rankine 100 #=> 180.0\nTempConvert.kelvin_to_delisle 100 #=> 409.73\nTempConvert.kelvin_to_newton 100 #=> -57.14\nTempConvert.kelvin_to_reaumur 100 #=> -138.52\nTempConvert.kelvin_to_roemer 100 #=> -83.4\n\nTempConvert.newton_to_celsius 100 #=> 303.03\nTempConvert.newton_to_fahrenheit 100 #=> 577.45\n# All 64 combinations possible","language":"ruby"},{"title":"Entropy","code":"def entropy(s)\n  counts = Hash.new(0.0)\n  s.each_char { |c| counts[c] += 1 }\n  leng = s.length\n  \n  counts.values.reduce(0) do |entropy, count|\n    freq = count / leng\n    entropy - freq * Math.log2(freq)\n  end\nend\n\np entropy(\"1223334444\")","language":"ruby"},{"title":"MD4","code":"#!/usr/bin/lua\n\nrequire \"crypto\"\n\nprint(crypto.digest(\"MD4\", \"Rosetta Code\"))","language":"Lua"},{"title":"Topic variable","code":"while DATA.gets     # assigns to $_ (local scope)\n  print             # If no arguments are given, prints $_\nend\n__END__\nThis is line one\nThis is line two\nThis is line three","language":"ruby"},{"title":"Topic variable","code":"DATA.gets\np [$_.to_i ** 2, Math.sqrt($_.to_i)]        #=> [9, 1.7320508075688772]\n__END__\n3","language":"ruby"},{"title":"Scope/Function names and labels","code":"def welcome(name)\n   puts \"hello #{name}\"\nend\nputs \"What is your name?\"\n$name = STDIN.gets\nwelcome($name)\nreturn","language":"ruby"},{"title":"Scope/Function names and labels","code":"# Nested functions\nfunc outer {\n    func inner {};   # not visible outside\n}\n\n# Nested classes\nclass Outer {\n    class Inner {};  # not visisble outside\n}","language":"ruby"},{"title":"Word wrap","code":"function wrap (text, limit) {\n  if (text.length > limit) {\n    // find the last space within limit\n    var edge = text.slice(0, limit).lastIndexOf(' ');\n    if (edge > 0) {\n      var line = text.slice(0, edge);\n      var remainder = text.slice(edge + 1);\n      return line + '\\n' + wrap(remainder, limit);\n    }\n  }\n  return text;\n}","language":"javascript"},{"title":"Harshad or Niven series","code":"harshad = 1.step.lazy.select { |n| n % n.digits.sum == 0 }\n\np harshad.first(20)\np harshad.find { |n| n > 1000 }","language":"Ruby"},{"title":"Largest int from concatenated ints","code":"from fractions import Fraction\nfrom math import log10\n\ndef maxnum(x):\n    return ''.join(str(n) for n in sorted(x, reverse=True,\n                          key=lambda i: Fraction(i, 10**(int(log10(i))+1)-1)))\n\nfor numbers in [(1, 34, 3, 98, 9, 76, 45, 4), (54, 546, 548, 60)]:\n    print('Numbers: %r\\n  Largest integer: %15s' % (numbers, maxnum(numbers)))","language":"python"},{"title":"Largest int from concatenated ints","code":"from itertools import permutations\ndef maxnum(x):\n    return max(int(''.join(n) for n in permutations(str(i) for i in x)))\n\nfor numbers in [(1, 34, 3, 98, 9, 76, 45, 4), (54, 546, 548, 60)]:\n    print('Numbers: %r\\n  Largest integer: %15s' % (numbers, maxnum(numbers)))","language":"python"},{"title":"Largest int from concatenated ints","code":"def icsort nums\n  nums.sort { |x, y| \"#{y}#{x}\" <=> \"#{x}#{y}\" }\nend\n\n[[54, 546, 548, 60], [1, 34, 3, 98, 9, 76, 45, 4]].each do |c|\n  p c # prints nicer in Ruby 1.8\n  puts icsort(c).join\nend","language":"Ruby"},{"title":"Largest int from concatenated ints","code":"def icsort nums\n  maxlen = nums.max.to_s.length\n  nums.map{ |x| x.to_s }.sort_by { |x| x * (maxlen * 2 / x.length) }.reverse\nend\n\n[[54, 546, 548, 60], [1, 34, 3, 98, 9, 76, 45, 4]].each do |c|\n  p c # prints nicer in Ruby 1.8\n  puts icsort(c).join\nend","language":"ruby"},{"title":"Largest int from concatenated ints","code":"require 'rational' #Only needed in Ruby < 1.9\n\ndef icsort nums\n  nums.sort_by { |i| Rational(i, 10**(Math.log10(i).to_i+1)-1) }.reverse\nend\n\n[[54, 546, 548, 60], [1, 34, 3, 98, 9, 76, 45, 4]].each do |c|\n  p c # prints nicer in Ruby 1.8\n  puts icsort(c).join\nend","language":"ruby"},{"title":"Largest int from concatenated ints","code":"func maxnum(nums) {\n    nums.sort {|x,y|  \"#{y}#{x}\" <=> \"#{x}#{y}\" };\n}\n\n[[54, 546, 548, 60], [1, 34, 3, 98, 9, 76, 45, 4]].each { |c|\n    say maxnum(c).join.to_num;\n}","language":"ruby"},{"title":"Zeckendorf arithmetic","code":"int main(void) {\n  N G;\n  G = 1000N;\n  G -= 101N;\n  std::cout << G << std::endl;\n  G = 10101010N;\n  G -= 1010101N;\n  std::cout << G << std::endl;\n  return 0;\n}","language":"cpp"},{"title":"Zeckendorf arithmetic","code":"int main(void) {\n  N G = 1001N;\n  G *= 101N;\n  std::cout << G << std::endl;\n\n  G = 101010N;\n  G += 101N;\n  std::cout << G << std::endl;\n  return 0;\n}","language":"cpp"},{"title":"Include a file","code":"/* Standard and other library header names are enclosed between chevrons */\n#include <stdlib.h>\n\n/* User/in-project header names are usually enclosed between double-quotes */\n#include \"myutil.h\"","language":"c"},{"title":"Include a file","code":"public class Class1 extends Class2\n{\n        //code here\n}","language":"Java"},{"title":"Include a file","code":"public class Class1\n{\n        Class2 c2=new Class2();\n        static void main(String[] args)\n        {\n                c2.func1();\n                c2.func2();\n        }\n}","language":"Java"},{"title":"Include a file","code":"var s = document.createElement('script');\ns.type = 'application/javascript';\n\n// path to the desired file\ns.src = 'http://code.jquery.com/jquery-1.6.2.js';\ndocument.body.appendChild(s);","language":"javascript"},{"title":"Find the last Sunday of each month","code":"require 'date'\n\ndef last_sundays_of_year(year = Date.today.year)\n  (1..12).map do |month|\n    d = Date.new(year, month, -1) # -1 means \"last\".\n    d - d.wday\n  end\nend\n\nputs last_sundays_of_year(2013)","language":"ruby"},{"title":"Catalan numbers/Pascal's triangle","code":"int n = 15;\nList<int> t = new List<int>() { 0, 1 };\nfor (int i = 1; i <= n; i++)\n{\n    for (var j = i; j > 1; j--) t[j] += t[j - 1];\n    t.Add(t[i]);\n    for (var j = i + 1; j > 1; j--) t[j] += t[j - 1];\n    Console.Write(((i == 1) ? \"\" : \", \") + (t[i + 1] - t[i]));\n}","language":"csharp"},{"title":"Catalan numbers/Pascal's triangle","code":"var n = 15;\nfor (var t = [0, 1], i = 1; i <= n; i++) {\n    for (var j = i; j > 1; j--) t[j] += t[j - 1];\n    t[i + 1] = t[i];\n    for (var j = i + 1; j > 1; j--) t[j] += t[j - 1];\n    document.write(i == 1 ? '' : ', ', t[i + 1] - t[i]);\n}","language":"javascript"},{"title":"Catalan numbers/Pascal's triangle","code":"func catalan(num) {\n  var t = [0, 1]\n  (1..num).map { |i|\n    flip(^i    ).each {|j| t[j+1] += t[j] }\n    t[i+1] = t[i]\n    flip(^i.inc).each {|j| t[j+1] += t[j] }\n    t[i+1] - t[i]\n  }\n}\n\nsay catalan(15).join(' ')","language":"ruby"},{"title":"9 billion names of God the integer","code":"#include <iostream>\n#include <iomanip>\nint main(){\n  N=25;\n  for (int n=1; n<N/2; n++){\n    G_hyp(n);\n    for (int g=0; g<N-3; g++) std::cout << std::setw(4) << hyp[g];\n    std::cout << std::endl;\n  }\n}","language":"cpp"},{"title":"9 billion names of God the integer","code":"#include <iostream>\nint main(){\n  for (int n=1; n<N/2; n++) G_hyp(n);\n  std::cout << \"G(23)     = \" << hyp[21] << std::endl;\n  std::cout << \"G(123)    = \" << hyp[121] << std::endl;\n  std::cout << \"G(1234)   = \" << hyp[1232] << std::endl;\n  std::cout << \"G(12345)  = \" << hyp[12343] << std::endl;\n  mpz_class r{3};\n  for (int i = 0; i<N-3; i++) r += hyp[i];\n  std::cout << \"G(123456) = \" << r << std::endl;\n}","language":"cpp"},{"title":"9 billion names of God the integer","code":"# Generate IPF triangle\n# Nigel_Galloway: May 1st., 2013.\ndef g(n,g)\n  return 1 unless 1 < g and g < n-1\n  (2..g).inject(1){|res,q| res + (q > n-g ? 0 : g(n-g,q))}\nend\n \n(1..25).each {|n|\n  puts (1..n).map {|g| \"%4s\" % g(n,g)}.join\n}","language":"ruby"},{"title":"Sum multiples of 3 and 5","code":"[[\"Below\",\"Sum\"],[\"10^1\",23],[\"10^2\",2318],[\"10^3\",233168],\n [\"10^4\",23331668],[\"10^5\",2333316668],[\"10^6\",233333166668],\n [\"10^7\",23333331666668],[\"10^8\",2333333316666668]]","language":"JavaScript"},{"title":"Sum multiples of 3 and 5","code":"function sm35(n){\n        var s=0, inc=[3,2,1,3,1,2,3]\n        for (var j=6, i=0; i<n; j+=j==6?-j:1, i+=inc[j]) s+=i\n        return s\n}","language":"JavaScript"},{"title":"Sum multiples of 3 and 5","code":"function sm35(n){\n        return tri(n,3) + tri(n,5) - tri(n,15)\n        function tri(n, f) {\n                n = Math.floor((n-1) / f)\n                return f * n * (n+1) / 2\n        }\n}","language":"JavaScript"},{"title":"Sum multiples of 3 and 5","code":"for (var i=1, n=10; i<9; n*=10, i+=1) {\n        document.write(10, '<sup>', i, '</sup> ',  sm35(n), '<br>')\n}","language":"JavaScript"},{"title":"Sum multiples of 3 and 5","code":"{\"10\":23, \"100\":2318, \"1000\":233168, \"10000\":23331668,\n\"100000\":2333316668, \"1000000\":233333166668, \"10000000\":23333331666668,\n\"100000000\":2333333316666668}","language":"JavaScript"},{"title":"Sum multiples of 3 and 5","code":"class SumMultiples {\n        public static long getSum(long n) {\n                long sum = 0;\n                for (int i = 3; i < n; i++) {\n                        if (i % 3 == 0 || i % 5 == 0) sum += i;\n                }\n                return sum;\n        }\n        public static void main(String[] args) {\n                System.out.println(getSum(1000));\n        }\n}","language":"Java"},{"title":"Sum multiples of 3 and 5","code":"function tri (n) return n * (n + 1) / 2 end\n\nfunction sum35 (n)\n        n = n - 1\n        return        (        3 * tri(math.floor(n / 3)) + \n                        5 * tri(math.floor(n / 5)) - \n                        15 * tri(math.floor(n / 15))\n                )\nend\n\nprint(sum35(1000))\nprint(sum35(1e+20))","language":"Lua"},{"title":"Sum multiples of 3 and 5","code":"def sum35(n)\n  (1...n).select{|i|i%3==0 or i%5==0}.inject(:+)\nend\nputs sum35(1000)      #=> 233168","language":"ruby"},{"title":"Sum multiples of 3 and 5","code":"def sumMul(n, f)\n  n1 = (n - 1) / f\n  f * n1 * (n1 + 1) / 2\nend\n\ndef sum35(n)\n  sumMul(n, 3) + sumMul(n, 5) - sumMul(n, 15)\nend\n\nfor i in 1..20\n  puts \"%2d:%22d %s\" % [i, 10**i, sum35(10**i)]\nend","language":"ruby"},{"title":"Sum multiples of 3 and 5","code":"func sumMul(n, f) {\n    var n1 = int((n - 1) / f);\n    f * n1 * (n1 + 1) / 2;\n}\n\nfunc sum35(n) {\n    sumMul(n, 3) + sumMul(n, 5) - sumMul(n, 15);\n}\n\n20.times { |i|\n    printf(\"%2s:%22s %s\\n\", i, 10**i, sum35(10**i));\n};","language":"ruby"},{"title":"Casting out nines","code":"int main() {\n        ran r(16);\n        for (int i : co9(1,255,&r)) { std::cout << i << ' '; }\n        return 0;\n}","language":"cpp"},{"title":"Casting out nines","code":"int main() {\n        ran r(17);\n        for (int i : co9(1,288,&r)) { std::cout << i << ' '; }\n        return 0;\n}","language":"cpp"},{"title":"CSV data manipulation","code":"import fileinput\n\nchangerow, changecolumn, changevalue = 2, 4, '\"Spam\"'\n\nwith fileinput.input('csv_data_manipulation.csv', inplace=True) as f:\n    for line in f:\n        if fileinput.filelineno() == changerow:\n            fields = line.rstrip().split(',')\n            fields[changecolumn-1] = changevalue\n            line = ','.join(fields) + '\\n'\n        print(line, end='')","language":"python"},{"title":"CSV data manipulation","code":"# Read\nvar csvfile = %f'data.csv';\nvar fh = csvfile.open_r;\nvar header = fh.line.trim_end.split(',');\nvar csv = fh.lines.map { .trim_end.split(',').map{.to_num} };\nfh.close;\n\n# Write\nvar out = csvfile.open_w;\nout.say([header..., 'SUM'].join(','));\ncsv.each { |row| out.say([row..., row.sum].join(',')) };\nout.close;","language":"ruby"},{"title":"Closures/Value capture","code":"#include <iostream>\n#include <functional>\n#include <vector>\n\nint main() {\n  std::vector<std::function<int()> > funcs;\n  for (int i = 0; i < 10; i++)\n    funcs.push_back([=]() { return i * i; });\n  for ( std::function<int( )> f : funcs ) \n    std::cout << f( ) << std::endl ; \n  return 0;\n}","language":"cpp"},{"title":"Closures/Value capture","code":"var funcs = [];\nfor (var i = 0; i < 10; i++) {\n    funcs.push( (function(i) {\n                     return function() { return i * i; }\n                })(i) );\n}\nwindow.alert(funcs[3]()); // alerts \"9\"","language":"javascript"},{"title":"Closures/Value capture","code":"<script type=\"application/javascript;version=1.7\">\nvar funcs = [];\nfor (var i = 0; i < 10; i++) {\n    let (i = i) {\n        funcs.push( function() { return i * i; } );\n    }\n}\nwindow.alert(funcs[3]()); // alerts \"9\"\n</script>","language":"javascript"},{"title":"Closures/Value capture","code":"\"use strict\";\nlet funcs = [];\nfor (let i = 0; i < 10; ++i) {\n    funcs.push((i => () => i*i)(i));\n}\nconsole.log(funcs[3]());","language":"javascript"},{"title":"Closures/Value capture","code":"funcs={}\nfor i=1,10 do\n    table.insert(funcs, function() return i*i end)\nend\nfuncs[2]()\nfuncs[3]()","language":"Lua"},{"title":"Closures/Value capture","code":"funcs = []\nfor i in range(10):\n    funcs.append(lambda: i * i)\nprint funcs[3]() # prints 81","language":"python"},{"title":"Closures/Value capture","code":"funcs = []\nfor i in range(10):\n    funcs.append(lambda i=i: i * i)\nprint funcs[3]() # prints 9","language":"python"},{"title":"Closures/Value capture","code":"funcs = []\nfor i in range(10):\n    funcs.append((lambda i: lambda: i * i)(i))\nprint funcs[3]() # prints 9","language":"python"},{"title":"Closures/Value capture","code":"var f = (\n    10.of {|i| func(j){i * j} }\n)\n\n9.times { |j|\n    say f[j](j)\n}","language":"ruby"},{"title":"Closures/Value capture","code":"var f = (1..10).map { |i|\n    func(j){i * j}\n}\n\nfor j (1..9) {\n    say f[j-1](j)\n}","language":"ruby"},{"title":"Vogel's approximation method","code":"COSTS  = {S1: {D1: 46, D2:  74, D3:  9, D4: 28, D5: 99},\n          S2: {D1: 12, D2:  75, D3:  6, D4: 36, D5: 48},\n          S3: {D1: 35, D2: 199, D3:  4, D4:  5, D5: 71},\n          S4: {D1: 61, D2:  81, D3: 44, D4: 88, D5:  9},\n          S5: {D1: 85, D2:  60, D3: 14, D4: 25, D5: 79}}\ndemand = {D1: 278, D2: 60, D3: 461, D4: 116, D5: 1060}\nsupply = {S1: 461, S2: 277, S3: 356, S4: 488, S5: 393}","language":"ruby"},{"title":"String append","code":"#include <iostream>\n#include <string>\n\nint main( ) {\n   std::string greeting( \"Hello\" ) ;\n   greeting.append( \" , world!\" ) ;\n   std::cout << greeting << std::endl ;\n   return 0 ;\n}","language":"cpp"},{"title":"String append","code":"class Program\n{\n    static void Main(string[] args)\n    {\n        string x = \"foo\";\n        x += \"bar\";\n        System.Console.WriteLine(x);\n    }\n}","language":"csharp"},{"title":"String append","code":"String sa = \"Hello\";\nsa += \", World!\";\nSystem.out.println(sa);\n\nStringBuilder ba = new StringBuilder();\nba.append(\"Hello\");\nba.append(\", World!\");\nSystem.out.println(ba.toString());","language":"Java"},{"title":"String append","code":"var s1 = \"Hello\";\ns1 += \", World!\";\nprint(s1);\n\nvar s2 = \"Goodbye\";\n// concat() returns the strings together, but doesn't edit existing string\n// concat can also have multiple parameters\nprint(s2.concat(\", World!\"));","language":"JavaScript"},{"title":"String append","code":"function string:show ()\n    print(self)\nend\n\nfunction string:append (s)\n    self = self .. s\nend\n\nx = \"Hi \"\nx:show()\nx:append(\"there!\")\nx:show()","language":"Lua"},{"title":"String append","code":"x = \"Hi \"\nx = x .. \"there!\"\nprint(x)","language":"Lua"},{"title":"String append","code":"#!/usr/bin/env python\n# -*- coding: utf-8 -*- #\n\nstr = \"12345678\";\nstr += \"9!\";\nprint(str)","language":"python"},{"title":"String append","code":"s = \"Hello wo\"\ns += \"rld\" # new string object\ns << \"!\"   # mutates in place, same object\nputs s","language":"ruby"},{"title":"String append","code":"var str = 'Foo';\nstr += 'bar';\nsay str;","language":"ruby"},{"title":"String prepend","code":"public class Prepend {\n\n    public static void main(String[] args) {\n        String s = \"world!\";\n        System.out.println(\"Hello \" + s);\n    }\n}","language":"java"},{"title":"String prepend","code":"// No built-in prepend\nvar s=\", World\"\ns = \"Hello\" + s\nprint(s);","language":"javascript"},{"title":"String prepend","code":"s = \"12345678\"\ns = \"0\" .. s\nprint(s)","language":"lua"},{"title":"String prepend","code":"s = \"12345678\"\ns = string.format(\"%s%s\", \"0\", s)\nprint(s)","language":"lua"},{"title":"String prepend","code":"s = \"12345678\"\ns = table.concat({\"0\", s})\nprint(s)","language":"lua"},{"title":"String prepend","code":"#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ns = \"12345678\"\ns = \"0\" + s  # by concatenation\nprint(s)","language":"python"},{"title":"String prepend","code":"str = \"llo world\"\nstr.prepend(\"He\")\np str #=> \"Hello world\"","language":"ruby"},{"title":"String prepend","code":"var str = 'llo!';\nstr.sub!(/^/, 'He');\nsay str;","language":"ruby"},{"title":"String prepend","code":"var str = 'llo!';\nstr.prepend!('He');\nsay str;","language":"ruby"},{"title":"Comma quibbling","code":"fun commaQuibble(s):\n        result = \"\"\n        for (i, c) in enumerate(s):\n                if i > 0: \n            result += \", \" if i < s[!0] else \"and \"\n                result += c \n        result = \"{ $result }\"\n\nvar s = [ [] [\"ABC\"] [\"ABC\", \"DEF\"] [\"ABC\", \"DEF\", \"G\", \"H\"] ]\n\nfor i in s: print commaQuibble i","language":"python"},{"title":"Comma quibbling","code":"def commaQuibble(s):\n    return '{%s}' % ' and '.join(s).replace(' and ', ', ', len(s) - 2)\n\nfor seq in ([], [\"ABC\"], [\"ABC\", \"DEF\"], [\"ABC\", \"DEF\", \"G\", \"H\"]):\n        print('Input: %-24r -> Output: %r' % (seq, commaQuibble(seq)))","language":"python"},{"title":"Comma quibbling","code":"def comma_quibbling(a)\n  %w<{ }>.join(a.length < 2 ? a.first :\n               \"#{a[0..-2].join(', ')} and #{a[-1]}\")\nend\n\n[[], %w<ABC>, %w<ABC DEF>, %w<ABC DEF G H>].each do |a|\n  puts comma_quibbling(a)\nend","language":"ruby"},{"title":"Convert decimal number to rational","code":"> '0.9054054 0.518518 0.75'.split.each { |d| puts \"%s %s\" % [d, Rational(d)] }\n0.9054054 4527027/5000000\n0.518518 259259/500000\n0.75 3/4\n=> [\"0.9054054\", \"0.518518\", \"0.75\"]","language":"ruby"},{"title":"Convert decimal number to rational","code":"[0.9054054, 0.518518, 0.75].each { |f| puts \"#{f} #{f.rationalize(0.0001)}\" }\n# =>0.9054054 67/74\n# =>0.518518 14/27\n# =>0.75 3/4","language":"ruby"},{"title":"Convert decimal number to rational","code":"'0.9054054 0.518518 0.75'.split.each { |d|\n    say d.num.as_rat;\n}","language":"ruby"},{"title":"Convert decimal number to rational","code":"say 0.9054054.as_rat;\nsay 0.518518.as_rat;\nsay 0.75.as_rat;","language":"ruby"},{"title":"Gaussian elimination","code":"var Matrix = require('Math::Matrix');\n\nvar a = Matrix.new([0,1,0],\n                   [0,0,1],\n                   [2,0,1]);\n\nvar b = Matrix.new([1],\n                   [2],\n                   [4]);\n\na.concat(b).solve.print;","language":"ruby"},{"title":"ABC Problem","code":"fun abc(s, list):\n    return true if s.empty\n    for i in [:list.size]:\n        return any([abc(s[:!1], delete(val list, i))]) ...\n        if s[!0] in list[i] else true\n    false\n\nlet test = [\"A\", \"BARK\",\"BOOK\",\"TREAT\",\"COMMON\",\"SQUAD\",\"CONFUSE\"]\nlet list = [\"BO\",\"XK\",\"DQ\",\"CP\",\"NA\",\"GT\",\"RE\",\"TG\",\"QD\",\"FS\",\"JW\",\n\"HU\",\"VI\",\"AN\",\"OB\",\"ER\",\"FS\",\"LY\",\"PC\",\"ZM\"]\nfor s in test:\n    print \"$:.-8(s) | $(abc(s, list))\"","language":"python"},{"title":"ABC Problem","code":"A -> NA \nbark -> BO NA RE XK \nBooK: [no solution]\nTReAT -> GT RE ER NA TG \nCOMMON: [no solution]\nsquAD -> FS DQ HU NA QD \nconFUSE -> CP BO NA FS HU FS RE","language":"JavaScript"},{"title":"Chinese remainder theorem","code":"def chinese_remainder(mods, remainders)\n  max = mods.inject( :* )                            \n  series = remainders.zip( mods ).map{|r,m| r.step( max, m ).to_a } \n  series.inject( :& ).first #returns nil when empty\nend\n\np chinese_remainder([3,5,7], [2,3,2])     #=> 23\np chinese_remainder([10,4,9], [11,22,19]) #=> nil","language":"ruby"},{"title":"Semiprime","code":"from prime_decomposition import decompose\n\ndef semiprime(n):\n    d = decompose(n)\n    try:\n        return next(d) * next(d) == n\n    except:\n        return False","language":"python"},{"title":"Semiprime","code":"require('ntheory');\n\nfunc is_semiprime(n) {\n    static nt = %S'ntheory';\n    if (var p = [nt.trial_factor(n, 500)]) {\n        return false if (p.len > 2);\n        return !!nt.is_prime(p[1]) if (p.len == 2);\n  }\n  [nt.factor(n)].len == 2;\n}\n\nsay [2,4,99,100,1679,32768,1234567,9876543,900660121].grep{ is_semiprime(_) }","language":"ruby"},{"title":"Almost prime","code":"require 'prime'\n\ndef almost_primes(k=2)\n  return to_enum(:almost_primes, k) unless block_given?\n  n = 0\n  loop do \n    n += 1\n    yield n if n.prime_division.map( &:last ).inject( &:+ ) == k\n  end\nend\n\n(1..5).each{|k| puts almost_primes(k).take(10).join(\", \")}","language":"ruby"},{"title":"Almost prime","code":"require 'prime'\n\np ar = pr = Prime.take(10)\n4.times{p ar = ar.product(pr).map{|(a,b)| a*b}.uniq.sort.take(10)}","language":"ruby"},{"title":"Narcissistic decimal number","code":"class Integer\n  def narcissistic?\n    return false if negative?\n    digs = self.digits    \n    m    = digs.size\n    digs.map{|d| d**m}.sum == self\n  end\nend\n\nputs 0.step.lazy.select(&:narcissistic?).first(25)","language":"ruby"},{"title":"Ludic numbers","code":"def ludic(nmax=64):\n    yield 1\n    taken = []\n    while True:\n        lst, nmax = list(range(2, nmax + 1)), nmax * 2\n        for t in taken:\n            del lst[::t]\n        while lst:\n            t = lst[0]\n            taken.append(t)\n            yield t\n            del lst[::t]","language":"python"},{"title":"N'th","code":"function getSuffix (n)\n    local lastTwo, lastOne = n % 100, n % 10\n    if lastTwo > 3 and lastTwo < 21 then return \"th\" end\n    if lastOne == 1 then return \"st\" end\n    if lastOne == 2 then return \"nd\" end\n    if lastOne == 3 then return \"rd\" end\n    return \"th\"\nend\n \nfunction Nth (n) return n .. \"'\" .. getSuffix(n) end\n \nfor i = 0, 25 do print(Nth(i), Nth(i + 250), Nth(i + 1000)) end","language":"Lua"},{"title":"Generate lower case ASCII alphabet","code":"#include <string>\n#include <numeric>\n\nint main() {\n    std::string lower(26,' ');\n\n    std::iota(lower.begin(), lower.end(), 'a');\n}","language":"cpp"},{"title":"Generate lower case ASCII alphabet","code":"public class LowerAscii {\n\n    public static void main(String[] args) {\n        StringBuilder sb = new StringBuilder(26);\n        for (char ch = 'a'; ch <= 'z'; ch++)\n            sb.append(ch);\n        System.out.printf(\"lower ascii: %s, length: %s\", sb, sb.length());\n    }\n}","language":"java"},{"title":"Generate lower case ASCII alphabet","code":"var letters = []\nfor (var i = 97; i <= 122; i++) {\n    letters.push(String.fromCodePoint(i))\n}","language":"JavaScript"},{"title":"Generate lower case ASCII alphabet","code":"function getAlphabet ()\n    local letters = {}\n    for ascii = 97, 122 do table.insert(letters, string.char(ascii)) end\n    return letters\nend\n\nlocal alpha = getAlphabet()\nprint(alpha[25] .. alpha[1] .. alpha[25])","language":"Lua"},{"title":"Generate lower case ASCII alphabet","code":"# From the standard library:\nfrom string import ascii_lowercase\n\n# Generation:\nlower = [chr(i) for i in range(ord('a'), ord('z') + 1)]","language":"Python"},{"title":"Munching squares","code":"import Image, ImageDraw\n\nimage = Image.new(\"RGB\", (256, 256))\ndrawingTool = ImageDraw.Draw(image)\n\nfor x in range(256):\n    for y in range(256):\n        drawingTool.point((x, y), (0, x^y, 0))\n\ndel drawingTool\nimage.save(\"xorpic.png\", \"PNG\")","language":"Python"},{"title":"Munching squares","code":"require('Imager')\n\nvar img = %O<Imager>.new(xsize => 256, ysize => 256)\n\nfor x,y in (^256 ~X ^256) {\n    var rgb = [(255 - x - y).abs, (255-x)^y, x^(255-y)]\n    img.setpixel(x => x, y => y, color => rgb)\n}\n\nimg.write(file => 'xor.png')","language":"ruby"},{"title":"Maximum triangle path sum","code":"from itertools import imap\n\nf = lambda x, y, z: x + max(y, z)\ng = lambda xs, ys: list(imap(f, ys, xs, xs[1:]))\ndata = [map(int, row.split()) for row in open(\"triangle.txt\")][::-1]\nprint reduce(g, data)[0]","language":"python"},{"title":"Maximum triangle path sum","code":"var sum = [0]\n\nARGF.each {  |line|\n    var x = line.words.map{.to_n}\n    sum = [\n            x.first + sum.first,\n            1 ..^ x.end -> map{|i| x[i] + [sum[i-1, i]].max}...,\n            x.last + sum.last,\n          ]\n}\n\nsay sum.max","language":"ruby"},{"title":"Extensible prime generator","code":"void\nshowprimes(GEN lower, GEN upper)\n{\n  forprime_t T;\n  if (!forprime_init(&T, a,b)) return;\n  while(forprime_next(&T))\n  {\n    pari_printf(\"%Ps\\n\", T.pp);\n  }\n}","language":"c"},{"title":"Extensible prime generator","code":"require \"prime\"\n\nputs Prime.take(20).join(\", \")\nputs Prime.each(150).drop_while{|pr| pr < 100}.join(\", \")\nputs Prime.each(8000).drop_while{|pr| pr < 7700}.count\nputs Prime.take(10_000).last","language":"ruby"},{"title":"Extensible prime generator","code":"var nt = frequire('ntheory')\n\nsay (\"First 20: \", nt.primes(nt.nth_prime(20)).join(' '))\nsay (\"Between 100 and 150: \", nt.primes(100,150).join(' '))\nsay (nt.prime_count(7700,8000), \" primes between 7700 and 8000\")\nsay (\"10,000th prime: \", nt.nth_prime(10_000))","language":"ruby"},{"title":"Hello world/Newbie","code":"#include <iostream>\nint main() {\n    using namespace std;\n    cout << \"Hello, World!\" << endl;\n    return 0;\n}","language":"cpp"},{"title":"Hello world/Newbie","code":"public class HelloWorld {\n\n    public static void main(String[] args) {\n        System.out.println(\"Hello world!\");\n    }\n\n}","language":"Java"},{"title":"Magic squares of odd order","code":"def odd_magic_square(n)\n  raise ArgumentError \"Need odd positive number\" if n.even? || n <= 0\n  n.times.map{|i| n.times.map{|j| n*((i+j+1+n/2)%n) + ((i+2*j-5)%n) + 1} }\nend\n\n[3, 5, 9].each do |n|\n  puts \"\\nSize #{n}, magic sum #{(n*n+1)/2*n}\"\n  fmt = \"%#{(n*n).to_s.size + 1}d\" * n\n  odd_magic_square(n).each{|row| puts fmt % row}\nend","language":"ruby"},{"title":"Left factorials","code":"left_fact = Enumerator.new do |y|\n  n, f, lf = 0, 1, 0\n  loop do\n    y  << lf #yield left_factorial\n    n  += 1\n    lf += f\n    f  *= n\n  end\nend","language":"ruby"},{"title":"Left factorials","code":"left_fact = Enumerator.new do |y|\n  f, lf = 1, 0\n  1.step do |n|\n    y  << lf #yield left_factorial\n    lf += f\n    f  *= n\n  end\nend","language":"ruby"},{"title":"Left factorials","code":"tens = 20.step(110, 10)\nthousands = 1000.step(10_000, 1000)\n\n10001.times do |n|\n  lf = left_fact.next\n  case n\n  when 0..10, *tens\n    puts \"!#{n} = #{lf}\"\n  when *thousands\n    puts \"!#{n} has #{lf.to_s.size} digits\"\n  end\nend","language":"ruby"},{"title":"Left factorials","code":"func left_fact(k) {\n    ^k -> map {|n| n! } -> sum\n}","language":"ruby"},{"title":"Left factorials","code":"func left_fact(k) {\n    ^k -> reduce({ |a,b| a + b! }, 0)\n}","language":"ruby"},{"title":"Left factorials","code":"for i (0..10, 20..110 `by` 10) {\n    printf(\"!%d  = %s\\n\", i, left_fact(i))\n}\n\nfor i (1000..10000 `by` 1000) {\n    printf(\"!%d has %d digits.\\n\", i, left_fact(i).len)\n}","language":"ruby"},{"title":"Old lady swallowed a fly","code":"import zlib, base64\n\nb64 = b'''\neNrtVE1rwzAMvedXaKdeRn7ENrb21rHCzmrs1m49K9gOJv9+cko/HBcGg0LHcpOfnq2np0QL\n2FuKgBbICDAoeoiKwEc0hqIUgLAxfV0tQJCdhQM7qh68kheswKeBt5ROYetTemYMCC3rii//\nWMS3WkhXVyuFAaLT261JuBWwu4iDbvYp1tYzHVS68VEIObwFgaDB0KizuFs38aSdqKv3TgcJ\nuPYdn2B1opwIpeKE53qPftxRd88Y6uoVbdPzWxznrQ3ZUi3DudQ/bcELbevqM32iCIrj3IIh\nW6plOJf6L6xaajZjzqW/qAsKIvITBGs9Nm3glboZzkVP5l6Y+0bHLnedD0CttIyrpEU5Kv7N\nMz3XkPBc/TSN3yxGiqMiipHRekycK0ZwMhM8jerGC9zuZaoTho3kMKSfJjLaF8v8wLzmXMqM\nzJvGew/jnZPzclA08yAkikegDTTUMfzwDXBcwoE='''\nprint(zlib.decompress(base64.b64decode(b64)).decode(\"utf-8\", \"strict\"))","language":"python"},{"title":"Zero to the zero power","code":"#include <stdio.h>\n#include <math.h>\n#include <complex.h>\n\nint main()\n{\n        printf(\"0 ^ 0 = %f\\n\", pow(0,0));\n        double complex c = cpow(0,0);\n        printf(\"0+0i ^ 0+0i = %f+%fi\\n\", creal(c), cimag(c));\n        return 0;\n}","language":"c"},{"title":"Zero to the zero power","code":"#include <iostream>\n#include <cmath>\n#include <complex>\n\nint main()\n{\n  std::cout << \"0 ^ 0 = \" << std::pow(0,0) << std::endl;\n  std::cout << \"0+0i ^ 0+0i = \" <<\n    std::pow(std::complex<double>(0),std::complex<double>(0)) << std::endl;\n  return 0;\n}","language":"cpp"},{"title":"Zero to the zero power","code":"from decimal import Decimal\nfrom fractions import Fraction\nfrom itertools import product\n\nzeroes = [0, 0.0, 0j, Decimal(0), Fraction(0, 1), -0.0, -0.0j, Decimal(-0.0)]\nfor i, j in product(zeroes, repeat=2):\n    try:\n        ans = i**j\n    except:\n        ans = '<Exception raised>'\n    print(f'{i!r:>15} ** {j!r:<15} = {ans!r}')","language":"python"},{"title":"Zero to the zero power","code":"from decimal import Decimal\nfrom fractions import Fraction\nfor n in (Decimal(0), Fraction(0, 1), complex(0), float(0), int(0)):\n        try:\n                n1 = n**n\n        except:\n                n1 = '<Raised exception>'\n        try:\n                n2 = pow(n, n)\n        except:\n                n2 = '<Raised exception>'\n        print('%8s: ** -> %r; pow -> %r' % (n.__class__.__name__, n1, n2))","language":"python"},{"title":"Zero to the zero power","code":"require 'bigdecimal'\n\n[0, 0.0, Complex(0), Rational(0), BigDecimal.new(\"0\")].each do |n|\n  printf \"%10s: ** -> %s\\n\" % [n.class, n**n]\nend","language":"ruby"},{"title":"Zero to the zero power","code":"[0, Complex(0, 0)].each {|n|\n    say n**n\n}","language":"ruby"},{"title":"Digital root/Multiplicative digital root","code":"def mdroot(n):\n    count, mdr = 0, n \n    while mdr > 9:\n        m, digitsMul = mdr, 1\n        while m:\n            m, md = divmod(m, 10)\n            digitsMul *= md\n        mdr = digitsMul\n        count += 1\n    return count, mdr","language":"python"},{"title":"Catamorphism","code":"var nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nconsole.log(nums.reduce((a, b) => a + b, 0)); // sum of 1..10\nconsole.log(nums.reduce((a, b) => a * b, 1)); // product of 1..10\nconsole.log(nums.reduce((a, b) => a + b, '')); // concatenation of 1..10","language":"javascript"},{"title":"Catamorphism","code":"from functools import reduce\nfrom operator import add, mul\n\nnums = range(1,11)\n\nsummation = reduce(add, nums)\n\nproduct = reduce(mul, nums)\n\nconcatenation = reduce(lambda a, b: str(a) + str(b), nums)\n\nprint(summation, product, concatenation)","language":"python"},{"title":"Catamorphism","code":"# sum:\np (1..10).inject(:+)\n# smallest number divisible by all numbers from 1 to 20:\np (1..20).inject(:lcm) #lcm: lowest common multiple","language":"ruby"},{"title":"Currying","code":"public delegate int Plus(int y); \npublic delegate Plus CurriedPlus(int x);\npublic static CurriedPlus plus = \n      delegate(int x) {return delegate(int y) {return x + y;};};\nstatic void Main()\n{\n    int sum = plus(3)(4); // sum = 7\n    int sum2= plus(2)(plus(3)(4)) // sum2 = 9\n}","language":"csharp"},{"title":"Currying","code":"function addN(n) {\n    var curry = function(x) {\n        return x + n;\n    };\n    return curry;\n }\n\n add2 = addN(2);\n alert(add2);\n alert(add2(7));","language":"javascript"},{"title":"Currying","code":"def addN(n):\n     def adder(x):\n         return x + n\n     return adder","language":"python"},{"title":"Currying","code":"func curry(f, *args1) {\n    func (*args2) {\n        f(args1..., args2...);\n    }\n}\n\nfunc add(a, b) {\n    a + b\n}\n\nvar adder = curry(add, 1);\nsay adder(3);                 #=>4","language":"ruby"},{"title":"Quickselect algorithm","code":"var array = [9, 8, 7, 6, 5, 0, 1, 2, 3, 4], \n    ks = Array.apply(null, {length: 10}).map(Number.call, Number);\nks.map(k => { KthElement.find(array, k) });","language":"Javascript"},{"title":"Integer overflow","code":"2.1.1 :001 > a = 2**62 -1\n => 4611686018427387903 \n2.1.1 :002 > a.class\n => Fixnum \n2.1.1 :003 > (b = a + 1).class\n => Bignum \n2.1.1 :004 > (b-1).class\n => Fixnum","language":"ruby"},{"title":"Make directory path","code":"require(\"lfs\")\n\nfunction mkdir (path)\n  local sep, pStr = package.config:sub(1, 1), \"\"\n  for dir in path:gmatch(\"[^\" .. sep .. \"]+\") do\n    pStr = pStr .. dir .. sep\n    lfs.mkdir(pStr)\n  end\nend\n\nmkdir(\"C:\\\\path\\\\to\\\\dir\") -- Quoting backslashes requires escape sequence","language":"Lua"},{"title":"Make directory path","code":"def mkdirp(path):\n    try:\n        os.makedirs(path)\n    except OSError as exc: # Python >2.5\n        if exc.errno == errno.EEXIST and os.path.isdir(path):\n            pass\n        else: raise","language":"Python"},{"title":"Unix/ls","code":"var content = [];\nDir.cwd.open.each { |file|\n    file ~~ < . .. > && next;\n    content.append(file);\n}\n\ncontent.sort.each { |file|\n    say file;\n}","language":"ruby"},{"title":"Unix/ls","code":"'*'.glob.each { |file|\n    say file;\n}","language":"ruby"},{"title":"Sequence of primes by Trial Division","code":"def prime(a):\n    return not (a < 2 or any(a % x == 0 for x in xrange(2, int(a**0.5) + 1)))\n\ndef primes_below(n):\n    return [i for i in range(n) if prime(i)]","language":"Python"},{"title":"Sequence of primes by Trial Division","code":"require \"prime\"\n\npg = Prime::TrialDivisionGenerator.new\np pg.take(10) # => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\np pg.next # => 31","language":"ruby"},{"title":"Sequence of primes by Trial Division","code":"func prime_seq(amount, callback) {\n    var (counter, number) = (0, 0);\n    while (counter < amount) {\n        if (is_prime(number)) {\n            callback(number);\n            ++counter;\n        }\n        ++number;\n    }\n}\n\nprime_seq(100, {|p| say p});     # prints the first 100 primes","language":"ruby"},{"title":"Phrase reversals","code":"str = \"rosetta code phrase reversal\"\n\nputs str.reverse                          # Reversed string.\nputs str.split.map(&:reverse).join(\" \")   # Words reversed.\nputs str.split.reverse.join(\" \")          # Word order reversed.","language":"ruby"},{"title":"Phrase reversals","code":"var str    = \"rosetta code phrase reversal\";\n\nsay str.reverse;                            # reversed string\nsay str.words.map{.reverse}.join(' ');      # words reversed\nsay str.words.reverse.join(' ');            # word order reversed","language":"ruby"},{"title":"Abundant, deficient and perfect number classifications","code":"res = Hash.new(0)\n(1 .. 20_000).each{|n| res[n.proper_divisors.inject(0, :+) <=> n] += 1}\nputs \"Deficient: #{res[-1]}   Perfect: #{res[0]}   Abundant: #{res[1]}\"","language":"ruby"},{"title":"Stern-Brocot sequence","code":"uint f(uint n)\n{\n        uint a = 1, b = 0;\n        while (n) {\n                if (n&1) b += a;\n                else         a += b;\n                n >>= 1;\n        }\n        return b;\n}","language":"c"},{"title":"JortSort","code":"public class JortSort {\n    public static void main(String[] args) {\n        System.out.println(jortSort(new int[]{1, 2, 3}));\n    }\n\n    static boolean jortSort(int[] arr) {\n        return true;\n    }\n}","language":"java"},{"title":"JortSort","code":"def jortSort(array):\n \n  # sort the array\n  originalArray = list(array)\n  array.sort()\n \n  # compare to see if it was originally sorted\n  for i in range(len(originalArray)):\n    if originalArray[i] != array[i]:\n      return False\n \n  return True","language":"Python"},{"title":"JortSort","code":"def jort_sort(array)\n  array == array.sort\nend","language":"Ruby"},{"title":"JortSort","code":"def jort_sort(array)\n  # sort the array\n  original_array = array.dup\n  array.sort!\n \n  # compare to see if it was originally sorted\n  original_array.length.times do |i|\n    return false if original_array[i] != array[i]\n  end\n \n  true\nend","language":"Ruby"},{"title":"Euler's sum of powers conjecture","code":"set<double> pow5s;\n        for (auto i = 1; i < MAX; i++) \n        {\n                pow5[i] = (double)i * i * i * i * i;\n                pow5s.insert(pow5[i]);\n        }\n        //...\n        if (pow5s.find(sum) != pow5s.end())","language":"cpp"},{"title":"Pascal matrix generation","code":"#Upper, lower, and symetric Pascal Matrix - Nigel Galloway: May 3rd., 21015\nrequire 'pp'\n\nng = (g = 0..4).collect{[]}\ng.each{|i| g.each{|j| ng[i][j] = i==0 ? 1 : j<i ? 0 : ng[i-1][j-1]+ng[i][j-1]}}\npp ng; puts\ng.each{|i| g.each{|j| ng[i][j] = j==0 ? 1 : i<j ? 0 : ng[i-1][j-1]+ng[i-1][j]}}\npp ng; puts\ng.each{|i| g.each{|j| ng[i][j] = (i==0 or j==0) ? 1 : ng[i-1][j  ]+ng[i][j-1]}}\npp ng","language":"ruby"},{"title":"Compare a list of strings","code":"{\n  \"allEqual\": [\n    false,\n    false,\n    true\n  ],\n  \"azSorted\": [\n    false,\n    true,\n    true\n  ]\n}","language":"JavaScript"},{"title":"FTP","code":"from ftplib import FTP\nftp = FTP('kernel.org')\nftp.login()\nftp.cwd('/pub/linux/kernel')\nftp.set_pasv(True) # Default since Python 2.1\nprint ftp.retrlines('LIST')\nprint ftp.retrbinary('RETR README', open('README', 'wb').write)\nftp.quit()","language":"Python"},{"title":"FTP","code":"require 'net/ftp'\n\nNet::FTP.open('ftp.ed.ac.uk', \"anonymous\",\"aaa@gmail.com\" ) do |ftp|\n  ftp.passive = true\n  ftp.chdir('pub/courses')\n  ftp.list.each{|e| puts e}\n  ftp.getbinaryfile(\"make.notes.tar\")\nend","language":"ruby"},{"title":"FTP","code":"require('Net::FTP');\n\nvar ftp = %s'Net::FTP'.new('ftp.ed.ac.uk', Passive => 1);\nftp.login('anonymous','aaa@gmail.com');\nftp.cwd('pub/courses');\n[ftp.dir].each {|line| say line };\nftp.binary;   # set binary mode\nftp.get(\"make.notes.tar\");\nftp.quit;","language":"ruby"},{"title":"General FizzBuzz","code":"function fizz(d, e) {\n  return function b(a) {\n    return a ? b(a - 1).concat(a) : [];\n  }(e).reduce(function (b, a) {\n    return b + (d.reduce(function (b, c) {\n      return b + (a % c[0] ? \"\" : c[1]);\n    }, \"\") || a.toString()) + \"\\n\";\n  }, \"\");\n}","language":"JavaScript"},{"title":"General FizzBuzz","code":"def genfizzbuzz(factorwords, numbers):\n    factorwords.sort(key=lambda p: p[0])\n    lines = []\n    for num in numbers:\n        words = ''.join(wrd for fact, wrd in factorwords if (num % fact) == 0)\n        lines.append(words if words else str(num))\n    return '\\n'.join(lines)\n\nif __name__ == '__main__':\n    print(genfizzbuzz([(5, 'Buzz'), (3, 'Fizz'), (7, 'Baxx')], range(1, 21)))","language":"python"},{"title":"Primorial numbers","code":"require 'prime'\n\ndef primorial_number(n)\n  pgen = Prime.each\n  (1..n).inject(1){|p,_| p*pgen.next}\nend\n\nputs \"First ten primorials: #{(0..9).map{|n| primorial_number(n)}}\"\n\n(1..5).each do |n|\n  puts \"primorial(10**#{n}) has #{primorial_number(10**n).to_s.size} digits\"\nend","language":"ruby"},{"title":"Primorial numbers","code":"say (\n    'First ten primorials: ',\n    {|i| pn_primorial(i) }.map(^10).join(', ')\n)\n\n{ |i|\n    say (\"primorial(10^#{i}) has \" + pn_primorial(10**i).len + ' digits')\n} << 1..6","language":"ruby"},{"title":"Naming conventions","code":"#include <math.h>\ndouble cos(double x);\nfloat cosf(float x);\nlong double cosl(long double x);","language":"c"},{"title":"Naming conventions","code":"#include <complex.h>\ndouble complex ccos(double complex z);\nfloat complex ccosf(float complex z);\nlong double complex ccosl(long double complex z);","language":"c"},{"title":"Naming conventions","code":"local DISTANCE_MAXIMUM   = 1\nlocal distance_to_target = 0\nlocal function distanceToTarget() end\nlocal function TargetFactory() end\n\nfor _,v in ipairs(table) do\n  print(v)\nend","language":"Lua"},{"title":"Naming conventions","code":"test_variable = [1, 9, 8, 3]\ntest_variable.sort    # => [1, 3, 8, 9]\ntest_variable         # => [1, 9, 8, 3]\ntest_variable.sort!   # => [1, 3, 8, 9]\ntest_variable         # => [1, 3, 8, 9]","language":"Ruby"},{"title":"Array length","code":"using System;\n\nclass Program\n{\n    public static void Main()\n    {\n        var fruit = new[] { \"apple\", \"orange\" };\n        Console.WriteLine(fruit.Length);\n    }\n}","language":"csharp"},{"title":"Array length","code":"var fruit = new[] { \"apple\", \"orange\" };\nvar fruit = new string[] { \"apple\", \"orange\" };\nstring[] fruit = new[] { \"apple\", \"orange\" };\nstring[] fruit = new string[] { \"apple\", \"orange\" };\nstring[] fruit = { \"apple\", \"orange\" };","language":"csharp"},{"title":"Array length","code":"using static System.Console;\n\nclass Program \n{\n    public static void Main()\n    {\n        WriteLine(new[] { \"apples\", \"oranges\" }.Length);\n    }\n}","language":"csharp"},{"title":"Array length","code":"#include <array>\n#include <iostream>\n#include <string>\n\nint main() \n{\n    std::array<std::string, 2> fruit { \"apples\", \"oranges\" };\n    std::cout << fruit.size();\n    return 0;\n}","language":"cpp"},{"title":"Array length","code":"std::vector<std::string> fruitV({ \"apples\", \"oranges\" });\n    std::list<std::string> fruitL({ \"apples\", \"oranges\" });\n    std::deque<std::string> fruitD({ \"apples\", \"oranges\" });\n    std::cout << fruitV.size() << fruitL.size() << fruitD.size() << std::endl;","language":"cpp"},{"title":"Array length","code":"public class ArrayLength {\n    public static void main(String[] args) {\n        System.out.println(new String[]{\"apple\", \"orange\"}.length);\n    }\n}","language":"java"},{"title":"Array length","code":"function last(lst) {\n    return lst[lst.length - 1];\n}","language":"JavaScript"},{"title":"Array length","code":"function last(lst) {\n    return lst.reduce(function (a, x) {\n        return x;\n    }, null);\n}","language":"JavaScript"},{"title":"Array length","code":"function last(list, defaultValue) {\n   return list.length ?list[list.length-1] :defaultValue;\n}","language":"JavaScript"},{"title":"Array length","code":"function last(list, defaultValue) {\n    return list.slice(-1)[0] || defaultValue;\n}","language":"JavaScript"},{"title":"Array length","code":"var arr = ['apple', 'orange'];\nsay arr.len;        #=> 2\nsay arr.end;        #=> 1 (zero based)","language":"ruby"},{"title":"Write entire file","code":"/*\n * Write Entire File -- RossetaCode -- dirty hackish solution\n */\n#define _CRT_SECURE_NO_WARNINGS  // turn off MS Visual Studio restrictions\n#include <stdio.h>\n\nint main(void)\n{\n    return 0 >= fputs(\"ANY STRING TO WRITE TO A FILE AT ONCE.\", \n        freopen(\"sample.txt\",\"wb\",stdout));\n}","language":"C"},{"title":"Write entire file","code":"#include <fstream>\nusing namespace std;\n\nint main()\n{\n    ofstream file(\"new.txt\");\n    file << \"this is a string\";\n    file.close();\n    return 0;\n}","language":"cpp"},{"title":"Write entire file","code":"function writeFile (filename, data)\n        local f = io.open(filename, 'w')\n        f:write(data)\n        f:close()\nend\n\nwriteFile(\"stringFile.txt\", \"Mmm... stringy.\")","language":"Lua"},{"title":"Write entire file","code":"var file = File(__FILE__)\nfile.open_w(\\var fh, \\var err) || die \"Can't open #{file}: #{err}\"\nfh.print(\"Hello world!\")       || die \"Can't write to #{file}: #{$!}\"","language":"ruby"},{"title":"Write entire file","code":"package com.rosetta.example\n\nimport java.io.File\nimport java.io.PrintStream\n\nclass WriteFile {\n    def static main( String ... args ) {\n        val fout = new PrintStream(new File(args.get(0)))\n        fout.println(\"Some text.\")\n        fout.close\n    }\n}","language":"java"},{"title":"Thue-Morse","code":"(function(steps) {\n    'use strict';\n    var i, tmp, s1 = '0', s2 = '1';\n    for (i = 0; i < steps; i++) {\n        tmp = s1;\n        s1 += s2;\n        s2 += tmp;\n    }\n    console.log(s1);    \n})(6);","language":"JavaScript"},{"title":"Thue-Morse","code":"m='0'\nprint(m)\nfor i in range(0,6):\n     m0=m\n     m=m.replace('0','a')\n     m=m.replace('1','0')\n     m=m.replace('a','1')\n     m=m0+m\n     print(m)","language":"Python"},{"title":"Thue-Morse","code":"func recmap(repeat, seed, transform, callback) {\n    func (repeat, seed) {\n        callback(seed)\n        repeat > 0 && __FUNC__(repeat-1, transform(seed))\n    }(repeat, seed)\n}\n\nrecmap(6, \"0\", {|s| s + s.tr('01', '10') }, { .say })","language":"ruby"},{"title":"Stream Merge","code":"import heapq\nimport sys\n\nsources = sys.argv[1:]\nfor item in heapq.merge(open(source) for source in sources):\n    print(item)","language":"python"},{"title":"Pathological floating point problems","code":"from fractions import Fraction\n\ndef muller_seq(n:int) -> float:\n    seq = [Fraction(0), Fraction(2), Fraction(-4)]\n    for i in range(3, n+1):\n        next_value = (111 - 1130/seq[i-1]\n            + 3000/(seq[i-1]*seq[i-2]))\n        seq.append(next_value)\n    return float(seq[n])\n\nfor n in [3, 4, 5, 6, 7, 8, 20, 30, 50, 100]:\n    print(\"{:4d} -> {}\".format(n, muller_seq(n)))","language":"Python"},{"title":"Pathological floating point problems","code":"from fractions import Fraction\n\ndef rump(generic_a, generic_b) -> float:\n    a = Fraction('{}'.format(generic_a))\n    b = Fraction('{}'.format(generic_b))\n    fractional_result = Fraction('333.75') * b**6 \\\n        + a**2 * ( 11 * a**2 * b**2 - b**6 - 121 * b**4 - 2 ) \\\n        + Fraction('5.5') * b**8 + a / (2 * b)\n    return(float(fractional_result)) \n\nprint(\"rump(77617, 33096) = \", rump(77617.0, 33096.0))","language":"Python"},{"title":"Pathological floating point problems","code":"ar = [0, 2, -4]\n100.times{ar << (111 - 1130.quo(ar[-1])+ 3000.quo(ar[-1]*ar[-2])) }\n \n[3, 4, 5, 6, 7, 8, 20, 30, 50, 100].each do |n|\n  puts \"%3d -> %0.16f\" % [n, ar[n]]\nend","language":"Ruby"},{"title":"Pathological floating point problems","code":"require 'bigdecimal/math'\nbalance = BigMath.E(50) - 1\n1.upto(25){|y| balance = balance * y - 1}\nputs \"Bank balance after 25 years = #{balance.to_f}\"","language":"Ruby"},{"title":"Find palindromic numbers in both binary and ternary bases","code":"var format = \"%11s %24s %38s\\n\"\nformat.printf(\"decimal\", \"ternary\", \"binary\")\nformat.printf(0, 0, 0)\n\nfor n in (0 .. 2e5) {\n    var pal = n.base(3)||''\n    var b3 = (pal + '1' + pal.flip)\n    var b2 = Num(b3, 3).base(2)\n    if (b2 == b2.flip) {\n        format.printf(Num(b2, 2), b3, b2)\n    }\n}","language":"ruby"},{"title":"Pentagram","code":"import turtle\n\nturtle.bgcolor(\"green\")\nt = turtle.Turtle()\nt.color(\"red\", \"blue\")\nt.begin_fill()\nfor i in range(0, 5):\n    t.forward(200)\n    t.right(144)\nt.end_fill()","language":"python"},{"title":"Reflection/Get source","code":"function foo() {...}\nfoo.toString();\n// \"function foo() {...}\"","language":"javascript"},{"title":"Reflection/Get source","code":"import os\nos.__file__\n# \"/usr/local/lib/python3.5/os.pyc\"","language":"python"},{"title":"Reflection/Get source","code":"require 'mathn'\nMath.method(:sqrt).source_location\n# [\"/usr/local/lib/ruby2.3/2.3.0/mathn.rb\", 119]\n\nClass.method(:nesting).source_location\n# nil, since Class#nesting is native","language":"ruby"},{"title":"Tokenize a string with escaping","code":"func tokenize(string, sep, esc) {\n    var fields = string.split(\n        Regex(esc.escape + '.(*SKIP)(*FAIL)|' + sep.escape, 's'), -1\n    )\n    fields.map{.gsub(Regex(esc + '(.)'), {|s1| s1 }) }\n}\n\ntokenize(\"one^|uno||three^^^^|four^^^|^cuatro|\", '|', '^').each { |str|\n    say str.dump\n}","language":"ruby"},{"title":"Get system command output","code":"var pipe   = %p(ls)           # same as: Pipe('ls')\nvar pipe_h = pipe.open_r      # open the pipe for reading\nvar lines  = []               # will store the lines of the output\npipe_h.each { |line| lines << line }","language":"ruby"},{"title":"Sum and Product Puzzle","code":"def add(x,y) x + y end\ndef mul(x,y) x * y end\n\ndef sumEq(s,p) s.select{|q| add(*p) == add(*q)} end\ndef mulEq(s,p) s.select{|q| mul(*p) == mul(*q)} end\n\ns1 = (a = *2...100).product(a).select{|x,y| x<y && x+y<100}\ns2 = s1.select{|p| sumEq(s1,p).all?{|q| mulEq(s1,q).size != 1} }\ns3 = s2.select{|p| (mulEq(s1,p) & s2).size == 1}\np    s3.select{|p| (sumEq(s1,p) & s3).size == 1}","language":"ruby"},{"title":"Babbage problem","code":"n = 0\nn = n + 2 until (n*n).modulo(1000000) == 269696 \nprint n","language":"ruby"},{"title":"Babbage problem","code":"var n = 0\nwhile (n*n % 1000000 != 269696) {\n    n += 2\n}\nsay n","language":"ruby"},{"title":"Search a list of records","code":"[\n  { \"name\": \"Lagos\",                \"population\": 21.0  },\n  { \"name\": \"Cairo\",                \"population\": 15.2  },\n  { \"name\": \"Kinshasa-Brazzaville\", \"population\": 11.3  },\n  { \"name\": \"Greater Johannesburg\", \"population\":  7.55 },\n  { \"name\": \"Mogadishu\",            \"population\":  5.85 },\n  { \"name\": \"Khartoum-Omdurman\",    \"population\":  4.98 },\n  { \"name\": \"Dar Es Salaam\",        \"population\":  4.7  },\n  { \"name\": \"Alexandria\",           \"population\":  4.58 },\n  { \"name\": \"Abidjan\",              \"population\":  4.4  },\n  { \"name\": \"Casablanca\",           \"population\":  3.98 }\n]","language":"JavaScript"},{"title":"Exponentiation order","code":"print(\"5^3^2 = \" .. 5^3^2)\nprint(\"(5^3)^2 = \" .. (5^3)^2)\nprint(\"5^(3^2) = \" .. 5^(3^2))","language":"Lua"},{"title":"Archimedean spiral","code":"from turtle import *\nfrom math import *\ncolor(\"blue\")\ndown()\nfor i in range(200):\n    t = i / 20 * pi\n    x = (1 + 5 * t) * cos(t)\n    y = (1 + 5 * t) * sin(t)\n    goto(x, y)\nup()\ndone()","language":"python"},{"title":"Nested function","code":"string MakeList(string separator)\n{\n    var counter = 1;\n\n    var makeItem = new Func<string, string>((item) => {\n        return counter++ + separator + item + \"\\n\";\n    });\n\n    return makeItem(\"first\") + makeItem(\"second\") + makeItem(\"third\");\n}\n\nConsole.WriteLine(MakeList(\". \"));","language":"csharp"},{"title":"Nested function","code":"function makeList(separator) {\n  var counter = 1;\n\n  function makeItem(item) {\n    return counter++ + separator + item + \"\\n\";\n  }\n\n  return makeItem(\"first\") + makeItem(\"second\") + makeItem(\"third\");\n}\n\nconsole.log(makeList(\". \"));","language":"javascript"},{"title":"Nested function","code":"function makeList (separator)\n    local counter = 0\n    local function makeItem(item)\n            counter = counter + 1\n            return counter .. separator .. item .. \"\\n\"\n        end\n    return makeItem(\"first\") .. makeItem(\"second\") .. makeItem(\"third\")\nend\n \nprint(makeList(\". \"))","language":"lua"},{"title":"Nested function","code":"def makeList(separator):\n    counter = 1\n\n    def makeItem(item):\n        nonlocal counter\n        result = str(counter) + separator + item + \"\\n\"\n        counter += 1\n        return result\n\n    return makeItem(\"first\") + makeItem(\"second\") + makeItem(\"third\")\n\nprint(makeList(\". \"))","language":"python"},{"title":"Test integerness","code":"function isInt (x) return type(x) == \"number\" and x == math.floor(x) end\n\nprint(\"Value\\tInteger?\")\nprint(\"=====\\t========\")\nlocal testCases = {2, 0, -1, 3.5, \"String!\", true}\nfor _, input in pairs(testCases) do print(input, isInt(input)) end","language":"lua"},{"title":"Send email","code":"sendemail(from_addr    = 'python@RC.net', \n          to_addr_list = ['RC@gmail.com'],\n          cc_addr_list = ['RC@xx.co.uk'], \n          subject      = 'Howdy', \n          message      = 'Howdy from a python function', \n          login        = 'pythonuser', \n          password     = 'XXXXX')","language":"python"},{"title":"Compiler/lexical analyzer","code":"if ( p /* meaning n is prime */ ) {\n    print ( n , \" \" ) ;\n    count = count + 1 ; /* number of primes found so far */\n}","language":"c"},{"title":"Compiler/lexical analyzer","code":"/*\n  Hello world\n */\nprint(\"Hello, World!\\n\");","language":"c"},{"title":"Compiler/lexical analyzer","code":"/*\n  Show Ident and Integers\n */\nphoenix_number = 142857;\nprint(phoenix_number, \"\\n\");","language":"c"},{"title":"Compiler/lexical analyzer","code":"/*** test printing, embedded \\n and comments with lots of '*' ***/\nprint(42);\nprint(\"\\nHello World\\nGood Bye\\nok\\n\");\nprint(\"Print a slash n - \\\\n.\\n\");","language":"c"},{"title":"Compiler/syntax analyzer","code":"count = 1;\n while (count < 10) {\n     print(\"count is: \", count, \"\\n\");\n     count = count + 1;\n }","language":"c"},{"title":"Compiler/syntax analyzer","code":"def prt_ast(t)\n    if t == NULL\n        print(\";\\n\")\n    else\n        print(t.node_type)\n        if t.node_type in [Identifier, Integer, String]     # leaf node\n            print the value of the Ident, Integer or String, \"\\n\"\n        else\n            print(\"\\n\")\n            prt_ast(t.left)\n            prt_ast(t.right)","language":"python"},{"title":"Multiple distinct objects","code":"foo *foos = malloc(n * sizeof(*foos));\nfor (int i = 0; i < n; i++)\n  init_foo(&foos[i]);","language":"c"},{"title":"Multiple distinct objects","code":"using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\nList<Foo> foos = Enumerable.Range(1, n).Select(x => new Foo()).ToList();","language":"csharp"},{"title":"Multiple distinct objects","code":"Foo[] foos = new Foo[n]; // all elements initialized to null\nfor (int i = 0; i < foos.length; i++)\n    foos[i] = new Foo();\n\n// incorrect version:\nFoo[] foos_WRONG = new Foo[n];\nArrays.fill(foos, new Foo());  // new Foo() only evaluated once","language":"java"},{"title":"Multiple distinct objects","code":"var a = new Array(n);\nfor (var i = 0; i < n; i++)\n  a[i] = new Foo();","language":"javascript"},{"title":"Compiler/code generator","code":"count = 1;\nwhile (count < 10) {\n    print(\"count is: \", count, \"\\n\");\n    count = count + 1;\n}","language":"c"},{"title":"MAC Vendor Lookup","code":"import requests\n\nfor addr in ['88:53:2E:67:07:BE', 'FC:FB:FB:01:FA:21',\n        'D4:F4:6F:C9:EF:8D', '23:45:67']:\n    vendor = requests.get('http://api.macvendors.com/' + addr).text\n    print(addr, vendor)","language":"python"},{"title":"Sorting algorithms/Selection sort","code":"def selection_sort(lst):\n    for i, e in enumerate(lst):\n        mn = min(range(i,len(lst)), key=lst.__getitem__)\n        lst[i], lst[mn] = lst[mn], e\n    return lst","language":"python"},{"title":"Pascal's triangle","code":"def pascal(n):\n   \"\"\"Prints out n rows of Pascal's triangle.\n   It returns False for failure and True for success.\"\"\"\n   row = [1]\n   k = [0]\n   for x in range(max(n,0)):\n      print row\n      row=[l+r for l,r in zip(row+k,k+row)]\n   return n>=1","language":"python"},{"title":"Pascal's triangle","code":"def pascal(n)\n  raise ArgumentError, \"must be positive.\" if n < 1\n  yield ar = [1]\n  (n-1).times do\n    ar.unshift(0).push(0) # tack a zero on both ends\n    yield ar = ar.each_cons(2).map(&:sum)\n  end\nend\n \npascal(8){|row| puts row.join(\" \").center(20)}","language":"ruby"},{"title":"Pascal's triangle","code":"def next_row(row) ([0] + row).zip(row + [0]).collect {|l,r| l + r } end\n\ndef pascal(n) n.times.inject([1]) {|x,_| next_row x } end\n\n8.times{|i| p pascal(i)}","language":"ruby"},{"title":"Singly-linked list/Element definition","code":"struct link {\n  struct link *next;\n  int data;\n};","language":"c"},{"title":"Singly-linked list/Element definition","code":"struct link\n{\n  link* next;\n  int data;\n};","language":"cpp"},{"title":"Singly-linked list/Element definition","code":"struct link\n{\n  link* next;\n  int data;\n  link(int a_data, link* a_next = 0): next(a_next), data(a_data) {}\n};","language":"cpp"},{"title":"Singly-linked list/Element definition","code":"template<typename T> struct link\n{\n  link* next;\n  T data;\n  link(T a_data, link* a_next = 0): next(a_next), data(a_data) {}\n};","language":"cpp"},{"title":"Singly-linked list/Element definition","code":"class Link\n{\n    public int Item { get; set; }\n    public Link Next { get; set; }\n\n    //A constructor is not neccessary, but could be useful\n    public Link(int item, Link next = null) {\n        Item = item;\n        Next = next;\n    }\n}","language":"csharp"},{"title":"Singly-linked list/Element definition","code":"class Link\n{\n    Link next;\n    int data;\n}","language":"java"},{"title":"Singly-linked list/Element definition","code":"class Link\n{\n    Link next;\n    int data;\n    Link(int a_data, Link a_next) { next = a_next; data = a_data; }\n}","language":"java"},{"title":"Singly-linked list/Element definition","code":"class Link<T>\n{\n  Link<T> next;\n  T data;\n  Link(T a_data, Link<T> a_next) { next = a_next; data = a_data; }\n}","language":"java"},{"title":"Singly-linked list/Element definition","code":"var node = Hash.new(\n    data => 'say what',\n    next => foo_node,\n);\n\nnode{:next} = bar_node;  # mutable","language":"ruby"},{"title":"Split a character string based on change of character","code":"function splitdiff(s)\n  for i=#s,2,-1 do\n    if s:sub(i,i)~=s:sub(i-1,i-1) then\n      s = s:sub(1,i-1)..', '.. s:sub(i,-1)\n    end\n  end\n  return s\nend","language":"lua"},{"title":"Split a character string based on change of character","code":"import itertools\n\ntry: input = raw_input\nexcept: pass\n\ns = input()\ngroups = []\nfor _, g in itertools.groupby(s):\n    groups.append(''.join(g))\nprint('      input string:  %s' % s)\nprint('     output string:  %s' % ', '.join(groups))","language":"python"},{"title":"Split a character string based on change of character","code":"def split(str)\n  puts \" input string: #{str}\"\n  s = str.chars.chunk(&:itself).map{|_,a| a.join}.join(\", \")\n  puts \"output string: #{s}\"\n  s\nend\n\nsplit(\"gHHH5YY++///\\\\\")","language":"ruby"},{"title":"Split a character string based on change of character","code":"func group(str) {\n    gather {\n        while (var match = (str =~ /((.)\\g{-1}*)/g)) {\n            take(match[0])\n        }\n    }\n}\n\nsay group(ARGV[0] \\\\ 'gHHH5YY++///\\\\').join(', ')","language":"ruby"},{"title":"Sort a list of object identifiers","code":"data = [\n    '1.3.6.1.4.1.11.2.17.19.3.4.0.10',\n    '1.3.6.1.4.1.11.2.17.5.2.0.79',\n    '1.3.6.1.4.1.11.2.17.19.3.4.0.4',\n    '1.3.6.1.4.1.11150.3.4.0.1',\n    '1.3.6.1.4.1.11.2.17.19.3.4.0.1',\n    '1.3.6.1.4.1.11150.3.4.0'\n]\n\nfor s in sorted(data, key=lambda x: list(map(int, x.split('.')))):\n    print(s)","language":"Python"},{"title":"Sort a list of object identifiers","code":"%w[\n  1.3.6.1.4.1.11.2.17.19.3.4.0.10\n  1.3.6.1.4.1.11.2.17.5.2.0.79\n  1.3.6.1.4.1.11.2.17.19.3.4.0.4\n  1.3.6.1.4.1.11150.3.4.0.1\n  1.3.6.1.4.1.11.2.17.19.3.4.0.1\n  1.3.6.1.4.1.11150.3.4.0\n]\n.sort_by{|oid| oid.split(\".\").map(&:to_i)}\n.each{|oid| puts oid}","language":"ruby"},{"title":"Factors of an integer","code":"function Factors( n ) \n    local f = {}\n    \n    for i = 1, n/2 do\n        if n % i == 0 then \n            f[#f+1] = i\n        end\n    end\n    f[#f+1] = n\n    \n    return f\nend","language":"lua"},{"title":"Factors of an integer","code":"class Integer\n  def factors() (1..self).select { |n| (self % n).zero? } end\nend\np 45.factors","language":"ruby"},{"title":"Factors of an integer","code":"class Integer\n  def factors\n    1.upto(Math.sqrt(self)).select {|i| (self % i).zero?}.inject([]) do |f, i| \n      f << self/i unless i == self/i\n      f << i\n    end.sort\n  end\nend\n[45, 53, 64].each {|n| puts \"#{n} : #{n.factors}\"}","language":"ruby"},{"title":"Kronecker product","code":"func kronecker_product(a, b) {\n    a ~X b -> map { _[0] ~X* _[1] }\n}\n\nkronecker_product([[1, 2], [3, 4]],\n                  [[0, 5], [6, 7]]).each { .say }\n\nsay ''\nkronecker_product([[0,1,0],  [1,1,1],   [0,1,0]],\n                  [[1,1,1,1],[1,0,0,1], [1,1,1,1]]).each { .say }","language":"ruby"},{"title":"Department Numbers","code":"@(1..7)->combinations(3, {|*a|\n    a.sum == 12 || next\n    a.permutations {|*b|\n        b[0].is_even || next\n        say (%w(police fire sanitation) ~Z b -> join(\" \"))\n    }\n})","language":"ruby"},{"title":"Sort three variables","code":"x =  'lions, tigers, and'\ny =  'bears, oh my!'\nz =  '(from the \"Wizard of OZ\")'\nx, y, z = [x, y, z].sort\nputs x, y, z\n\nx, y, z = 7.7444e4, -12, 18/2r # Float, Integer, Rational; taken from Perl 6\nx, y, z = [x, y, z].sort\nputs x, y, z","language":"ruby"},{"title":"Sort three variables","code":"var x = 77444\nvar y =   -12\nvar z =     0\n\n(x, y) = (y, x) if (x > y)\n(x, z) = (z, x) if (x > z)\n(y, z) = (z, y) if (y > z)\n\nsay x\nsay y\nsay z","language":"ruby"},{"title":"Cartesian product of two or more lists","code":"import itertools\nlists_1 = [[1,2],[3,4]]\nlists_2 = [[3,4],[1,2]]\nfor element in itertools.product(*lists_1):\n    print(element)\nprint()\nfor element in itertools.product(*lists_2):\n    print(element)","language":"python"},{"title":"Cartesian product of two or more lists","code":"p [1, 2].product([3, 4]) \np [3, 4].product([1, 2])\np [1, 2].product([])\np [].product([1, 2]) \np [1776, 1789].product([7, 12], [4, 14, 23], [0, 1])\np [1, 2, 3].product([30], [500, 100]) \np [1, 2, 3].product([], [500, 100])","language":"ruby"},{"title":"Shoelace formula for polygonal area","code":"function shoeArea(ps)\n  local function det2(i,j)\n    return ps[i][1]*ps[j][2]-ps[j][1]*ps[i][2]\n  end\n  local sum = #ps>2 and det2(#ps,1) or 0\n  for i=1,#ps-1 do sum = sum + det2(i,i+1)end\n  return math.abs(0.5 * sum)\nend","language":"lua"},{"title":"Munchausen numbers","code":"Func<char, int> toInt = c => c-'0';\n\nforeach (var i in Enumerable.Range(1,5000)\n        .Where(n => n == n.ToString()\n                .Sum(x => Math.Pow(toInt(x), toInt(x)))))\n        Console.WriteLine(i);","language":"csharp"},{"title":"Munchausen numbers","code":"for (let i of [...Array(5000).keys()]\n        .filter(n => n == n.toString().split('')\n        .reduce((a, b) => a+Math.pow(parseInt(b),parseInt(b)), 0)))\n    console.log(i);","language":"javascript"},{"title":"Munchausen numbers","code":"function isMunchausen (n)\n    local sum, nStr, digit = 0, tostring(n)\n    for pos = 1, #nStr do\n        digit = tonumber(nStr:sub(pos, pos))\n        sum = sum + digit ^ digit\n    end\n    return sum == n\nend\n\nfor i = 1, 5000 do\n    if isMunchausen(i) then print(i) end\nend","language":"Lua"},{"title":"Munchausen numbers","code":"for i in range(5000):\n    if i == sum(int(x) ** int(x) for x in str(i)):\n        print(i)","language":"python"},{"title":"Munchausen numbers","code":"func is_munchausen(n) {\n    n.digits.map{|d| d**d }.sum == n\n}\n\nsay (1..5000 -> grep(is_munchausen))","language":"ruby"},{"title":"Leonardo numbers","code":"const leoNum = (c, l0=1, l1=1, add=1) => new Array(c).fill(add).reduce(\n  (p, c, i) => i > 1 ? p.push(p[i-1] + p[i-2] + c) && p : p, [l0, l1]\n);\nconsole.log(leoNum(25));\nconsole.log(leoNum(25, 0, 1, 0));","language":"JavaScript"},{"title":"Leonardo numbers","code":"def leonardo(l0=1, l1=1, add=1)\n  return to_enum(__method__,l0,l1,add) unless block_given?\n  loop do  \n    yield l0\n    l0, l1 = l1, l0+l1+add\n  end\nend\n\np leonardo.take(25)\np leonardo(0,1,0).take(25)","language":"ruby"},{"title":"15 puzzle solver","code":"int main (){\n  N start(2,0,0xfe169b4c0a73d852,\"\",0);\n  Solve(start);\n}","language":"cpp"},{"title":"15 puzzle solver","code":"int main (){\n  fifteenSolver start(8,0xfe169b4c0a73d852);\n  start.Solve();\n}","language":"cpp"},{"title":"Find the intersection of two lines","code":"function intersection (s1, e1, s2, e2)\n  local d = (s1.x - e1.x) * (s2.y - e2.y) - (s1.y - e1.y) * (s2.x - e2.x)\n  local a = s1.x * e1.y - s1.y * e1.x\n  local b = s2.x * e2.y - s2.y * e2.x\n  local x = (a * (s2.x - e2.x) - (s1.x - e1.x) * b) / d\n  local y = (a * (s2.y - e2.y) - (s1.y - e1.y) * b) / d\n  return x, y\nend\n\nlocal line1start, line1end = {x = 4, y = 0}, {x = 6, y = 10}\nlocal line2start, line2end = {x = 0, y = 3}, {x = 10, y = 7}\nprint(intersection(line1start, line1end, line2start, line2end))","language":"lua"},{"title":"Find the intersection of two lines","code":"from __future__ import print_function\nfrom shapely.geometry import LineString\n\nif __name__==\"__main__\":\n        line1 = LineString([(4.0,0.0), (6.0,10.0)])\n        line2 = LineString([(0.0,3.0), (10.0,7.0)])\n        print (line1.intersection(line2))","language":"python"}];
